{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/extensions/file/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Kademlia } from \"../..\";\nimport bson from \"bson\";\nimport sha1 from \"sha1\";\nimport { getSliceArrayBuffer } from \"../../utill/file\";\n\nexport async function storeFile(blob: Blob, kad: Kademlia) {\n  const file: ArrayBuffer[] = await getSliceArrayBuffer(blob);\n  const jobs: {\n    key: string;\n    value: Buffer;\n  }[] = [];\n\n  {\n    const last: ArrayBuffer = file.pop()!;\n    const item = { value: Buffer.from(last), next: undefined };\n\n    const value = bson.serialize(item);\n    const key = sha1(value).toString();\n    jobs.push({ key, value });\n  }\n\n  const reverse = file.reverse();\n  reverse.forEach(ab => {\n    const pre = jobs.slice(-1)[0];\n    const item = { value: Buffer.from(ab), next: pre.key };\n    const value = bson.serialize(item);\n    const key = sha1(value).toString();\n    jobs.push({ key, value });\n  });\n\n  await Promise.all(jobs.map(job => kad.store(job.key, job.value)));\n  return jobs.slice(-1)[0].key;\n}\n\nexport async function findFile(headerKey: string, kad: Kademlia) {\n  const chunks: Buffer[] = [];\n  const first: any = await kad.findValue(headerKey);\n  const firstJson: { value: Buffer; next: string } = bson.deserialize(\n    first.buffer\n  );\n\n  const work = () =>\n    new Promise<boolean>(async (resolve, reject) => {\n      try {\n        for (let json = firstJson; ; ) {\n          chunks.push(json.value);\n          if (!json.next) {\n            resolve(true);\n            break;\n          }\n          const value: any = await kad.findValue(json.next);\n          if (!value) {\n            reject(false);\n            break;\n          }\n          json = bson.deserialize(value.buffer);\n        }\n      } catch (error) {}\n    });\n\n  if (first) {\n    const res = await work().catch(console.error);\n    if (res) {\n      return new Blob(chunks.map(uint => uint.buffer));\n    }\n  }\n  return undefined;\n}\n"]}