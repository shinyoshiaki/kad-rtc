{"version":3,"file":"streamer.js","sourceRoot":"","sources":["../../../src/extensions/supermedia/streamer.ts"],"names":[],"mappings":";;;AAAA,8DAA4B;AAC5B,mCAAwE;AACxE,0CAAmD;AAGnD,MAAqB,gBAAgB;IAArC;QACE,aAAQ,GAAG,IAAI,iBAAK,EAAiB,CAAC;IA0DxC,CAAC;IAxDe,cAAc,CAAC,MAAmB;;YAC9C,IAAI,MAAM,GAAkB,EAAE,CAAC;YAE/B,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE;gBAC9C,QAAQ,EAAR,gBAAQ;gBACR,kBAAkB,EAAE,MAAO;aAC5B,CAAC,CAAC;YAEH,aAAa,CAAC,eAAe,GAAG,CAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;gBACvD,MAAM,GAAG,GAA4B,CAAC,MAAM,yBAAiB,CAC3D,IAAI,CACL,CAAQ,CAAC;gBACV,IAAI,GAAG,EAAE;oBACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEjB,IAAI,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE;wBACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC9B,MAAM,GAAG,EAAE,CAAC;qBACb;iBACF;YACH,CAAC,CAAA,CAAC;YAEF,aAAa,CAAC,KAAK,CAAC,gBAAQ,CAAC,CAAC;YAE9B,UAAU,CAAC,GAAG,EAAE;gBACd,aAAa,CAAC,IAAI,EAAE,CAAC;YACvB,CAAC,EAAE,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QACrB,CAAC;KAAA;IAEK,YAAY,CAChB,MAAmB,EACnB,QAA6B,EAC7B,GAAa;;YAEb,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAE5B,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;YAE7C,QAAQ,CAAC,oBAAY,CAAC,mBAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAE5C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBAC5B,MAAM,OAAO,GAAG,mBAAW,CAAC,MAAM,CAAC,CAAC;gBAEpC,MAAM,GAAG,GAAG,oBAAY,CAAC,OAAO,CAAC,CAAC;gBAClC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBACtC,MAAM,GAAG,GAAG,oBAAY,CAAC,mBAAW,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE3C,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBACjB,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC1B,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;gBAEH,MAAM,GAAG,GAAG,CAAC;YACf,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AA3DD,mCA2DC","sourcesContent":["import Event from \"rx.mini\";\nimport { mimeType, interval, torrent2hash, abs2torrent } from \"./const\";\nimport { readAsArrayBuffer } from \"../media/media\";\nimport { Kademlia } from \"../..\";\n\nexport default class SuperStreamVideo {\n  onChunks = new Event<ArrayBuffer[]>();\n\n  private async recordInterval(stream: MediaStream) {\n    let chunks: ArrayBuffer[] = [];\n\n    const mediaRecorder = new MediaRecorder(stream, {\n      mimeType,\n      videoBitsPerSecond: 128_000\n    });\n\n    mediaRecorder.ondataavailable = async ({ data: blob }) => {\n      const buf: undefined | ArrayBuffer = (await readAsArrayBuffer(\n        blob\n      )) as any;\n      if (buf) {\n        chunks.push(buf);\n\n        if (chunks.length === 10) {\n          this.onChunks.execute(chunks);\n          chunks = [];\n        }\n      }\n    };\n\n    mediaRecorder.start(interval);\n\n    setTimeout(() => {\n      mediaRecorder.stop();\n    }, 60 * 1000 * 10);\n  }\n\n  async streamViaKad(\n    stream: MediaStream,\n    onHeader: (s: string) => void,\n    kad: Kademlia\n  ) {\n    this.recordInterval(stream);\n\n    let buffer = await this.onChunks.asPromise();\n\n    onHeader(torrent2hash(abs2torrent(buffer)));\n\n    this.onChunks.subscribe(abs => {\n      const torrent = abs2torrent(buffer);\n\n      const key = torrent2hash(torrent);\n      const value = JSON.stringify(torrent);\n      const msg = torrent2hash(abs2torrent(abs));\n\n      kad.store(key, value, msg);\n      torrent.map(item => {\n        const ab = buffer[item.i];\n        kad.store(item.v, Buffer.from(ab));\n      });\n\n      buffer = abs;\n    });\n  }\n}\n"]}