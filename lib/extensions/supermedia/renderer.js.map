{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../../src/extensions/supermedia/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Kademlia } from \"../..\";\nimport { waitEvent, Media } from \"../media/media\";\nimport { Torrent, mimeType, interval } from \"./const\";\n\nexport default class SuperReceiveVideo extends Media {\n  torrents: Torrent[] = [];\n  sb?: SourceBuffer;\n\n  constructor(private kad: Kademlia) {\n    super();\n  }\n\n  async getVideo(headerKey: string, onMsReady: (ms: MediaSource) => void) {\n    const { kad } = this;\n\n    const ms = new MediaSource();\n    onMsReady(ms);\n\n    await waitEvent(ms, \"sourceopen\", undefined);\n    this.sb = ms.addSourceBuffer(mimeType);\n\n    const getTorrent = async () => {\n      const first = await kad.findValue(headerKey);\n      if (!first) return;\n\n      for (let item = first, bufMsg = headerKey, retry = 0; retry < 20; ) {\n        if (!item.msg) break;\n\n        if (item.msg !== bufMsg) {\n          const torrent: Torrent = JSON.parse(item.value as string);\n          this.torrents.push(torrent);\n          bufMsg = item.msg;\n        }\n\n        const next = await kad.findValue(item.msg);\n        console.log(item.msg, { next });\n\n        if (!next) {\n          console.log(\"fail next\", { retry });\n          retry++;\n          if (this.torrents.length === 0)\n            await new Promise(r => setTimeout(r, 100 * retry));\n          else await new Promise(r => setTimeout(r, 4_000));\n          continue;\n        } else {\n          item = next;\n          retry = 0;\n        }\n      }\n    };\n    getTorrent();\n    this.getChunks();\n  }\n\n  private async getChunks() {\n    const { kad, torrents } = this;\n\n    let start = false;\n\n    const caches: { [hash: string]: ArrayBuffer } = {};\n    const playList: Torrent[] = [];\n\n    const find = async () => {\n      findloop: while (true) {\n        if (this.chunks.length > (1000 / interval) * 10) {\n          if (!start) {\n            start = true;\n            this.update(this.sb!);\n          }\n        }\n\n        const torrent = torrents.shift();\n        if (!torrent) {\n          await new Promise(r => setTimeout(r, 10));\n          continue;\n        }\n        playList.push(torrent);\n\n        for (let item of torrent) {\n          const { v } = item;\n          let chunk = await kad.findValue(v);\n          if (!chunk) {\n            for (let retry = 0; retry < 20; retry++) {\n              chunk = await kad.findValue(v);\n              if (chunk) {\n                break;\n              } else {\n                console.log(\"fail chunk\", retry);\n                await new Promise(r => setTimeout(r, 100 * retry));\n              }\n            }\n          }\n          if (!chunk) {\n            console.error(\"broken\");\n            break findloop;\n          } else {\n            caches[v] = chunk.value as any;\n          }\n        }\n      }\n    };\n    find();\n\n    const seek = async () => {\n      for (let torrent: Torrent | undefined; ; ) {\n        await new Promise(r => setTimeout(r, 1000));\n\n        if (!torrent) torrent = playList.shift();\n        if (!torrent) continue;\n\n        const unexist = torrent.some(\n          item => !Object.keys(caches).includes(item.v)\n        );\n\n        if (unexist) {\n          continue;\n        } else {\n          torrent\n            .sort((a, b) => a.i - b.i)\n            .forEach(item => {\n              const chunk = caches[item.v];\n              this.chunks.push(chunk);\n            });\n\n          torrent = undefined;\n        }\n      }\n    };\n    seek();\n  }\n}\n"]}