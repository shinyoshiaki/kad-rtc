{"version":3,"file":"media.js","sourceRoot":"","sources":["../../../src/extensions/media/media.ts"],"names":[],"mappings":";;;AAAA,MAAa,KAAK;IAAlB;QACE,WAAM,GAAkB,EAAE,CAAC;QAC3B,SAAI,GAAY,IAAI,CAAC;IAsBvB,CAAC;IApBO,MAAM,CAAC,EAAgB;;YAC3B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;gBACjB,IAAI,EAAE,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC3C,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC3C;qBAAM;oBACL,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;oBAClC,IAAI;wBACF,IAAI,KAAK;4BAAE,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;wBAClC,MAAM,SAAS,CAAC,EAAE,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;qBAC7C;oBAAC,OAAO,KAAK,EAAE;wBACd,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;qBAChC;iBACF;aACF;QACH,CAAC;KAAA;IAED,SAAS;QACP,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;CACF;AAxBD,sBAwBC;AAED,SAAgB,SAAS,CACvB,MAA+C,EAC/C,KAAa,EACb,KAAU;IAEV,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACzC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACzC;QACD,SAAS,eAAe;YACtB,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC5C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aAC5C;QACH,CAAC;QACD,SAAS,QAAQ,CAAC,EAAO;YACvB,eAAe,EAAE,CAAC;YAClB,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,CAAC;QACD,SAAS,OAAO,CAAC,EAAO;YACtB,eAAe,EAAE,CAAC;YAClB,MAAM,CAAC,EAAE,CAAC,CAAC;QACb,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAzBD,8BAyBC;AAED,SAAsB,iBAAiB,CAAC,IAAU;;QAChD,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACzE,CAAC;CAAA;AAJD,8CAIC","sourcesContent":["export class Media {\n  chunks: ArrayBuffer[] = [];\n  stop: boolean = true;\n\n  async update(sb: SourceBuffer) {\n    this.stop = false;\n    while (!this.stop) {\n      if (sb.updating || this.chunks.length === 0) {\n        await new Promise(r => setTimeout(r, 10));\n      } else {\n        const chunk = this.chunks.shift();\n        try {\n          if (chunk) sb.appendBuffer(chunk);\n          await waitEvent(sb, \"updateend\", undefined);\n        } catch (error) {\n          console.warn(error, chunk, sb);\n        }\n      }\n    }\n  }\n\n  stopMedia() {\n    this.stop = false;\n  }\n}\n\nexport function waitEvent(\n  target: MediaSource | FileReader | SourceBuffer,\n  event: string,\n  error: any\n) {\n  return new Promise((resolve, reject) => {\n    target.addEventListener(event, _resolve);\n    if (typeof error === \"string\") {\n      target.addEventListener(error, _reject);\n    }\n    function _removeListener() {\n      target.removeEventListener(event, _resolve);\n      if (typeof error === \"string\") {\n        target.removeEventListener(error, _reject);\n      }\n    }\n    function _resolve(ev: any) {\n      _removeListener();\n      resolve(ev);\n    }\n    function _reject(ev: any) {\n      _removeListener();\n      reject(ev);\n    }\n  });\n}\n\nexport async function readAsArrayBuffer(blob: Blob) {\n  const reader = new FileReader();\n  reader.readAsArrayBuffer(blob);\n  return waitEvent(reader, \"loadend\", \"error\").then(() => reader.result);\n}\n"]}