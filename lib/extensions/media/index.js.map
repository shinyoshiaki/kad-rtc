{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/extensions/media/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Kademlia } from \"../..\";\nimport { waitEvent, readAsArrayBuffer, Media } from \"./media\";\nimport Event from \"rx.mini\";\nimport sha1 from \"sha1\";\n\nconst interval = 500;\n\nconst mimeType = `video/webm; codecs=\"opus,vp9\"`;\n\nexport class StreamVideo extends Media {\n  private async recordInterval(\n    stream: MediaStream,\n    eventChunk: Event<ArrayBuffer>,\n    onMsReady: (ms: MediaSource) => void\n  ) {\n    const mediaRecorder = new MediaRecorder(stream, {\n      mimeType,\n      videoBitsPerSecond: 128_000\n    });\n    const ms = new MediaSource();\n    onMsReady(ms);\n\n    await waitEvent(ms, \"sourceopen\", undefined);\n\n    const sb = ms.addSourceBuffer(mimeType);\n\n    mediaRecorder.ondataavailable = async ({ data: blob }) => {\n      const buf: undefined | ArrayBuffer = (await readAsArrayBuffer(\n        blob\n      )) as any;\n      if (buf) {\n        this.chunks.push(buf);\n        eventChunk.execute(Buffer.from(buf));\n      }\n    };\n\n    mediaRecorder.start(interval);\n\n    this.update(sb);\n\n    setTimeout(() => {\n      mediaRecorder.stop();\n    }, 60 * 1000 * 10);\n  }\n\n  async streamViaKad(\n    stream: MediaStream,\n    onHeader: (s: string) => void,\n    onMs: (ms: MediaSource) => void,\n    kad: Kademlia\n  ) {\n    const record = new Event<ArrayBuffer>();\n\n    this.recordInterval(stream, record as any, ms => {\n      onMs(ms);\n    });\n\n    let buffer: ArrayBuffer = await record.asPromise();\n\n    const hash = (ab: ArrayBuffer) => sha1(Buffer.from(ab)).toString();\n\n    const key = hash(buffer);\n    onHeader(key);\n\n    const chunks: ArrayBuffer[] = [];\n    record.subscribe(async ab => {\n      chunks.push(ab);\n    });\n\n    while (true) {\n      const ab = chunks.shift();\n      if (ab) {\n        if (ab.byteLength > 16000) {\n          console.warn(\"to large\", ab.byteLength);\n        }\n        const key = hash(buffer);\n        const data = buffer;\n        const msg = hash(ab);\n        kad.store(key, data, msg);\n        buffer = ab;\n      } else {\n        await new Promise(r => setTimeout(r, 0));\n      }\n    }\n  }\n}\n\nexport class ReceiveVideo extends Media {\n  async getVideo(\n    headerKey: string,\n    onMsReady: (ms: MediaSource) => void,\n    kad: Kademlia\n  ) {\n    const ms = new MediaSource();\n    onMsReady(ms);\n\n    await waitEvent(ms, \"sourceopen\", undefined);\n    const sb = ms.addSourceBuffer(mimeType);\n\n    const first = await kad.findValue(headerKey);\n    console.log({ first });\n    if (!first) return;\n\n    const work = async () => {\n      try {\n        for (\n          let item = first, buf = headerKey, start = false, retry = 0;\n          retry < 20;\n\n        ) {\n          if (this.chunks.length > (1000 / interval) * 10) {\n            if (!start) {\n              start = true;\n              this.update(sb);\n            }\n          }\n\n          if (!item.msg) {\n            console.warn(\"file format error\");\n            break;\n          }\n\n          if (item.msg !== buf) {\n            this.chunks.push((item.value as any).buffer);\n            buf = item.msg;\n          }\n\n          const next = await kad.findValue(item.msg);\n          console.log(item.msg, { next });\n          if (!next) {\n            console.log(\"fail next\", { retry });\n            retry++;\n            await new Promise(r => setTimeout(r, 100 * retry));\n            continue;\n          } else {\n            item = next;\n            if (retry > 0) retry--;\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (first) {\n      await work().catch(console.error);\n    }\n  }\n}\n"]}