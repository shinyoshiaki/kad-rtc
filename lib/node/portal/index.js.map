{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/node/portal/index.ts"],"names":[],"mappings":"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","sourcesContent":["import http from \"http\";\nimport socketio from \"socket.io\";\nimport sha1 from \"sha1\";\nimport client from \"socket.io-client\";\nimport Kademlia from \"../../kademlia\";\nimport { PeerModule } from \"../../kademlia/modules/peer/webrtc\";\nimport Peer from \"../../kademlia/modules/peer/base\";\nimport Event from \"../../utill/event\";\nimport { Option } from \"../../kademlia/ktable\";\nimport { KvsModule } from \"../../kademlia/modules/kvs/base\";\n\ntype Options = {\n  port: number;\n  target?: { url: string; port: number };\n  kadOption?: Partial<Option>;\n};\n\nconst Request = (clientKid: string) => {\n  return { rpc: \"Request\" as const, clientKid };\n};\n\ntype Request = ReturnType<typeof Request>;\n\nconst Offer = (sdp: string, serverKid: string) => {\n  return { rpc: \"Offer\" as const, sdp, serverKid };\n};\n\ntype Offer = ReturnType<typeof Offer>;\n\nconst Answer = (sdp: string, clientKid: string) => {\n  return { rpc: \"Answer\" as const, sdp, clientKid };\n};\n\ntype Answer = ReturnType<typeof Answer>;\n\ntype actions = Offer | Request | Answer;\n\n// server offer\n\nexport default class PortalNode {\n  kid = sha1(Math.random().toString()).toString();\n  kademlia = new Kademlia(\n    this.kid,\n    { peerCreate: PeerModule, kvs: KvsModule() },\n    this.opt.kadOption\n  );\n  peers: { [key: string]: Peer } = {};\n  onConnect = new Event();\n  io: SocketIO.Server | undefined;\n\n  constructor(private opt: Options) {\n    try {\n      const { target, port } = opt;\n      if (target) {\n        const socket = client.connect(\n          \"http://\" + target.url + \":\" + target.port\n        );\n        socket.on(\"connect\", () => {\n          socket.emit(\"rpc\", Request(this.kid));\n        });\n        socket.on(\"rpc\", (data: actions) => {\n          if (data.rpc === \"Offer\") {\n            this.peers[data.serverKid] = PeerModule(data.serverKid);\n            this.answer(socket, data);\n          }\n        });\n      }\n\n      const srv = new http.Server();\n      const io = (this.io = socketio(srv));\n      srv.listen(port);\n      io.on(\"connection\", socket => {\n        try {\n          socket.on(\"rpc\", (data: actions) => {\n            if (data.rpc === \"Request\") {\n              this.peers[data.clientKid] = PeerModule(data.clientKid);\n              this.offer(io.sockets.sockets[socket.id], data);\n            }\n            if (data.rpc === \"Answer\") {\n              const peer = this.peers[data.clientKid];\n              peer.setAnswer(data.sdp);\n            }\n          });\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private async offer(socket: SocketIO.Socket, data: Request) {\n    const peer = this.peers[data.clientKid];\n\n    const sdp = await peer.createOffer();\n    socket.emit(\"rpc\", Offer(sdp, this.kademlia.kid));\n    await peer.onConnect.asPromise();\n\n    await this.kademlia.add(peer);\n    this.onConnect.excute();\n  }\n\n  private async answer(socket: SocketIOClient.Socket, data: Offer) {\n    const peer = this.peers[data.serverKid];\n\n    const sdp = await peer.setOffer(data.sdp);\n    socket.emit(\"rpc\", Answer(sdp, this.kademlia.kid));\n    await peer.onConnect.asPromise();\n\n    await this.kademlia.add(peer);\n    this.onConnect.excute();\n  }\n\n  close() {\n    if (this.io) this.io.close();\n  }\n}\n"]}