{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/node/portal/index.ts"],"names":[],"mappings":"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","sourcesContent":["import http from \"http\";\nimport socketio from \"socket.io\";\nimport sha1 from \"sha1\";\nimport client from \"socket.io-client\";\nimport Kademlia from \"../../kademlia\";\nimport Peer, { PeerModule } from \"../../kademlia/modules/peer/webrtc\";\nimport Event from \"../../utill/event\";\n\ntype Option = {\n  port: number;\n  target?: { url: string; port: number };\n};\n\nconst Request = (clientKid: string) => {\n  return { rpc: \"Request\" as const, clientKid };\n};\n\ntype Request = ReturnType<typeof Request>;\n\nconst Offer = (sdp: string, serverKid: string) => {\n  return { rpc: \"Offer\" as const, sdp, serverKid };\n};\n\ntype Offer = ReturnType<typeof Offer>;\n\nconst Answer = (sdp: string, clientKid: string) => {\n  return { rpc: \"Answer\" as const, sdp, clientKid };\n};\n\ntype Answer = ReturnType<typeof Answer>;\n\ntype actions = Offer | Request | Answer;\n\n// server offer\n\nexport default class Portal {\n  kid = sha1(Math.random().toString()).toString();\n  kademlia = new Kademlia(this.kid, PeerModule);\n  peers: { [key: string]: Peer } = {};\n  onConnect = new Event();\n\n  constructor(private opt: Option) {\n    const { target, port } = opt;\n    if (target) {\n      const socket = client.connect(\"http://\" + target.url + \":\" + target.port);\n      socket.on(\"connect\", () => {\n        socket.emit(\"rpc\", Request(this.kid));\n      });\n      socket.on(\"rpc\", (data: actions) => {\n        if (data.rpc === \"Offer\") {\n          this.peers[data.serverKid] = PeerModule(data.serverKid);\n          this.answer(socket, data);\n        }\n      });\n    }\n\n    const srv = new http.Server();\n    const io = socketio(srv);\n    srv.listen(port);\n    io.on(\"connection\", socket => {\n      socket.on(\"rpc\", (data: actions) => {\n        if (data.rpc === \"Request\") {\n          this.peers[data.clientKid] = PeerModule(data.clientKid);\n          this.offer(io.sockets.sockets[socket.id], data);\n        }\n        if (data.rpc === \"Answer\") {\n          const peer = this.peers[data.clientKid];\n          peer.setAnswer(data.sdp);\n        }\n      });\n    });\n  }\n\n  async offer(socket: SocketIO.Socket, data: Request) {\n    const peer = this.peers[data.clientKid];\n\n    const sdp = await peer.createOffer();\n    socket.emit(\"rpc\", Offer(sdp, this.kademlia.kid));\n    await peer.onConnect.asPromise();\n\n    await this.kademlia.add(peer);\n    this.onConnect.excute();\n  }\n\n  async answer(socket: SocketIOClient.Socket, data: Offer) {\n    const peer = this.peers[data.serverKid];\n\n    const sdp = await peer.setOffer(data.sdp);\n    socket.emit(\"rpc\", Answer(sdp, this.kademlia.kid));\n    await peer.onConnect.asPromise();\n\n    await this.kademlia.add(peer);\n    this.onConnect.excute();\n  }\n}\n"]}