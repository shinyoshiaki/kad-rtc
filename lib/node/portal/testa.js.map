{"version":3,"file":"testa.js","sourceRoot":"","sources":["../../../src/node/portal/testa.ts"],"names":[],"mappings":";;;AAAA,iDAAuB;AAEvB,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CACF,KAAK,EACL,GAAS,EAAE;QACT,MAAM,CAAC,GAAG,IAAI,UAAM,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,IAAI,UAAM,CAAC;YACnB,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAE;SAC1C,CAAC,CAAC;QAEH,MAAM,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QAC9B,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;IAEF,IAAI,CACF,UAAU,EACV,GAAS,EAAE;QACT,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,IAAI,UAAM,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1C,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,IAAI,GAAG,IAAI,UAAM,CAAC;gBACtB,MAAM,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE;gBACjD,IAAI,EAAE,KAAK,GAAG,CAAC;aAChB,CAAC,CAAC;YACH,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEhC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import Portal from \".\";\n\ndescribe(\"portal\", () => {\n  test(\n    \"p2p\",\n    async () => {\n      const a = new Portal({ port: 10000 });\n      const b = new Portal({\n        port: 10001,\n        target: { port: 10000, url: \"localhost\" }\n      });\n\n      await b.onConnect.asPromise();\n      expect(a.kademlia.di.kTable.getPeer(b.kid)).not.toBe(undefined);\n    },\n    1000 * 6000\n  );\n\n  test(\n    \"findnode\",\n    async () => {\n      const nodes: Portal[] = [];\n      const first = new Portal({ port: 20000 });\n      nodes.push(first);\n\n      for (let i = 1; i < 6; i++) {\n        const node = new Portal({\n          target: { url: \"localhost\", port: 20000 + i - 1 },\n          port: 20000 + i\n        });\n        await node.onConnect.asPromise();\n        nodes.push(node);\n      }\n\n      const last = nodes.slice(-1)[0];\n\n      await new Promise(r => setTimeout(r, 5000));\n      expect(true).toBe(true);\n    },\n    1000 * 6000\n  );\n});\n"]}