{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../src/node/portal/test.ts"],"names":[],"mappings":";;;AAAA,iDAAuB;AACvB,qDAA8C;AAC9C,0DAA0B;AAE1B,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,GAAG,GAAG,CAAC,CAAC;AAEd,SAAe,cAAc,CAAC,WAAmB,EAAE,GAAW;;QAC5D,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,SAAS,GAAG,MAAM,eAAK,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,UAAM,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAC9C,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,SAAS,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,OAAO,GAAG,MAAM,eAAK,EAAE,CAAC;YAC9B,MAAM,IAAI,GAAG,IAAI,UAAM,CAAC;gBACtB,MAAM,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE;gBAClC,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,EAAE,WAAW,EAAE;aAC3B,CAAC,CAAC;YACH,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjB,IAAI,GAAG,OAAO,CAAC;SAChB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAED,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CACF,KAAK,EACL,GAAS,EAAE;QACT,MAAM,IAAI,GAAG,GAAG,EAAE,CAChB,IAAI,OAAO,CAA2B,OAAO,CAAC,EAAE;YAC9C,MAAM,CAAC,GAAG,IAAI,UAAM,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,IAAI,UAAM,CAAC;gBACnB,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAE;aAC1C,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,iBAAK,CAAC,CAAC,EAAE,GAAG,EAAE;gBAC9B,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE;gBACpB,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE;gBACpB,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACL,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,IAAI,EAAE,CAAC;QAC9B,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAChE,CAAC,CAAC,KAAK,EAAE,CAAC;QACV,CAAC,CAAC,KAAK,EAAE,CAAC;IACZ,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;IAEF,IAAI,CACF,UAAU,EACV,GAAS,EAAE;QACT,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAErD,MAAM,MAAM,GAAG,CAAO,IAAY,EAAE,EAAE;YACpC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEtB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,CAAC,GAAG,EAAE;gBACR,GAAG,CAAC;aACL;YACD,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAA,CAAC;QAEF,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC/B,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3C;QAED,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import Portal from \".\";\nimport { Count } from \"../../utill/testtools\";\nimport aport from \"aport\";\n\nconst kBucketSize = 4;\nconst num = 8;\n\nasync function testSetupNodes(kBucketSize: number, num: number) {\n  const nodes: Portal[] = [];\n  const firstport = await aport();\n  const first = new Portal({ port: firstport });\n  nodes.push(first);\n\n  for (let i = 1, port = firstport; i < num; i++) {\n    const newport = await aport();\n    const node = new Portal({\n      target: { url: \"localhost\", port },\n      port: newport,\n      kadOption: { kBucketSize }\n    });\n    await node.onConnect.asPromise();\n    nodes.push(node);\n    port = newport;\n  }\n  return nodes;\n}\n\ndescribe(\"portal\", () => {\n  test(\n    \"p2p\",\n    async () => {\n      const test = () =>\n        new Promise<{ a: Portal; b: Portal }>(resolve => {\n          const a = new Portal({ port: 50000 });\n          const b = new Portal({\n            port: 50001,\n            target: { port: 50000, url: \"localhost\" }\n          });\n          const count = new Count(2, () => {\n            resolve({ a, b });\n          });\n          a.onConnect.once(() => {\n            count.check();\n          });\n          b.onConnect.once(() => {\n            count.check();\n          });\n        });\n      const { a, b } = await test();\n      expect(a.kademlia.di.kTable.getPeer(b.kid)).not.toBe(undefined);\n      a.close();\n      b.close();\n    },\n    1000 * 6000\n  );\n\n  test(\n    \"findnode\",\n    async () => {\n      const nodes = await testSetupNodes(kBucketSize, num);\n\n      const search = async (word: string) => {\n        const node = nodes[0];\n\n        const res = await node.kademlia.findNode(word);\n        if (!res) {\n          res;\n        }\n        expect(res).not.toBe(undefined);\n      };\n\n      for (let node of nodes.slice(1)) {\n        await search(node.kademlia.di.kTable.kid);\n      }\n\n      nodes.forEach(node => {\n        node.close();\n      });\n    },\n    1000 * 6000\n  );\n});\n"]}