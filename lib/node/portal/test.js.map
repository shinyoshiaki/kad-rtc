{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../src/node/portal/test.ts"],"names":[],"mappings":";;;AAAA,iDAAuB;AACvB,qDAA8C;AAE9C,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CACF,KAAK,EACL,GAAS,EAAE;QACT,MAAM,IAAI,GAAG,GAAG,EAAE,CAChB,IAAI,OAAO,CAA2B,OAAO,CAAC,EAAE;YAC9C,MAAM,CAAC,GAAG,IAAI,UAAM,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,IAAI,UAAM,CAAC;gBACnB,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAE;aAC1C,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,iBAAK,CAAC,CAAC,EAAE,GAAG,EAAE;gBAC9B,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE;gBACpB,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE;gBACpB,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACL,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,IAAI,EAAE,CAAC;QAC9B,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;IAEF,QAAQ;IACR,gBAAgB;IAChB,kBAAkB;IAClB,kCAAkC;IAClC,iDAAiD;IACjD,yBAAyB;IAEzB,oCAAoC;IACpC,kCAAkC;IAClC,6DAA6D;IAC7D,0BAA0B;IAC1B,YAAY;IACZ,0CAA0C;IAC1C,0BAA0B;IAC1B,QAAQ;IAER,uCAAuC;IAEvC,mDAAmD;IACnD,+BAA+B;IAC/B,OAAO;IACP,gBAAgB;IAChB,KAAK;AACP,CAAC,CAAC,CAAC","sourcesContent":["import Portal from \".\";\nimport { Count } from \"../../utill/testtools\";\n\ndescribe(\"portal\", () => {\n  test(\n    \"p2p\",\n    async () => {\n      const test = () =>\n        new Promise<{ a: Portal; b: Portal }>(resolve => {\n          const a = new Portal({ port: 10000 });\n          const b = new Portal({\n            port: 10001,\n            target: { port: 10000, url: \"localhost\" }\n          });\n          const count = new Count(2, () => {\n            resolve({ a, b });\n          });\n          a.onConnect.once(() => {\n            count.check();\n          });\n          b.onConnect.once(() => {\n            count.check();\n          });\n        });\n      const { a, b } = await test();\n      expect(a.kademlia.di.kTable.getPeer(b.kid)).not.toBe(undefined);\n    },\n    1000 * 6000\n  );\n\n  // test(\n  //   \"findnode\",\n  //   async () => {\n  //     const nodes: Portal[] = [];\n  //     const first = new Portal({ port: 20000 });\n  //     nodes.push(first);\n\n  //     for (let i = 1; i < 6; i++) {\n  //       const node = new Portal({\n  //         target: { url: \"localhost\", port: 20000 + i - 1 },\n  //         port: 20000 + i\n  //       });\n  //       await node.onConnect.asPromise();\n  //       nodes.push(node);\n  //     }\n\n  //     const last = nodes.slice(-1)[0];\n\n  //     await new Promise(r => setTimeout(r, 5000));\n  //     expect(true).toBe(true);\n  //   },\n  //   1000 * 6000\n  // );\n});\n"]}