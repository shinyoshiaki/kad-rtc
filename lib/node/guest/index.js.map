{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/node/guest/index.ts"],"names":[],"mappings":";;;AAAA,wDAAwB;AACxB,gFAAsC;AACtC,sEAAsC;AACtC,+DAAgE;AAEhE,sEAAsC;AAEtC,0DAA4D;AAO5D,MAAM,OAAO,GAAG,CAAC,SAAiB,EAAE,EAAE;IACpC,OAAO,EAAE,GAAG,EAAE,SAAkB,EAAE,SAAS,EAAE,CAAC;AAChD,CAAC,CAAC;AAIF,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,SAAiB,EAAE,EAAE;IAC/C,OAAO,EAAE,GAAG,EAAE,OAAgB,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;AACnD,CAAC,CAAC;AAIF,MAAM,MAAM,GAAG,CAAC,GAAW,EAAE,SAAiB,EAAE,EAAE;IAChD,OAAO,EAAE,GAAG,EAAE,QAAiB,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;AACpD,CAAC,CAAC;AAMF,eAAe;AAEf,MAAqB,SAAS;IAU5B,YAAoB,GAAY;QAAZ,QAAG,GAAH,GAAG,CAAS;QAThC,QAAG,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;QAChD,aAAQ,GAAG,IAAI,kBAAQ,CACrB,IAAI,CAAC,GAAG,EACR,EAAE,UAAU,EAAE,mBAAU,EAAE,GAAG,EAAE,gBAAS,EAAE,EAAE,EAC5C,IAAI,CAAC,GAAG,CAAC,SAAS,CACnB,CAAC;QACF,UAAK,GAA4B,EAAE,CAAC;QACpC,cAAS,GAAG,IAAI,eAAK,EAAE,CAAC;QAGtB,IAAI;YACF,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;YACvB,MAAM,MAAM,GAAG,0BAAM,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAC1E,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAa,EAAE,EAAE;gBACjC,IAAI,IAAI,CAAC,GAAG,KAAK,OAAO,EAAE;oBACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,mBAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBACxD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBAC3B;YACH,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtB;IACH,CAAC;IAEa,MAAM,CAAC,MAA6B,EAAE,IAAW;;YAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAExC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YAEjC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QAC1B,CAAC;KAAA;CACF;AAtCD,4BAsCC","sourcesContent":["import sha1 from \"sha1\";\nimport client from \"socket.io-client\";\nimport Kademlia from \"../../kademlia\";\nimport { PeerModule } from \"../../kademlia/modules/peer/webrtc\";\nimport Peer from \"../../kademlia/modules/peer/base\";\nimport Event from \"../../utill/event\";\nimport { Option } from \"../../kademlia/ktable\";\nimport { KvsModule } from \"../../kademlia/modules/kvs/base\";\n\ntype Options = {\n  target: { url: string; port: number };\n  kadOption?: Partial<Option>;\n};\n\nconst Request = (clientKid: string) => {\n  return { rpc: \"Request\" as const, clientKid };\n};\n\ntype Request = ReturnType<typeof Request>;\n\nconst Offer = (sdp: string, serverKid: string) => {\n  return { rpc: \"Offer\" as const, sdp, serverKid };\n};\n\ntype Offer = ReturnType<typeof Offer>;\n\nconst Answer = (sdp: string, clientKid: string) => {\n  return { rpc: \"Answer\" as const, sdp, clientKid };\n};\n\ntype Answer = ReturnType<typeof Answer>;\n\ntype actions = Offer | Request | Answer;\n\n// server offer\n\nexport default class GuestNode {\n  kid = sha1(Math.random().toString()).toString();\n  kademlia = new Kademlia(\n    this.kid,\n    { peerCreate: PeerModule, kvs: KvsModule() },\n    this.opt.kadOption\n  );\n  peers: { [key: string]: Peer } = {};\n  onConnect = new Event();\n\n  constructor(private opt: Options) {\n    try {\n      const { target } = opt;\n      const socket = client.connect(\"http://\" + target.url + \":\" + target.port);\n      socket.on(\"connect\", () => {\n        socket.emit(\"rpc\", Request(this.kid));\n      });\n      socket.on(\"rpc\", (data: actions) => {\n        if (data.rpc === \"Offer\") {\n          this.peers[data.serverKid] = PeerModule(data.serverKid);\n          this.answer(socket, data);\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private async answer(socket: SocketIOClient.Socket, data: Offer) {\n    const peer = this.peers[data.serverKid];\n\n    const sdp = await peer.setOffer(data.sdp);\n    socket.emit(\"rpc\", Answer(sdp, this.kademlia.kid));\n    await peer.onConnect.asPromise();\n\n    await this.kademlia.add(peer);\n    this.onConnect.excute();\n  }\n}\n"]}