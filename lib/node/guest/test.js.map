{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../src/node/guest/test.ts"],"names":[],"mappings":";;;AAAA,iDAA0B;AAC1B,0DAA0B;AAC1B,+DAAmC;AAEnC,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,GAAG,GAAG,CAAC,CAAC;AAEd,SAAe,cAAc,CAAC,WAAmB,EAAE,GAAW;;QAC5D,MAAM,UAAU,GAAG,MAAM,eAAK,EAAE,CAAC;QACjC,MAAM,KAAK,GAA+B,EAAE,CAAC;QAE7C,KAAK,CAAC,IAAI,CAAC,IAAI,gBAAU,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;QAE7E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAG,IAAI,UAAS,CAAC;gBACzB,MAAM,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE;gBAC9C,SAAS,EAAE,EAAE,WAAW,EAAE;aAC3B,CAAC,CAAC;YACH,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAED,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CACF,UAAU,EACV,GAAS,EAAE;QACT,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAErD,MAAM,MAAM,GAAG,CAAO,IAAY,EAAE,EAAE;YACpC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEtB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,CAAC,GAAG,EAAE;gBACR,GAAG,CAAC;aACL;YACD,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAA,CAAC;QAEF,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC/B,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3C;QAEA,KAAK,CAAC,CAAC,CAAgB,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import GuestNode from \".\";\nimport aport from \"aport\";\nimport PortalNode from \"../portal\";\n\nconst kBucketSize = 4;\nconst num = 8;\n\nasync function testSetupNodes(kBucketSize: number, num: number) {\n  const portalPort = await aport();\n  const nodes: (GuestNode | PortalNode)[] = [];\n\n  nodes.push(new PortalNode({ port: portalPort, kadOption: { kBucketSize } }));\n\n  for (let i = 0; i < num; i++) {\n    const node = new GuestNode({\n      target: { url: \"localhost\", port: portalPort },\n      kadOption: { kBucketSize }\n    });\n    await node.onConnect.asPromise();\n    nodes.push(node);\n  }\n  return nodes;\n}\n\ndescribe(\"portal\", () => {\n  test(\n    \"findnode\",\n    async () => {\n      const nodes = await testSetupNodes(kBucketSize, num);\n\n      const search = async (word: string) => {\n        const node = nodes[0];\n\n        const res = await node.kademlia.findNode(word);\n        if (!res) {\n          res;\n        }\n        expect(res).not.toBe(undefined);\n      };\n\n      for (let node of nodes.slice(1)) {\n        await search(node.kademlia.di.kTable.kid);\n      }\n\n      (nodes[0] as PortalNode).close();\n    },\n    1000 * 6000\n  );\n});\n"]}