{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/webrtc/services/arraybuffer/index.ts"],"names":[],"mappings":";;AACA,yDAA6E;AAE7E,MAAqB,kBAAkB;IAAvC;QACE,UAAK,GAAG,WAAW,CAAC;QACZ,WAAM,GAAG,aAAa,CAAC;QAEvB,WAAM,GAAkB,EAAE,CAAC;IA8BrC,CAAC;IA5BC,MAAM,CAAC,IAAY;QACjB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YAC1B,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;gBAC5B,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;gBACtB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;oBAC5B,MAAM,EAAE,GAAG,8BAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAClB,KAAK,EAAE,GAAG,CAAC,IAAI;wBACf,IAAI,EAAE,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,MAAM;qBACpB,CAAC,CAAC;oBACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;iBAClB;qBAAM;oBACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,EAAe,EAAE,MAAc,EAAE,GAAmB;QACvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,8BAAgB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC3C,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;YACxB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjB;QACD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;CACF;AAlCD,qCAkCC","sourcesContent":["import WebRTC from \"../../core\";\nimport { mergeArraybuffer, sliceArraybuffer } from \"../../utill/arraybuffer\";\n\nexport default class ArrayBufferService {\n  label = \"w4me_file\";\n  private origin = \"datachannel\";\n\n  private memory: ArrayBuffer[] = [];\n\n  listen(peer: WebRTC) {\n    peer.onData.subscribe(msg => {\n      if (msg.label === this.label) {\n        const data = msg.data;\n        if (typeof data === \"string\") {\n          const ab = mergeArraybuffer(this.memory);\n          peer.onData.execute({\n            label: msg.data,\n            data: ab,\n            nodeId: peer.nodeId\n          });\n          this.memory = [];\n        } else {\n          this.memory.push(data);\n        }\n      }\n    });\n  }\n\n  send(ab: ArrayBuffer, origin: string, rtc: RTCDataChannel) {\n    this.origin = origin;\n    console.log(this.origin, origin);\n    const chunks = sliceArraybuffer(ab, 16000);\n    for (let chunk of chunks) {\n      rtc.send(chunk);\n    }\n    rtc.send(origin);\n  }\n}\n"]}