{"version":3,"file":"event.js","sourceRoot":"","sources":["../../../src/webrtc/utill/event.ts"],"names":[],"mappings":";;AAOA;IAGE;QAAA,iBAEC;QAgCD,cAAS,GAAG,UAAC,SAAkB;YAC7B,OAAA,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;gBAC7B,IAAM,OAAO,GACX,SAAS;oBACT,UAAU,CAAC;wBACT,MAAM,EAAE,CAAC;oBACX,CAAC,EAAE,SAAS,CAAC,CAAC;gBAChB,KAAI,CAAC,IAAI,CAAC,UAAA,IAAI;oBACZ,IAAI,OAAO;wBAAE,YAAY,CAAC,OAAO,CAAC,CAAC;oBACnC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;QAVF,CAUE,CAAC;QA5CH,IAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACvC,CAAC;IAED,sBAAM,GAAN,UAAO,IAAQ;QACb,KAAiB,UAAgB,EAAhB,KAAA,IAAI,CAAC,KAAK,CAAC,KAAK,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;YAA9B,IAAI,IAAI,SAAA;YACX,IAAI,IAAI;gBAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;gBACrB,IAAI,CAAC,IAAI,CAAC,SAAgB,CAAC,CAAC;SAClC;IACH,CAAC;IAED,yBAAS,GAAT,UAAU,IAAkB;QAA5B,iBAUC;QATC,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,EAAE,IAAA,EAAE,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAM,WAAW,GAAG;YAClB,KAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CACxC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI,EAAtB,CAAsB,CAC/B,CAAC;QACJ,CAAC,CAAC;QACF,OAAO,EAAE,WAAW,aAAA,EAAE,CAAC;IACzB,CAAC;IAED,8BAAc,GAAd;QACE,IAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACvC,CAAC;IAED,oBAAI,GAAJ,UAAK,IAAkB;QACrB,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,UAAA,IAAI;YAC7B,GAAG,CAAC,WAAW,EAAE,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;IAcH,YAAC;AAAD,CAAC,AAjDD,IAiDC","sourcesContent":["type EventFunc<T> = (data: T) => void;\n\ninterface IEvent<T> {\n  stack: { func: EventFunc<T>; id: number }[];\n  index: number;\n}\n\nexport default class Event<T> {\n  private event: IEvent<T>;\n\n  constructor() {\n    this.event = { stack: [], index: 0 };\n  }\n\n  excute(data?: T) {\n    for (let item of this.event.stack) {\n      if (data) item.func(data);\n      else item.func(undefined as any);\n    }\n  }\n\n  subscribe(func: EventFunc<T>) {\n    const id = this.event.index;\n    this.event.stack.push({ func, id });\n    this.event.index++;\n    const unSubscribe = () => {\n      this.event.stack = this.event.stack.filter(\n        item => item.id !== id && item\n      );\n    };\n    return { unSubscribe };\n  }\n\n  allUnsubscribe() {\n    this.event = { stack: [], index: 0 };\n  }\n\n  once(func: EventFunc<T>) {\n    const off = this.subscribe(data => {\n      off.unSubscribe();\n      func(data);\n    });\n  }\n\n  asPromise = (timelimit?: number) =>\n    new Promise<T>((resolve, reject) => {\n      const timeout =\n        timelimit &&\n        setTimeout(() => {\n          reject();\n        }, timelimit);\n      this.once(data => {\n        if (timeout) clearTimeout(timeout);\n        resolve(data);\n      });\n    });\n}\n"]}