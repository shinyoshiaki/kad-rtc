{"version":3,"file":"event.js","sourceRoot":"","sources":["../../../src/webrtc/utill/event.ts"],"names":[],"mappings":";;AAOA,MAAqB,KAAK;IAGxB;QAiCA,cAAS,GAAG,CAAC,SAAkB,EAAE,EAAE,CACjC,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACjC,MAAM,OAAO,GACX,SAAS;gBACT,UAAU,CAAC,GAAG,EAAE;oBACd,MAAM,CAAC,yBAAyB,CAAC,CAAC;gBACpC,CAAC,EAAE,SAAS,CAAC,CAAC;YAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACf,IAAI,OAAO;oBAAE,YAAY,CAAC,OAAO,CAAC,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QA3CH,IAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,CAAC;SACT,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,IAAQ;QACd,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACjC,IAAI,IAAI;gBAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;gBACrB,IAAI,CAAC,IAAI,CAAC,SAAgB,CAAC,CAAC;SAClC;IACH,CAAC;IAED,SAAS,CAAC,IAAkB;QAC1B,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,MAAM,WAAW,GAAG,GAAG,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CACxC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC,CAAC;QACF,OAAO,EAAE,WAAW,EAAE,CAAC;IACzB,CAAC;IAED,IAAI,CAAC,IAAkB;QACrB,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAChC,GAAG,CAAC,WAAW,EAAE,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;CAcF;AAhDD,wBAgDC","sourcesContent":["type EventFunc<T> = (data: T) => void;\n\ninterface IEvent<T> {\n  stack: { func: EventFunc<T>; id: number }[];\n  index: number;\n}\n\nexport default class Event<T> {\n  private event: IEvent<T>;\n\n  constructor() {\n    this.event = {\n      stack: [],\n      index: 0\n    };\n  }\n\n  execute(data?: T) {\n    for (let item of this.event.stack) {\n      if (data) item.func(data);\n      else item.func(undefined as any);\n    }\n  }\n\n  subscribe(func: EventFunc<T>) {\n    const id = this.event.index;\n    this.event.stack.push({ func, id });\n    this.event.index++;\n    const unSubscribe = () => {\n      this.event.stack = this.event.stack.filter(\n        item => item.id !== id && item\n      );\n    };\n    return { unSubscribe };\n  }\n\n  once(func: EventFunc<T>) {\n    const off = this.subscribe(data => {\n      off.unSubscribe();\n      func(data);\n    });\n  }\n\n  asPromise = (timelimit?: number) =>\n    new Promise<T>((resolve, reject) => {\n      const timeout =\n        timelimit &&\n        setTimeout(() => {\n          reject(\"Event asPromise timeout\");\n        }, timelimit);\n      this.once(data => {\n        if (timeout) clearTimeout(timeout);\n        resolve(data);\n      });\n    });\n}\n"]}