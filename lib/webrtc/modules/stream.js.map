{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../../src/webrtc/modules/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import WebRTC from \"../core\";\nimport { getLocalAudio, getLocalDesktop, getLocalVideo } from \"../utill/media\";\nimport Event from \"../utill/event\";\n\ntype Get =\n  | ReturnType<typeof getLocalAudio>\n  | ReturnType<typeof getLocalDesktop>\n  | ReturnType<typeof getLocalVideo>\n  | undefined;\n\nexport enum MediaType {\n  video,\n  audio\n}\n\ninterface Option {\n  immidiate: boolean;\n  get: Get;\n  stream: MediaStream;\n  track: MediaStreamTrack;\n  label: string;\n}\n\nexport default class Stream {\n  onStream = new Event<MediaStream>();\n  onLocalStream = new Event<MediaStream>();\n\n  label: string;\n  initDone = false;\n\n  constructor(private peer: WebRTC, private opt: Partial<Option> = {}) {\n    this.label = opt.label || \"stream\";\n    this.listen();\n  }\n\n  private async listen() {\n    const label = \"init_\" + this.label;\n\n    const { get, stream, immidiate, track } = this.opt;\n    let localStream = stream;\n\n    if (immidiate) {\n      this.init({ stream: localStream, track });\n    } else {\n      if (get) {\n        localStream = (await get.catch(console.log)) as MediaStream;\n        this.onLocalStream.excute(localStream);\n      }\n\n      this.peer.onData.once(raw => {\n        if (raw.label === label && raw.data === \"done\") {\n          if (!get) {\n            this.init({ stream: localStream, track });\n          }\n        }\n      });\n\n      this.peer.send(\"done\", label);\n    }\n  }\n\n  private async init(media: {\n    stream?: MediaStream;\n    track?: MediaStreamTrack;\n  }) {\n    const { stream, track } = media;\n\n    if (this.initDone) return;\n    this.initDone = true;\n\n    const peer = this.peer;\n    const newPeer = new WebRTC({ stream, track });\n    if (peer.isOffer) {\n      newPeer.makeOffer();\n      newPeer.onSignal.once(sdp => {\n        peer.send(JSON.stringify(sdp), this.label + \"_offer\");\n      });\n      peer.onData.once(raw => {\n        if (raw.label === this.label + \"_answer\") {\n          newPeer.setSdp(JSON.parse(raw.data));\n        }\n      });\n    } else {\n      peer.onData.once(raw => {\n        if (raw.label === this.label + \"_offer\") {\n          newPeer.setSdp(JSON.parse(raw.data));\n          newPeer.onSignal.once(sdp => {\n            peer.send(JSON.stringify(sdp), this.label + \"_answer\");\n          });\n        }\n      });\n    }\n    newPeer.onAddTrack.once(stream => {\n      this.onStream.excute(stream);\n    });\n  }\n}\n"]}