{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../../src/webrtc/modules/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import WebRTC from \"../core\";\nimport { getLocalAudio, getLocalDesktop, getLocalVideo } from \"../utill/media\";\nimport Event from \"../utill/event\";\n\ntype Get =\n  | ReturnType<typeof getLocalAudio>\n  | ReturnType<typeof getLocalDesktop>\n  | ReturnType<typeof getLocalVideo>\n  | undefined;\n\nexport enum MediaType {\n  video,\n  audio\n}\n\ninterface Option {\n  immidiate: boolean;\n  get: Get;\n  stream: MediaStream;\n  track: MediaStreamTrack;\n  label: string;\n}\n\nexport default class Stream {\n  onStream = new Event<MediaStream>();\n  onLocalStream = new Event<MediaStream>();\n\n  label: string;\n  initDone = false;\n\n  constructor(private peer: WebRTC, private opt: Partial<Option> = {}) {\n    this.label = opt.label || \"stream\";\n    this.listen();\n  }\n\n  private async listen() {\n    const label = \"init_\" + this.label;\n\n    const { get, stream, immidiate, track } = this.opt;\n    let localStream = stream;\n\n    if (immidiate) {\n      this.init({ stream: localStream, track });\n    } else {\n      if (get) {\n        localStream = (await get.catch(console.log)) as MediaStream;\n        this.onLocalStream.excute(localStream);\n      }\n\n      this.peer.onData.once(raw => {\n        if (raw.label === label && raw.data === \"done\") {\n          if (!get) {\n            this.init({ stream: localStream, track });\n          }\n        }\n      });\n\n      this.peer.send(\"done\", label);\n    }\n  }\n\n  private async init(media: {\n    stream?: MediaStream;\n    track?: MediaStreamTrack;\n  }) {\n    const { stream, track } = media;\n\n    if (this.initDone) return;\n    this.initDone = true;\n\n    const peer = this.peer;\n    const newPeer = new WebRTC({ stream, track });\n    if (peer.isOffer) {\n      newPeer.makeOffer();\n      newPeer.onSignal.once(sdp => {\n        peer.send(JSON.stringify(sdp), this.label + \"_offer\");\n      });\n      peer.onData.once(raw => {\n        if (raw.label === this.label + \"_answer\") {\n          newPeer.setSdp(JSON.parse(raw.data));\n        }\n      });\n    } else {\n      peer.onData.once(raw => {\n        if (raw.label === this.label + \"_offer\") {\n          newPeer.setSdp(JSON.parse(raw.data));\n          newPeer.onSignal.once(sdp => {\n            peer.send(JSON.stringify(sdp), this.label + \"_answer\");\n          });\n        }\n      });\n    }\n    newPeer.onAddTrack.once(stream => {\n      this.onStream.excute(stream);\n    });\n  }\n}\n"]}