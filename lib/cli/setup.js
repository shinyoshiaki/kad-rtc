"use strict";

var _portalNode = _interopRequireDefault(require("../node/portalNode"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _sha = _interopRequireDefault(require("sha1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var quesMyPort = {
  type: "input",
  name: "myPort",
  message: "my port"
};
var quesAddress = {
  type: "input",
  name: "address",
  message: "ip address"
};
var quesPort = {
  type: "input",
  name: "port",
  message: "port"
};

_inquirer.default.prompt([quesMyPort, quesAddress, quesPort]).then(function (answer) {
  console.log("test:".concat(answer.myPort, ":").concat(answer.address, ":").concat(answer.port));
  var node = new _portalNode.default(answer.myPort, {
    address: answer.address,
    port: answer.port
  });
  var responce = {};

  var reader = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });

  reader.on("line", function (data) {
    return line(data);
  });

  function line(data) {
    var rpc = data.toString().split(" ")[0];
    var req = data.toString().split(" ")[1];

    if (Object.keys(responce).includes(rpc)) {
      responce[rpc](req);
    }
  }

  responce.peerlist = function () {
    console.log(node.kad.nodeId, "\n", node.kad.f.getAllPeerIds());
  };

  responce.store = function (data) {
    node.kad.store(node.kad.nodeId, (0, _sha.default)(data).toString(), data);
  };

  responce.findvalue = function (key) {
    node.kad.findValue(key, function (value) {
      console.log("on findvalue", value);
    });
  };

  responce.keyValueList = function () {
    console.log(node.kad.keyValueList);
  };

  responce.id = function () {
    console.log(node.kad.nodeId);
  };

  responce.help = function () {
    console.log({
      responce: responce
    });
  };

  console.log({
    responce: responce
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvc2V0dXAudHMiXSwibmFtZXMiOlsicXVlc015UG9ydCIsInR5cGUiLCJuYW1lIiwibWVzc2FnZSIsInF1ZXNBZGRyZXNzIiwicXVlc1BvcnQiLCJpbnF1aXJlIiwicHJvbXB0IiwidGhlbiIsImFuc3dlciIsImNvbnNvbGUiLCJsb2ciLCJteVBvcnQiLCJhZGRyZXNzIiwicG9ydCIsIm5vZGUiLCJQb3J0YWxOb2RlIiwicmVzcG9uY2UiLCJyZWFkZXIiLCJyZXF1aXJlIiwiY3JlYXRlSW50ZXJmYWNlIiwiaW5wdXQiLCJwcm9jZXNzIiwic3RkaW4iLCJvdXRwdXQiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJsaW5lIiwicnBjIiwidG9TdHJpbmciLCJzcGxpdCIsInJlcSIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsInBlZXJsaXN0Iiwia2FkIiwibm9kZUlkIiwiZiIsImdldEFsbFBlZXJJZHMiLCJzdG9yZSIsImZpbmR2YWx1ZSIsImtleSIsImZpbmRWYWx1ZSIsInZhbHVlIiwia2V5VmFsdWVMaXN0IiwiaWQiLCJoZWxwIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxJQUFJLEVBQUUsT0FEVztBQUVqQkMsRUFBQUEsSUFBSSxFQUFFLFFBRlc7QUFHakJDLEVBQUFBLE9BQU8sRUFBRTtBQUhRLENBQW5CO0FBS0EsSUFBTUMsV0FBVyxHQUFHO0FBQ2xCSCxFQUFBQSxJQUFJLEVBQUUsT0FEWTtBQUVsQkMsRUFBQUEsSUFBSSxFQUFFLFNBRlk7QUFHbEJDLEVBQUFBLE9BQU8sRUFBRTtBQUhTLENBQXBCO0FBS0EsSUFBTUUsUUFBUSxHQUFHO0FBQ2ZKLEVBQUFBLElBQUksRUFBRSxPQURTO0FBRWZDLEVBQUFBLElBQUksRUFBRSxNQUZTO0FBR2ZDLEVBQUFBLE9BQU8sRUFBRTtBQUhNLENBQWpCOztBQUtBRyxrQkFBUUMsTUFBUixDQUFlLENBQUNQ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LE9BQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUVNLE1BQUFBLFFBQVEsRUFBUkE7QUFBRixLQUFaO0FBQ0QsR0FGRDs7QUFJQVAsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVk7QUFBRU0sSUFBQUEsUUFBUSxFQUFSQTtBQUFGLEdBQVo7QUFDRCxDQW5ERCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb3J0YWxOb2RlIGZyb20gXCIuLi9ub2RlL3BvcnRhbE5vZGVcIjtcbmltcG9ydCBpbnF1aXJlIGZyb20gXCJpbnF1aXJlclwiO1xuaW1wb3J0IHNoYTEgZnJvbSBcInNoYTFcIjtcblxuY29uc3QgcXVlc015UG9ydCA9IHtcbiAgdHlwZTogXCJpbnB1dFwiLFxuICBuYW1lOiBcIm15UG9ydFwiLFxuICBtZXNzYWdlOiBcIm15IHBvcnRcIlxufTtcbmNvbnN0IHF1ZXNBZGRyZXNzID0ge1xuICB0eXBlOiBcImlucHV0XCIsXG4gIG5hbWU6IFwiYWRkcmVzc1wiLFxuICBtZXNzYWdlOiBcImlwIGFkZHJlc3NcIlxufTtcbmNvbnN0IHF1ZXNQb3J0ID0ge1xuICB0eXBlOiBcImlucHV0XCIsXG4gIG5hbWU6IFwicG9ydFwiLFxuICBtZXNzYWdlOiBcInBvcnRcIlxufTtcbmlucXVpcmUucHJvbXB0KFtxdWVzTXlQb3J0LCBxdWVzQWRkcmVzcywgcXVlc1BvcnRdKS50aGVuKChhbnN3ZXI6IGFueSkgPT4ge1xuICBjb25zb2xlLmxvZyhgdGVzdDoke2Fuc3dlci5teVBvcnR9OiR7YW5zd2VyLmFkZHJlc3N9OiR7YW5zd2VyLnBvcnR9YCk7XG4gIGNvbnN0IG5vZGUgPSBuZXcgUG9ydGFsTm9kZShhbnN3ZXIubXlQb3J0LCB7XG4gICAgYWRkcmVzczogYW5zd2VyLmFkZHJlc3MsXG4gICAgcG9ydDogYW5zd2VyLnBvcnRcbiAgfSk7XG5cbiAgY29uc3QgcmVzcG9uY2U6IGFueSA9IHt9O1xuICBjb25zdCByZWFkZXIgPSByZXF1aXJlKFwicmVhZGxpbmVcIikuY3JlYXRlSW50ZXJmYWNlKHtcbiAgICBpbnB1dDogcHJvY2Vzcy5zdGRpbixcbiAgICBvdXRwdXQ6IHByb2Nlc3Muc3Rkb3V0XG4gIH0pO1xuXG4gIHJlYWRlci5vbihcImxpbmVcIiwgKGRhdGE6IGFueSkgPT4gbGluZShkYXRhKSk7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhOiBhbnkpIHtcbiAgICBjb25zdCBycGMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoXCIgXCIpWzBdO1xuICAgIGNvbnN0IHJlcSA9IGRhdGEudG9TdHJpbmcoKS5zcGxpdChcIiBcIilbMV07XG5cbiAgICBpZiAoT2JqZWN0LmtleXMocmVzcG9uY2UpLmluY2x1ZGVzKHJwYykpIHtcbiAgICAgIHJlc3BvbmNlW3JwY10ocmVxKTtcbiAgICB9XG4gIH1cblxuICByZXNwb25jZS5wZWVybGlzdCA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhub2RlLmthZC5ub2RlSWQsIFwiXFxuXCIsIG5vZGUua2FkLmYuZ2V0QWxsUGVlcklkcygpKTtcbiAgfTtcblxuICByZXNwb25jZS5zdG9yZSA9IChkYXRhOiBhbnkpID0+IHtcbiAgICBub2RlLmthZC5zdG9yZShub2RlLmthZC5ub2RlSWQsIHNoYTEoZGF0YSkudG9TdHJpbmcoKSwgZGF0YSk7XG4gIH07XG5cbiAgcmVzcG9uY2UuZmluZHZhbHVlID0gKGtleTogc3RyaW5nKSA9PiB7XG4gICAgbm9kZS5rYWQuZmluZFZhbHVlKGtleSwgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwib24gZmluZHZhbHVlXCIsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXNwb25jZS5rZXlWYWx1ZUxpc3QgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2cobm9kZS5rYWQua2V5VmFsdWVMaXN0KTtcbiAgfTtcblxuICByZXNwb25jZS5pZCA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhub2RlLmthZC5ub2RlSWQpO1xuICB9O1xuXG4gIHJlc3BvbmNlLmhlbHAgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coeyByZXNwb25jZSB9KTtcbiAgfTtcblxuICBjb25zb2xlLmxvZyh7IHJlc3BvbmNlIH0pO1xufSk7XG4iXX0=