"use strict";

var _portalNode = _interopRequireDefault(require("../node/portalNode"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _sha = _interopRequireDefault(require("sha1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var quesMyPort = {
  type: "input",
  name: "myPort",
  message: "my port"
};
var quesAddress = {
  type: "input",
  name: "address",
  message: "ip address"
};
var quesPort = {
  type: "input",
  name: "port",
  message: "port"
};

_inquirer.default.prompt([quesMyPort, quesAddress, quesPort]).then(function (answer) {
  console.log("test:".concat(answer.myPort, ":").concat(answer.address, ":").concat(answer.port));
  var node = new _portalNode.default(answer.myPort, {
    address: answer.address,
    port: answer.port
  });
  var responce = {};

  var reader = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });

  reader.on("line", function (data) {
    return line(data);
  });

  function line(data) {
    var rpc = data.toString().split(" ")[0];
    var req = data.toString().split(" ")[1];

    if (Object.keys(responce).includes(rpc)) {
      responce[rpc](req);
    }
  }

  responce.peerlist = function () {
    console.log(node.kad.nodeId, "\n", node.kad.f.getAllPeerIds());
  };

  responce.store = function (data) {
    node.kad.store(node.kad.nodeId, (0, _sha.default)(data).toString(), data);
  };

  responce.findvalue = function (key) {
    node.kad.findValue(key, function (value) {
      console.log("on findvalue", value);
    });
  };

  responce.keyValueList = function () {
    console.log(node.kad.keyValueList);
  };

  console.log({
    responce: responce
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvc2V0dXAudHMiXSwibmFtZXMiOlsicXVlc015UG9ydCIsInR5cGUiLCJuYW1lIiwibWVzc2FnZSIsInF1ZXNBZGRyZXNzIiwicXVlc1BvcnQiLCJpbnF1aXJlIiwicHJvbXB0IiwidGhlbiIsImFuc3dlciIsImNvbnNvbGUiLCJsb2ciLCJteVBvcnQiLCJhZGRyZXNzIiwicG9ydCIsIm5vZGUiLCJQb3J0YWxOb2RlIiwicmVzcG9uY2UiLCJyZWFkZXIiLCJyZXF1aXJlIiwiY3JlYXRlSW50ZXJmYWNlIiwiaW5wdXQiLCJwcm9jZXNzIiwic3RkaW4iLCJvdXRwdXQiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJsaW5lIiwicnBjIiwidG9TdHJpbmciLCJzcGxpdCIsInJlcSIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsInBlZXJsaXN0Iiwia2FkIiwibm9kZUlkIiwiZiIsImdldEFsbFBlZXJJZHMiLCJzdG9yZSIsImZpbmR2YWx1ZSIsImtleSIsImZpbmRWYWx1ZSIsInZhbHVlIiwia2V5VmFsdWVMaXN0Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxJQUFJLEVBQUUsT0FEVztBQUVqQkMsRUFBQUEsSUFBSSxFQUFFLFFBRlc7QUFHakJDLEVBQUFBLE9BQU8sRUFBRTtBQUhRLENBQW5CO0FBS0EsSUFBTUMsV0FBVyxHQUFHO0FBQ2xCSCxFQUFBQSxJQUFJLEVBQUUsT0FEWTtBQUVsQkMsRUFBQUEsSUFBSSxFQUFFLFNBRlk7QUFHbEJDLEVBQUFBLE9BQU8sRUFBRTtBQUhTLENBQXBCO0FBS0EsSUFBTUUsUUFBUSxHQUFHO0FBQ2ZKLEVBQUFBLElBQUksRUFBRSxPQURTO0FBRWZDLEVBQUFBLElBQUksRUFBRSxNQUZTO0FBR2ZDLEVBQUFBLE9BQU8sRUFBRTtBQUhNLENBQWpCOztBQUtBRyxrQkFBUUMsTUFBUixDQUFlLENBQUNQLFVBQUQsRUFBYUksV0FBYixFQUEwQkMsUUFBMUIsQ0FBZixFQUFvREcsSUFBcEQsQ0FBeUQsVUFBQ0MsTUFBRCxFQUFpQjtBQUN4RUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLGdCQUFvQkYsTUFBTSxDQUFDRyxNQUEzQixjQUFxQ0gsTUFBTSxDQUFDSSxPQUE1QyxjQUF1REosTUFBTSxDQUFDSyxJQUE5RDtBQUNBLE1BQU1DLElBQUksR0FBRyxJQUFJQyxtQkFBSixDQUFlUCxNQUFNLENBQUNHLE1BQXRCLEVBQThCO0FBQ3pDQyxJQUFBQSxPQUFPLEVBQUVKLE1BQU0sQ0FBQ0ksT0FEeUI7QUFFekNDLElBQUFBLElBQUksRUFBRUwsTUFBTSxDQUFDSztBQUY0QixHQUE5QixDQUFiO0FBS0EsTUFBTUcsUUFBYSxHQUFHLEVBQXRCOztBQUNBLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkMsZUFBcEIsQ0FBb0M7QUFDakRDLElBQUFBLEtBQUssRUFBRUMsT0FBTyxDQUFDQyxLQURrQztBQUVqREMsSUFBQUEsTUFBTSxFQUFFRixPQUFPLENBQUNHO0FBRmlDLEdBQXBDLENBQWY7O0FBS0FQLEVBQUFBLE1BQU0sQ0FBQ1EsRUFBUCxDQUFVLE1BQVYsRUFBa0IsVUFBQ0MsSUFBRDtBQUFBLFdBQWVDLElBQUksQ0FBQ0QsSUFBRCxDQUFuQjtBQUFBLEdBQWxCOztBQUVBLFdBQVNDLElBQVQsQ0FBY0QsSUFBZCxFQUF5QjtBQUN2QixRQUFNRSxHQUFHLEdBQUdGLElBQUksQ0FBQ0csUUFBTCxHQUFnQkMsS0FBaEIsQ0FBc0IsR0FBdEIsRUFBMkIsQ0FBM0IsQ0FBWjtBQUNBLFFBQU1DLEdBQUcsR0FBR0wsSUFBSSxDQUFDRyxRQUFMLEdBQWdCQyxLQUFoQixDQUFzQixHQUF0QixFQUEyQixDQUEzQixDQUFaOztBQUVBLFFBQUlFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZakIsUUFBWixFQUFzQmtCLFFBQXRCLENBQStCTixHQUEvQixDQUFKLEVBQXlDO0FBQ3ZDWixNQUFBQSxRQUFRLENBQUNZLEdBQUQsQ0FBUixDQUFjRyxHQUFkO0FBQ0Q7QUFDRjs7QUFFRGYsRUFBQUEsUUFBUSxDQUFDbUIsUUFBVCxHQUFvQixZQUFNO0FBQ3hCMUIsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlJLElBQUksQ0FBQ3NCLEdBQUwsQ0FBU0MsTUFBckIsRUFBNkIsSUFBN0IsRUFBbUN2QixJQUFJLENBQUNzQixHQUFMLENBQVNFLENBQVQsQ0FBV0MsYUFBWCxFQUFuQztBQUNELEdBRkQ7O0FBSUF2QixFQUFBQSxRQUFRLENBQUN3QixLQUFULEdBQWlCLFVBQUNkLElBQUQsRUFBZTtBQUM5QlosSUFBQUEsSUFBSSxDQUFDc0IsR0FBTCxDQUFTSSxLQUFULENBQWUxQixJQUFJLENBQUNzQixHQUFMLENBQVNDLE1BQXhCLEVBQWdDLGtCQUFLWCxJQUFMLEVBQVdHLFFBQVgsRUFBaEMsRUFBdURILElBQXZEO0FBQ0QsR0FGRDs7QUFJQVYsRUFBQUEsUUFBUSxDQUFDeUIsU0FBVCxHQUFxQixVQUFDQyxHQUFELEVBQWlCO0FBQ3BDNUIsSUFBQUEsSUFBSSxDQUFDc0IsR0FBTCxDQUFTTyxTQUFULENBQW1CRCxHQUFuQixFQUF3QixVQUFDRSxLQUFELEVBQWdCO0FBQ3RDbkMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWixFQUE0QmtDLEtBQTVCO0FBQ0QsS0FGRDtBQUdELEdBSkQ7O0FBTUE1QixFQUFBQSxRQUFRLENBQUM2QixZQUFULEdBQXdCLFlBQU07QUFDNUJwQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUksSUFBSSxDQUFDc0IsR0FBTCxDQUFTUyxZQUFyQjtBQUNELEdBRkQ7O0FBSUFwQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWTtBQUFFTSxJQUFBQSxRQUFRLEVBQVJBO0FBQUYsR0FBWjtBQUNELENBM0NEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBvcnRhbE5vZGUgZnJvbSBcIi4uL25vZGUvcG9ydGFsTm9kZVwiO1xuaW1wb3J0IGlucXVpcmUgZnJvbSBcImlucXVpcmVyXCI7XG5pbXBvcnQgc2hhMSBmcm9tIFwic2hhMVwiO1xuXG5jb25zdCBxdWVzTXlQb3J0ID0ge1xuICB0eXBlOiBcImlucHV0XCIsXG4gIG5hbWU6IFwibXlQb3J0XCIsXG4gIG1lc3NhZ2U6IFwibXkgcG9ydFwiXG59O1xuY29uc3QgcXVlc0FkZHJlc3MgPSB7XG4gIHR5cGU6IFwiaW5wdXRcIixcbiAgbmFtZTogXCJhZGRyZXNzXCIsXG4gIG1lc3NhZ2U6IFwiaXAgYWRkcmVzc1wiXG59O1xuY29uc3QgcXVlc1BvcnQgPSB7XG4gIHR5cGU6IFwiaW5wdXRcIixcbiAgbmFtZTogXCJwb3J0XCIsXG4gIG1lc3NhZ2U6IFwicG9ydFwiXG59O1xuaW5xdWlyZS5wcm9tcHQoW3F1ZXNNeVBvcnQsIHF1ZXNBZGRyZXNzLCBxdWVzUG9ydF0pLnRoZW4oKGFuc3dlcjogYW55KSA9PiB7XG4gIGNvbnNvbGUubG9nKGB0ZXN0OiR7YW5zd2VyLm15UG9ydH06JHthbnN3ZXIuYWRkcmVzc306JHthbnN3ZXIucG9ydH1gKTtcbiAgY29uc3Qgbm9kZSA9IG5ldyBQb3J0YWxOb2RlKGFuc3dlci5teVBvcnQsIHtcbiAgICBhZGRyZXNzOiBhbnN3ZXIuYWRkcmVzcyxcbiAgICBwb3J0OiBhbnN3ZXIucG9ydFxuICB9KTtcblxuICBjb25zdCByZXNwb25jZTogYW55ID0ge307XG4gIGNvbnN0IHJlYWRlciA9IHJlcXVpcmUoXCJyZWFkbGluZVwiKS5jcmVhdGVJbnRlcmZhY2Uoe1xuICAgIGlucHV0OiBwcm9jZXNzLnN0ZGluLFxuICAgIG91dHB1dDogcHJvY2Vzcy5zdGRvdXRcbiAgfSk7XG5cbiAgcmVhZGVyLm9uKFwibGluZVwiLCAoZGF0YTogYW55KSA9PiBsaW5lKGRhdGEpKTtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHJwYyA9IGRhdGEudG9TdHJpbmcoKS5zcGxpdChcIiBcIilbMF07XG4gICAgY29uc3QgcmVxID0gZGF0YS50b1N0cmluZygpLnNwbGl0KFwiIFwiKVsxXTtcblxuICAgIGlmIChPYmplY3Qua2V5cyhyZXNwb25jZSkuaW5jbHVkZXMocnBjKSkge1xuICAgICAgcmVzcG9uY2VbcnBjXShyZXEpO1xuICAgIH1cbiAgfVxuXG4gIHJlc3BvbmNlLnBlZXJsaXN0ID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKG5vZGUua2FkLm5vZGVJZCwgXCJcXG5cIiwgbm9kZS5rYWQuZi5nZXRBbGxQZWVySWRzKCkpO1xuICB9O1xuXG4gIHJlc3BvbmNlLnN0b3JlID0gKGRhdGE6IGFueSkgPT4ge1xuICAgIG5vZGUua2FkLnN0b3JlKG5vZGUua2FkLm5vZGVJZCwgc2hhMShkYXRhKS50b1N0cmluZygpLCBkYXRhKTtcbiAgfTtcblxuICByZXNwb25jZS5maW5kdmFsdWUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBub2RlLmthZC5maW5kVmFsdWUoa2V5LCAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJvbiBmaW5kdmFsdWVcIiwgdmFsdWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJlc3BvbmNlLmtleVZhbHVlTGlzdCA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhub2RlLmthZC5rZXlWYWx1ZUxpc3QpO1xuICB9O1xuXG4gIGNvbnNvbGUubG9nKHsgcmVzcG9uY2UgfSk7XG59KTtcbiJdfQ==