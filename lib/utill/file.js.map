{"version":3,"file":"file.js","sourceRoot":"","sources":["../../src/utill/file.ts"],"names":[],"mappings":";;;AAAA,MAAM,SAAS,GAAG,KAAK,CAAC;AAExB,SAAsB,mBAAmB,CAAC,IAAU;;QAClD,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,EACxB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAChC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAG,GAAG,EAAE,CACf,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE;gBACd,MAAM,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC,CAAC;YACF,MAAM,MAAM,GAAkB,EAAE,CAAC;YACjC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;gBACb,MAAM,KAAK,GAAI,CAAC,CAAC,MAAc,CAAC,MAAM,CAAC;gBACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnB,YAAY,EAAE,CAAC;gBACf,IAAI,YAAY,GAAG,QAAQ,EAAE;oBAC3B,QAAQ,EAAE,CAAC;iBACZ;qBAAM;oBACL,OAAO,CAAC,MAAM,CAAC,CAAC;iBACjB;YACH,CAAC,CAAC;YACF,SAAS,QAAQ;gBACf,MAAM,KAAK,GAAG,YAAY,GAAG,SAAS,CAAC;gBACvC,MAAM,GAAG,GACP,KAAK,GAAG,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;gBACjE,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YACxD,CAAC;YACD,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;QACL,OAAO,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;CAAA;AA9BD,kDA8BC","sourcesContent":["const chunkSize = 16000;\n\nexport async function getSliceArrayBuffer(blob: Blob) {\n  const r = new FileReader(),\n    blobSlice = File.prototype.slice,\n    chunkNum = Math.ceil(blob.size / chunkSize);\n  const job = () =>\n    new Promise<ArrayBuffer[]>((resolve, reject) => {\n      let currentChunk = 0;\n      r.onerror = e => {\n        reject(e);\n      };\n      const chunks: ArrayBuffer[] = [];\n      r.onload = e => {\n        const chunk = (e.target as any).result;\n        chunks.push(chunk);\n        currentChunk++;\n        if (currentChunk < chunkNum) {\n          loadNext();\n        } else {\n          resolve(chunks);\n        }\n      };\n      function loadNext() {\n        const start = currentChunk * chunkSize;\n        const end =\n          start + chunkSize >= blob.size ? blob.size : start + chunkSize;\n        r.readAsArrayBuffer(blobSlice.call(blob, start, end));\n      }\n      loadNext();\n    });\n  return await job();\n}\n"]}