{"version":3,"file":"webrtc.test.js","sourceRoot":"","sources":["../../src/tests/webrtc.test.ts"],"names":[],"mappings":";;;AAAA,0CAA+C;AAE/C,2CAAoC;AAEpC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CAAC,MAAM,EAAE,GAAS,EAAE;QACtB,MAAM,IAAI,OAAO,CAAC,CAAM,OAAO,EAAC,EAAE;YAChC,MAAM,KAAK,GAAG,IAAI,iBAAK,CAAC,CAAC,EAAE,GAAG,EAAE;gBAC9B,CAAC,CAAC,UAAU,EAAE,CAAC;gBACf,CAAC,CAAC,UAAU,EAAE,CAAC;gBACf,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,IAAI,eAAI,EAAE,CAAC;YAExB,MAAM,CAAC,GAAG,qBAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,MAAM,CAAC,GAAG,qBAAU,CAAC,GAAG,CAAC,CAAC;YAE1B,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBACrD,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACZ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBACf,MAAM,EAAE,GAAG,EAAE,GAAG,CAAQ,CAAC;oBACzB,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;wBAClB,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACtB,KAAK,CAAC,KAAK,EAAE,CAAC;qBACf;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAA,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBACrD,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACZ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBACf,MAAM,EAAE,GAAG,EAAE,GAAG,CAAQ,CAAC;oBACzB,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;wBAClB,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACtB,KAAK,CAAC,KAAK,EAAE,CAAC;qBACf;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAA,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAA,EAAE,KAAM,CAAC,CAAC;AACb,CAAC,CAAC,CAAC","sourcesContent":["import { PeerModule, Uuid } from \"../kademlia\";\n\nimport { Count } from \"./testtools\";\n\ndescribe(\"webrtc\", () => {\n  test(\"test\", async () => {\n    await new Promise(async resolve => {\n      const count = new Count(2, () => {\n        a.disconnect();\n        b.disconnect();\n        resolve();\n      });\n\n      const uuid = new Uuid();\n\n      const a = PeerModule(\"a\");\n      const b = PeerModule(\"b\");\n\n      a.onConnect.once(async () => {\n        const data = { type: \"a\", msg: \"a\", id: uuid.get() };\n        a.rpc(data);\n        a.onRpc.once(v => {\n          const { msg } = v as any;\n          if (v.type === \"b\") {\n            expect(msg).toBe(\"b\");\n            count.check();\n          }\n        });\n      });\n      b.onConnect.once(async () => {\n        const data = { type: \"b\", msg: \"b\", id: uuid.get() };\n        b.rpc(data);\n        b.onRpc.once(v => {\n          const { msg } = v as any;\n          if (v.type === \"a\") {\n            expect(msg).toBe(\"a\");\n            count.check();\n          }\n        });\n      });\n\n      const offer = await a.createOffer();\n      const answer = await b.setOffer(offer);\n      a.setAnswer(answer);\n    });\n  }, 10_000);\n});\n"]}