{"version":3,"file":"setupnetwork.js","sourceRoot":"","sources":["../../src/tests/setupnetwork.ts"],"names":[],"mappings":";;;AAAA,gEAAmE;AAGnE,wDAAwB;AAExB,SAAsB,cAAc,CAClC,GAAW,EACX,UAAuB,EACvB,GAAY;;QAEZ,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,wBAAa,EAAE,EAAE,CAAC,CAAC;QAC7E,MAAM,KAAK,GAAe,EAAE,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,MAAM,IAAI,GAAG,IAAI,kBAAQ,CAAC,cAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;gBAC9D,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;iBAAM;gBACL,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,MAAM,IAAI,GAAG,IAAI,kBAAQ,CAAC,cAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;gBAE9D,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChD,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,WAAW,EAAE,CAAC;gBAC/C,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACjD,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACrD,MAAM,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBAErC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACpB,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAEnB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC9B,MAAM,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAE5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAjCD,wCAiCC","sourcesContent":["import Kademlia, { KeyValueStore, PeerCreator } from \"../kademlia\";\n\nimport { Options } from \"../kademlia\";\nimport sha1 from \"sha1\";\n\nexport async function testSetupNodes(\n  num: number,\n  PeerModule: PeerCreator,\n  opt: Options\n) {\n  const modules = () => ({ peerCreate: PeerModule, kvs: new KeyValueStore() });\n  const nodes: Kademlia[] = [];\n\n  for (let i = 0; i < num; i++) {\n    if (nodes.length === 0) {\n      const node = new Kademlia(sha1(i.toString()), modules(), opt);\n      nodes.push(node);\n    } else {\n      const pre = nodes.slice(-1)[0];\n      const push = new Kademlia(sha1(i.toString()), modules(), opt);\n\n      const pushOffer = PeerModule(pre.di.kTable.kid);\n      const offerSdp = await pushOffer.createOffer();\n      const preAnswer = PeerModule(push.di.kTable.kid);\n      const answerSdp = await preAnswer.setOffer(offerSdp);\n      await pushOffer.setAnswer(answerSdp);\n\n      push.add(pushOffer);\n      pre.add(preAnswer);\n\n      await push.findNode(push.kid);\n      await pre.findNode(pre.kid);\n\n      nodes.push(push);\n    }\n  }\n\n  return nodes;\n}\n"]}