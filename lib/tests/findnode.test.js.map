{"version":3,"file":"findnode.test.js","sourceRoot":"","sources":["../../src/tests/findnode.test.ts"],"names":[],"mappings":";;;AAAA,0CAMqB;AAErB,2CAA6C;AAE7C,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,GAAG,GAAG,EAAE,CAAC;AAEf,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,MAAM,IAAI,GAAG,CAAO,KAA4B,EAAE,EAAE;QAClD,MAAM,MAAM,GAAG,CAAO,IAAY,EAAE,EAAE;YACpC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEtB,IAAI,MAA0B,CAAC;YAE/B,IAAI,GAAG,GAAG,EAAE,EACV,QAAQ,GAAG,CAAC,CAAC;YACf,OAEE,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EACjC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAC3C;gBACA,MAAM,GAAG,MAAM,mBAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAEpC,IAAI,MAAM,EAAE;oBACV,MAAM;iBACP;aACF;YAED,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACtC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACpC;QACH,CAAC,CAAA,CAAC;QAEF,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC/B,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEzC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CACxD,CAAC;IACJ,CAAC,CAAA,CAAC;IAEF,IAAI,CACF,MAAM,EACN,GAAS,EAAE;QACT,MAAM,KAAK,GAAG,MAAM,0BAAc,CAChC,WAAW,EACX,GAAG,EACH,qBAAU,EACV,KAAM,GAAG,EAAE,CACZ,CAAC;QACF,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;IAEF,IAAI,CACF,MAAM,EACN,GAAS,EAAE;QACT,MAAM,KAAK,GAAG,MAAM,0BAAc,CAChC,WAAW,EACX,GAAG,EACH,yBAAc,EACd,KAAM,GAAG,EAAE,CACZ,CAAC;QACF,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import {\n  DependencyInjection,\n  Peer,\n  PeerMockModule,\n  PeerModule,\n  findNode\n} from \"../kademlia\";\n\nimport { testSetupNodes } from \"./testtools\";\n\nconst kBucketSize = 8;\nconst num = 10;\n\ndescribe(\"findnode\", () => {\n  const menu = async (nodes: DependencyInjection[]) => {\n    const search = async (word: string) => {\n      const node = nodes[0];\n\n      let target: undefined | Peer[];\n\n      let pre = \"\",\n        tryTimes = 0;\n      for (\n        ;\n        pre !== node.kTable.getHash(word);\n        pre = node.kTable.getHash(word), tryTimes++\n      ) {\n        target = await findNode(word, node);\n\n        if (target) {\n          break;\n        }\n      }\n\n      if (!target) {\n        const now = node.kTable.getHash(word);\n        expect(pre).toBe(now);\n      } else {\n        expect(target).not.toBe(undefined);\n      }\n    };\n\n    for (let word of nodes.slice(1)) {\n      await search(word.kTable.kid);\n    }\n\n    await new Promise(r => setTimeout(r, 0));\n\n    nodes.forEach(node =>\n      node.kTable.allPeers.forEach(peer => peer.disconnect())\n    );\n  };\n\n  test(\n    \"peer\",\n    async () => {\n      const nodes = await testSetupNodes(\n        kBucketSize,\n        num,\n        PeerModule,\n        60_000 * 10\n      );\n      await menu(nodes);\n    },\n    1000 * 6000\n  );\n\n  test(\n    \"mock\",\n    async () => {\n      const nodes = await testSetupNodes(\n        kBucketSize,\n        num,\n        PeerMockModule,\n        60_000 * 10\n      );\n      await menu(nodes);\n    },\n    1000 * 6000\n  );\n});\n"]}