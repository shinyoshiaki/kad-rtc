{"version":3,"file":"findvalue.test.js","sourceRoot":"","sources":["../../src/tests/findvalue.test.ts"],"names":[],"mappings":";;;AAAA,0CAA2D;AAE3D,wDAAwB;AACxB,2CAA6C;AAE7C,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,GAAG,GAAG,EAAE,CAAC;AAEf,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,GAAW,EAAE,EAAE,CAChD,IAAI,CAAC,KAAK,CACR,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CACpE,CAAC;AAEJ,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAI,CACF,WAAW,EACX,GAAS,EAAE;QACT,MAAM,KAAK,GAAG,MAAM,0BAAc,CAChC,WAAW,EACX,GAAG,EACH,qBAAU,EACV,KAAM,GAAG,EAAE,CACZ,CAAC;QAEF,MAAM,SAAS,GAAG,CAAO,KAAa,EAAE,EAAE;YACxC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,GAAG,GAAG,cAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,gBAAK,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CAAA,CAAC;QAEF,MAAM,SAAS,CAAC,MAAM,CAAC,CAAC;QAExB,MAAM,aAAa,GAAG,CAAO,KAAa,EAAE,EAAE;YAC5C,MAAM,GAAG,GAAG,cAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,oBAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAE,CAAC;YAC/C,MAAM,CAAC,IAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAA,CAAC;QAEF,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE;YACrC,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;SAC7B;QAED,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEzC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CACxD,CAAC;IACJ,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { PeerModule, findValue, store } from \"../kademlia\";\n\nimport sha1 from \"sha1\";\nimport { testSetupNodes } from \"./testtools\";\n\nconst kBucketSize = 8;\nconst num = 10;\n\nconst getRandomInt = (min: number, max: number) =>\n  Math.floor(\n    Math.random() * (Math.floor(max) - Math.ceil(min)) + Math.ceil(min)\n  );\n\ndescribe(\"findvalue\", () => {\n  test(\n    \"findvalue\",\n    async () => {\n      const nodes = await testSetupNodes(\n        kBucketSize,\n        num,\n        PeerModule,\n        60_000 * 10\n      );\n\n      const testStore = async (value: string) => {\n        const node = nodes[0];\n        const key = sha1(value).toString();\n        await store(node, key, value);\n      };\n\n      await testStore(\"test\");\n\n      const testFindValue = async (value: string) => {\n        const key = sha1(value).toString();\n        const node = nodes[getRandomInt(0, nodes.length - 1)];\n        const { item } = (await findValue(key, node))!;\n        expect(item!.value).toBe(value);\n      };\n\n      for (let _ in [...Array(kBucketSize)]) {\n        await testFindValue(\"test\");\n      }\n\n      await new Promise(r => setTimeout(r, 0));\n\n      nodes.forEach(node =>\n        node.kTable.allPeers.forEach(peer => peer.disconnect())\n      );\n    },\n    1000 * 6000\n  );\n});\n"]}