{"version":3,"file":"testtools.js","sourceRoot":"","sources":["../../src/tests/testtools.ts"],"names":[],"mappings":";;;AAAA,0CAOqB;AAErB,wDAAwB;AAExB,MAAa,KAAK;IAEhB,YAAoB,KAAa,EAAU,OAAY;QAAnC,UAAK,GAAL,KAAK,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAK;QAD/C,UAAK,GAAG,CAAC,CAAC;QAGlB,UAAK,GAAG,GAAG,EAAE;YACX,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK;gBAAE,IAAI,CAAC,OAAO,EAAE,CAAC;QAChD,CAAC,CAAC;IALwD,CAAC;CAM5D;AARD,sBAQC;AAED,SAAsB,cAAc,CAClC,WAAmB,EACnB,GAAW,EACX,UAAuB,EACvB,OAAe;;QAEf,MAAM,KAAK,GAA0B,EAAE,CAAC;QAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,MAAM,IAAI,GAAG,8BAAmB,CAC9B,cAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,EAC7B,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,wBAAa,EAAE,EAAE,EACpD,EAAE,WAAW,EAAE,OAAO,EAAE,CACzB,CAAC;gBACF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;iBAAM;gBACL,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,MAAM,IAAI,GAAG,8BAAmB,CAC9B,cAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,EAC7B,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,wBAAa,EAAE,EAAE,EACpD,EAAE,WAAW,EAAE,OAAO,EAAE,CACzB,CAAC;gBACF,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,WAAW,EAAE,CAAC;gBAC3C,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1C,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAClD,MAAM,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBAEjC,oBAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBACtB,oBAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAExB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;SACF;QAED,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YACtB,MAAM,mBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACvC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAxCD,wCAwCC","sourcesContent":["import {\n  DependencyInjection,\n  KeyValueStore,\n  PeerCreator,\n  dependencyInjection,\n  findNode,\n  listeners\n} from \"../kademlia\";\n\nimport sha1 from \"sha1\";\n\nexport class Count {\n  private count = 0;\n  constructor(private times: number, private resolve: any) {}\n\n  check = () => {\n    this.count++;\n    if (this.count === this.times) this.resolve();\n  };\n}\n\nexport async function testSetupNodes(\n  kBucketSize: number,\n  num: number,\n  PeerModule: PeerCreator,\n  timeout: number\n) {\n  const nodes: DependencyInjection[] = [];\n\n  for (let i = 0; i < num; i++) {\n    if (nodes.length === 0) {\n      const node = dependencyInjection(\n        sha1(i.toString()).toString(),\n        { peerCreate: PeerModule, kvs: new KeyValueStore() },\n        { kBucketSize, timeout }\n      );\n      nodes.push(node);\n    } else {\n      const pre = nodes.slice(-1)[0];\n      const push = dependencyInjection(\n        sha1(i.toString()).toString(),\n        { peerCreate: PeerModule, kvs: new KeyValueStore() },\n        { kBucketSize, timeout }\n      );\n      const offer = PeerModule(push.kTable.kid);\n      const offerSdp = await offer.createOffer();\n      const answer = PeerModule(pre.kTable.kid);\n      const answerSdp = await answer.setOffer(offerSdp);\n      await offer.setAnswer(answerSdp);\n\n      listeners(offer, pre);\n      listeners(answer, push);\n\n      nodes.push(push);\n    }\n  }\n\n  for (let node of nodes) {\n    await findNode(node.kTable.kid, node);\n  }\n  return nodes;\n}\n"]}