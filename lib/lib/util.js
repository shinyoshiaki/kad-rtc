"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseBigInt = parseBigInt;
exports.formatBigInt = formatBigInt;
exports.convertBase = convertBase;
function parseBigInt(bigint, base) {
  //convert bigint string to array of digit values
  for (var values = [], i = 0; i < bigint.length; i++) {
    values[i] = parseInt(bigint.charAt(i), base);
  }
  return values;
}

function formatBigInt(values, base) {
  //convert array of digit values to bigint string
  for (var bigint = "", i = 0; i < values.length; i++) {
    bigint += values[i].toString(base);
  }
  return bigint;
}

function convertBase(bigint, inputBase, outputBase) {
  //takes a bigint string and converts to different base
  var inputValues = parseBigInt(bigint, inputBase),
      outputValues = [],
      //output array, little-endian/lsd order
  remainder,
      len = inputValues.length,
      pos = 0,
      i;
  while (pos < len) {
    //while digits left in input array
    remainder = 0; //set remainder to 0
    for (i = pos; i < len; i++) {
      //long integer division of input values divided by output base
      //remainder is added to output array
      remainder = inputValues[i] + remainder * inputBase;
      inputValues[i] = Math.floor(remainder / outputBase);
      remainder -= inputValues[i] * outputBase;
      if (inputValues[i] === 0 && i === pos) {
        pos++;
      }
    }
    outputValues.push(remainder);
  }
  outputValues.reverse(); //transform to big-endian/msd order
  return formatBigInt(outputValues, outputBase);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdXRpbC5qcyJdLCJuYW1lcyI6WyJwYXJzZUJpZ0ludCIsImZvcm1hdEJpZ0ludCIsImNvbnZlcnRCYXNlIiwiYmlnaW50IiwiYmFzZSIsInZhbHVlcyIsImkiLCJsZW5ndGgiLCJwYXJzZUludCIsImNoYXJBdCIsInRvU3RyaW5nIiwiaW5wdXRCYXNlIiwib3V0cHV0QmFzZSIsImlucHV0VmFsdWVzIiwib3V0cHV0VmFsdWVzIiwicmVtYWluZGVyIiwibGVuIiwicG9zIiwiTWF0aCIsImZsb29yIiwicHVzaCIsInJldmVyc2UiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWdCQSxXLEdBQUFBLFc7UUFRQUMsWSxHQUFBQSxZO1FBUUFDLFcsR0FBQUEsVztBQWhCVCxTQUFTRixXQUFULENBQXFCRyxNQUFyQixFQUE2QkMsSUFBN0IsRUFBbUM7QUFDeEM7QUFDQSxPQUFLLElBQUlDLFNBQVMsRUFBYixFQUFpQkMsSUFBSSxDQUExQixFQUE2QkEsSUFBSUgsT0FBT0ksTUFBeEMsRUFBZ0RELEdBQWhELEVBQXFEO0FBQ25ERCxXQUFPQyxDQUFQLElBQVlFLFNBQVNMLE9BQU9NLE1BQVAsQ0FBY0gsQ0FBZCxDQUFULEVBQTJCRixJQUEzQixDQUFaO0FBQ0Q7QUFDRCxTQUFPQyxNQUFQO0FBQ0Q7O0FBRU0sU0FBU0osWUFBVCxDQUFzQkksTUFBdEIsRUFBOEJELElBQTlCLEVBQW9DO0FBQ3pDO0FBQ0EsT0FBSyxJQUFJRCxTQUFTLEVBQWIsRUFBaUJHLElBQUksQ0FBMUIsRUFBNkJBLElBQUlELE9BQU9FLE1BQXhDLEVBQWdERCxHQUFoRCxFQUFxRDtBQUNuREgsY0FBVUUsT0FBT0MsQ0FBUCxFQUFVSSxRQUFWLENBQW1CTixJQUFuQixDQUFWO0FBQ0Q7QUFDRCxTQUFPRCxNQUFQO0FBQ0Q7O0FBRU0sU0FBU0QsV0FBVCxDQUFxQkMsTUFBckIsRUFBNkJRLFNBQTdCLEVBQXdDQyxVQUF4QyxFQUFvRDtBQUN6RDtBQUNBLE1BQUlDLGNBQWNiLFlBQVlHLE1BQVosRUFBb0JRLFNBQXBCLENBQWxCO0FBQUEsTUFDRUcsZUFBZSxFQURqQjtBQUFBLE1BQ3FCO0FBQ25CQyxXQUZGO0FBQUEsTUFHRUMsTUFBTUgsWUFBWU4sTUFIcEI7QUFBQSxNQUlFVSxNQUFNLENBSlI7QUFBQSxNQUtFWCxDQUxGO0FBTUEsU0FBT1csTUFBTUQsR0FBYixFQUFrQjtBQUNoQjtBQUNBRCxnQkFBWSxDQUFaLENBRmdCLENBRUQ7QUFDZixTQUFLVCxJQUFJVyxHQUFULEVBQWNYLElBQUlVLEdBQWxCLEVBQXVCVixHQUF2QixFQUE0QjtBQUMxQjtBQUNBO0FBQ0FTLGtCQUFZRixZQUFZUCxDQUFaLElBQWlCUyxZQUFZSixTQUF6QztBQUNBRSxrQkFBWVAsQ0FBWixJQUFpQlksS0FBS0MsS0FBTCxDQUFXSixZQUFZSCxVQUF2QixDQUFqQjtBQUNBRyxtQkFBYUYsWUFBWVAsQ0FBWixJQUFpQk0sVUFBOUI7QUFDQSxVQUFJQyxZQUFZUCxDQUFaLE1BQW1CLENBQW5CLElBQXdCQSxNQUFNVyxHQUFsQyxFQUF1QztBQUNyQ0E7QUFDRDtBQUNGO0FBQ0RILGlCQUFhTSxJQUFiLENBQWtCTCxTQUFsQjtBQUNEO0FBQ0RELGVBQWFPLE9BQWIsR0F2QnlELENBdUJqQztBQUN4QixTQUFPcEIsYUFBYWEsWUFBYixFQUEyQkYsVUFBM0IsQ0FBUDtBQUNEIiwiZmlsZSI6InV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VCaWdJbnQoYmlnaW50LCBiYXNlKSB7XG4gIC8vY29udmVydCBiaWdpbnQgc3RyaW5nIHRvIGFycmF5IG9mIGRpZ2l0IHZhbHVlc1xuICBmb3IgKHZhciB2YWx1ZXMgPSBbXSwgaSA9IDA7IGkgPCBiaWdpbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YWx1ZXNbaV0gPSBwYXJzZUludChiaWdpbnQuY2hhckF0KGkpLCBiYXNlKTtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QmlnSW50KHZhbHVlcywgYmFzZSkge1xuICAvL2NvbnZlcnQgYXJyYXkgb2YgZGlnaXQgdmFsdWVzIHRvIGJpZ2ludCBzdHJpbmdcbiAgZm9yICh2YXIgYmlnaW50ID0gXCJcIiwgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBiaWdpbnQgKz0gdmFsdWVzW2ldLnRvU3RyaW5nKGJhc2UpO1xuICB9XG4gIHJldHVybiBiaWdpbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QmFzZShiaWdpbnQsIGlucHV0QmFzZSwgb3V0cHV0QmFzZSkge1xuICAvL3Rha2VzIGEgYmlnaW50IHN0cmluZyBhbmQgY29udmVydHMgdG8gZGlmZmVyZW50IGJhc2VcbiAgdmFyIGlucHV0VmFsdWVzID0gcGFyc2VCaWdJbnQoYmlnaW50LCBpbnB1dEJhc2UpLFxuICAgIG91dHB1dFZhbHVlcyA9IFtdLCAvL291dHB1dCBhcnJheSwgbGl0dGxlLWVuZGlhbi9sc2Qgb3JkZXJcbiAgICByZW1haW5kZXIsXG4gICAgbGVuID0gaW5wdXRWYWx1ZXMubGVuZ3RoLFxuICAgIHBvcyA9IDAsXG4gICAgaTtcbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIC8vd2hpbGUgZGlnaXRzIGxlZnQgaW4gaW5wdXQgYXJyYXlcbiAgICByZW1haW5kZXIgPSAwOyAvL3NldCByZW1haW5kZXIgdG8gMFxuICAgIGZvciAoaSA9IHBvczsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvL2xvbmcgaW50ZWdlciBkaXZpc2lvbiBvZiBpbnB1dCB2YWx1ZXMgZGl2aWRlZCBieSBvdXRwdXQgYmFzZVxuICAgICAgLy9yZW1haW5kZXIgaXMgYWRkZWQgdG8gb3V0cHV0IGFycmF5XG4gICAgICByZW1haW5kZXIgPSBpbnB1dFZhbHVlc1tpXSArIHJlbWFpbmRlciAqIGlucHV0QmFzZTtcbiAgICAgIGlucHV0VmFsdWVzW2ldID0gTWF0aC5mbG9vcihyZW1haW5kZXIgLyBvdXRwdXRCYXNlKTtcbiAgICAgIHJlbWFpbmRlciAtPSBpbnB1dFZhbHVlc1tpXSAqIG91dHB1dEJhc2U7XG4gICAgICBpZiAoaW5wdXRWYWx1ZXNbaV0gPT09IDAgJiYgaSA9PT0gcG9zKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXRWYWx1ZXMucHVzaChyZW1haW5kZXIpO1xuICB9XG4gIG91dHB1dFZhbHVlcy5yZXZlcnNlKCk7IC8vdHJhbnNmb3JtIHRvIGJpZy1lbmRpYW4vbXNkIG9yZGVyXG4gIHJldHVybiBmb3JtYXRCaWdJbnQob3V0cHV0VmFsdWVzLCBvdXRwdXRCYXNlKTtcbn0iXX0=