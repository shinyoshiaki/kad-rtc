{"version":3,"file":"di.js","sourceRoot":"","sources":["../../src/kademlia/di.ts"],"names":[],"mappings":";;;AAAA,mFAAmD;AACnD,6EAA6C;AAC7C,8DAA8B;AAG9B,+EAA+C;AAC/C,6EAA6C;AAEhC,QAAA,mBAAmB,GAAG,CACjC,GAAW,EACX,OAAgB,EAChB,GAAY,EACZ,EAAE;IACF,MAAM,UAAU,GAAG,IAAI,oBAAU,EAAE,CAAC;IACpC,OAAO;QACL,OAAO;QACP,MAAM,EAAE,IAAI,gBAAM,CAAC,GAAG,EAAE,GAAG,CAAC;QAC5B,UAAU;QACV,SAAS,EAAE,IAAI,mBAAS,CAAC,OAAO,CAAC,UAAU,CAAC;QAC5C,SAAS,EAAE,IAAI,mBAAS,EAAE;QAC1B,YAAY,EAAE,IAAI,sBAAY,CAAC,UAAU,CAAC;QAC1C,GAAG;KACJ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import EventManager from \"./services/eventmanager\";\nimport JobSystem from \"./services/jobsystem\";\nimport Ktable from \"./ktable\";\nimport { Modules } from \"./modules\";\nimport { Options } from \"./kademlia\";\nimport RpcManager from \"./services/rpcmanager\";\nimport Signaling from \"./services/signaling\";\n\nexport const dependencyInjection = (\n  kid: string,\n  modules: Modules,\n  opt: Options\n) => {\n  const rpcManager = new RpcManager();\n  return {\n    modules,\n    kTable: new Ktable(kid, opt),\n    rpcManager,\n    signaling: new Signaling(modules.peerCreate),\n    jobSystem: new JobSystem(),\n    eventManager: new EventManager(rpcManager),\n    opt\n  };\n};\n\nexport type DependencyInjection = ReturnType<typeof dependencyInjection>;\n"]}