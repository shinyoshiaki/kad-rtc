{"version":3,"file":"di.js","sourceRoot":"","sources":["../../src/kademlia/di.ts"],"names":[],"mappings":";;;AAAA,8DAA0C;AAE1C,+EAA+C;AAC/C,6EAA6C;AAC7C,6EAA6C;AAYhC,QAAA,mBAAmB,GAAG,CACjC,GAAW,EACX,OAAgB,EAChB,MAAwB,EAAE,EACL,EAAE;IACvB,OAAO;QACL,MAAM,EAAE,IAAI,gBAAM,CAAC,GAAG,EAAE,GAAG,CAAC;QAC5B,OAAO;QACP,UAAU,EAAE,IAAI,oBAAU,EAAE;QAC5B,SAAS,EAAE,IAAI,mBAAS,CAAC,OAAO,CAAC,UAAU,CAAC;QAC5C,SAAS,EAAE,IAAI,mBAAS,EAAE;KAC3B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import Ktable, { Option } from \"./ktable\";\nimport Modules from \"./modules\";\nimport RpcManager from \"./services/rpcmanager\";\nimport Signaling from \"./services/signaling\";\nimport JobSystem from \"./services/jobsystem\";\n\ntype Options = Option;\n\nexport type DependencyInjection = {\n  kTable: Ktable;\n  modules: Modules;\n  rpcManager: RpcManager;\n  signaling: Signaling;\n  jobSystem: JobSystem;\n};\n\nexport const dependencyInjection = (\n  kid: string,\n  modules: Modules,\n  opt: Partial<Options> = {}\n): DependencyInjection => {\n  return {\n    kTable: new Ktable(kid, opt),\n    modules,\n    rpcManager: new RpcManager(),\n    signaling: new Signaling(modules.peerCreate),\n    jobSystem: new JobSystem()\n  };\n};\n"]}