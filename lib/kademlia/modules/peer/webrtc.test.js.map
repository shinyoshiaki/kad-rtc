{"version":3,"file":"webrtc.test.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/webrtc.test.ts"],"names":[],"mappings":";;;AAAA,qCAAsC;AACtC,wDAAiD;AAEjD,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CACF,MAAM,EACN,GAAS,EAAE;QACT,MAAM,IAAI,GAAG,GAAG,EAAE,CAChB,IAAI,OAAO,CAAC,CAAM,OAAO,EAAC,EAAE;YAC1B,MAAM,KAAK,GAAG,IAAI,iBAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAEpC,MAAM,CAAC,GAAG,mBAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,MAAM,CAAC,GAAG,mBAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAEpB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;gBACpC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACZ,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;gBAC9C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAA,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;gBACpC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACZ,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;gBAC9C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAA,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QACL,MAAM,IAAI,EAAE,CAAC;IACf,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { PeerModule } from \"./webrtc\";\nimport { Count } from \"../../../utill/testtools\";\n\ndescribe(\"webrtc\", () => {\n  test(\n    \"test\",\n    async () => {\n      const test = () =>\n        new Promise(async resolve => {\n          const count = new Count(2, resolve);\n\n          const a = PeerModule(\"a\");\n          const b = PeerModule(\"b\");\n          const offer = await a.createOffer();\n          const answer = await b.setOffer(offer);\n          a.setAnswer(answer);\n\n          a.onConnect.once(async () => {\n            const data = { rpc: \"a\", msg: \"a\" };\n            a.rpc(data);\n            const res = await a.eventRpc(\"b\").asPromise();\n            expect(res.msg).toBe(\"b\");\n            count.check();\n          });\n          b.onConnect.once(async () => {\n            const data = { rpc: \"b\", msg: \"b\" };\n            b.rpc(data);\n            const res = await b.eventRpc(\"a\").asPromise();\n            expect(res.msg).toBe(\"a\");\n            count.check();\n          });\n        });\n      await test();\n    },\n    1000 * 6000\n  );\n});\n"]}