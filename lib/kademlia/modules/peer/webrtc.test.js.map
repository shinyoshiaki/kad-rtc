{"version":3,"file":"webrtc.test.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/webrtc.test.ts"],"names":[],"mappings":";;;AAAA,qCAAsC;AACtC,wDAAiD;AACjD,uEAAuC;AAEvC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,CACF,MAAM,EACN,GAAS,EAAE;QACT,MAAM,IAAI,GAAG,GAAG,EAAE,CAChB,IAAI,OAAO,CAAC,CAAM,OAAO,EAAC,EAAE;YAC1B,MAAM,KAAK,GAAG,IAAI,iBAAK,CAAC,CAAC,EAAE,GAAG,EAAE;gBAC9B,CAAC,CAAC,UAAU,EAAE,CAAC;gBACf,CAAC,CAAC,UAAU,EAAE,CAAC;gBACf,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,IAAI,cAAI,EAAE,CAAC;YAExB,MAAM,CAAC,GAAG,mBAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,MAAM,CAAC,GAAG,mBAAU,CAAC,GAAG,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAEpB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBACpD,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACZ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBACf,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,EAAE;wBACjB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACxB,KAAK,CAAC,KAAK,EAAE,CAAC;qBACf;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAA,CAAC,CAAC;YACH,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBACpD,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACZ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBACf,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,EAAE;wBACjB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACxB,KAAK,CAAC,KAAK,EAAE,CAAC;qBACf;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAA,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QACL,MAAM,IAAI,EAAE,CAAC;IACf,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { PeerModule } from \"./webrtc\";\nimport { Count } from \"../../../utill/testtools\";\nimport Uuid from \"../../../utill/uuid\";\n\ndescribe(\"webrtc\", () => {\n  test(\n    \"test\",\n    async () => {\n      const test = () =>\n        new Promise(async resolve => {\n          const count = new Count(2, () => {\n            a.disconnect();\n            b.disconnect();\n            resolve();\n          });\n\n          const uuid = new Uuid();\n\n          const a = PeerModule(\"a\");\n          const b = PeerModule(\"b\");\n          const offer = await a.createOffer();\n          const answer = await b.setOffer(offer);\n          a.setAnswer(answer);\n\n          a.onConnect.once(async () => {\n            const data = { rpc: \"a\", msg: \"a\", id: uuid.get() };\n            a.rpc(data);\n            a.onRpc.once(v => {\n              if (v.rpc === \"b\") {\n                expect(v.msg).toBe(\"b\");\n                count.check();\n              }\n            });\n          });\n          b.onConnect.once(async () => {\n            const data = { rpc: \"b\", msg: \"b\", id: uuid.get() };\n            b.rpc(data);\n            b.onRpc.once(v => {\n              if (v.rpc === \"a\") {\n                expect(v.msg).toBe(\"a\");\n                count.check();\n              }\n            });\n          });\n        });\n      await test();\n    },\n    1000 * 6000\n  );\n});\n"]}