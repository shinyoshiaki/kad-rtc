{"version":3,"file":"mock.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/mock.ts"],"names":[],"mappings":";;;AACA,uEAAyC;AAE5B,QAAA,UAAU,GAAG,UAAC,GAAW,IAAK,OAAA,IAAI,IAAI,CAAC,GAAG,CAAC,EAAb,CAAa,CAAC;AAEzD;IASE,cAAmB,GAAW;QAA9B,iBASC;QATkB,QAAG,GAAH,GAAG,CAAQ;QARtB,SAAI,GAAG,QAAQ,CAAC;QACxB,UAAK,GAAG,IAAI,eAAK,EAAO,CAAC;QACzB,iBAAY,GAAG,IAAI,eAAK,EAAE,CAAC;QAC3B,cAAS,GAAG,IAAI,eAAK,EAAE,CAAC;QAExB,WAAM,GAAG,IAAI,eAAK,EAAO,CAAC;QAc1B,QAAG,GAAG,UAAC,IAAqB;YAC1B,IAAM,QAAQ,GAAG,IAAI,eAAK,EAAO,CAAC;YAClC,IAAI,KAAI,CAAC,IAAI,EAAE;gBACb,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClD,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;oBACvB,IAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;oBACtB,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG,EAAE;wBAC1B,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBACvB;gBACH,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QAEF,gBAAW,GAAG;;gBACZ,sBAAO,IAAI,CAAC,MAAM,EAAC;;aACpB,CAAC;QAEF,aAAQ,GAAG,UAAO,GAAQ;;gBACxB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;gBAChB,sBAAO,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,EAAC;;aACvD,CAAC;QAEF,cAAS,GAAG,UAAO,GAAQ;;;gBACzB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;gBACf,OAAO,GAAc,GAAG,CAAC,OAAO,CAAC;gBACvC,UAAU,CAAC;oBACT,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,CAAC,EAAE,CAAC,CAAC,CAAC;gBACN,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;gBAExB,sBAAO,IAAI,EAAC;;aACb,CAAC;QAEF,eAAU,GAAG,cAAO,CAAC,CAAC;QA5CpB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;YACvB,IAAI;gBACF,IAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;gBACtB,IAAI,IAAI,CAAC,GAAG,EAAE;oBACZ,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACzB;aACF;YAAC,OAAO,KAAK,EAAE,GAAE;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAqCH,WAAC;AAAD,CAAC,AAvDD,IAuDC","sourcesContent":["import Base from \".\";\nimport Event from \"../../../utill/event\";\n\nexport const PeerModule = (kid: string) => new Peer(kid);\n\nexport default class Peer implements Base {\n  private type = \"webrtc\";\n  onRpc = new Event<any>();\n  onDisconnect = new Event();\n  onConnect = new Event();\n\n  onData = new Event<any>();\n  send: Event<any> | undefined;\n\n  constructor(public kid: string) {\n    this.onData.subscribe(raw => {\n      try {\n        const data = raw.data;\n        if (data.rpc) {\n          this.onRpc.excute(data);\n        }\n      } catch (error) {}\n    });\n  }\n\n  rpc = (send: { rpc: string }) => {\n    const observer = new Event<any>();\n    if (this.send) {\n      this.send.excute({ data: send, label: send.rpc });\n      this.onData.subscribe(raw => {\n        const data = raw.data;\n        if (raw.label === data.rpc) {\n          observer.excute(data);\n        }\n      });\n    }\n    return observer;\n  };\n\n  createOffer = async () => {\n    return this.onData;\n  };\n\n  setOffer = async (sdp: any) => {\n    this.send = sdp;\n    return { send: this.onData, connect: this.onConnect };\n  };\n\n  setAnswer = async (sdp: any) => {\n    this.send = sdp.send;\n    const connect: Event<{}> = sdp.connect;\n    setTimeout(() => {\n      connect.excute();\n    }, 0);\n    this.onConnect.excute();\n\n    return true;\n  };\n\n  disconnect = () => {};\n}\n"]}