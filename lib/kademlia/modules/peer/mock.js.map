{"version":3,"file":"mock.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/mock.ts"],"names":[],"mappings":";;;AACA,8DAA4B;AAEf,QAAA,UAAU,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AAEzD,MAAqB,IAAI;IASvB,YAAmB,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;QARtB,SAAI,GAAG,MAAM,CAAC;QACd,WAAM,GAAG,IAAI,iBAAK,EAAO,CAAC;QAGlC,UAAK,GAAG,IAAI,iBAAK,EAAO,CAAC;QACzB,iBAAY,GAAG,IAAI,iBAAK,EAAE,CAAC;QAC3B,cAAS,GAAG,IAAI,iBAAK,EAAW,CAAC;QAWjC,QAAG,GAAG,CAAC,IAAqB,EAAE,EAAE;YAC9B,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,IAAI,CAAC,IAAI;oBAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YACnE,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,CAAC,CAAC;QAEF,aAAQ,GAAG,CAAC,GAAW,EAAE,EAAE;YACzB,MAAM,QAAQ,GAAG,IAAI,iBAAK,EAAO,CAAC;YAClC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBACvC,IAAI,GAAG,CAAC,KAAK,KAAK,GAAG,EAAE;oBACrB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;oBACtB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;YACH,CAAC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QAEF,gBAAW,GAAG,GAAS,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC,CAAA,CAAC;QAEF,aAAQ,GAAG,CAAO,GAAe,EAAE,EAAE;YACnC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;QACxD,CAAC,CAAA,CAAC;QAEF,cAAS,GAAG,CAAO,GAA6C,EAAE,EAAE;YAClE,OAAA,IAAI,OAAO,CAAU,OAAO,CAAC,EAAE;gBAC7B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;gBACrB,MAAM,OAAO,GAAc,GAAG,CAAC,OAAO,CAAC;gBAEvC,UAAU,CAAC,GAAG,EAAE;oBACd,OAAO,CAAC,MAAM,EAAE,CAAC;oBACjB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAE5B,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC,CAAC,CAAA;UAAA,CAAC;QAEL,eAAU,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;QAhDpB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YAC1B,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACtB,IAAI,IAAI,CAAC,GAAG,EAAE;gBACZ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CA2CF;AA3DD,uBA2DC","sourcesContent":["import Base from \"./base\";\nimport Event from \"rx.mini\";\n\nexport const PeerModule = (kid: string) => new Peer(kid);\n\nexport default class Peer implements Base {\n  private type = \"mock\";\n  private onData = new Event<any>();\n  private send: Event<any> | undefined;\n\n  onRpc = new Event<any>();\n  onDisconnect = new Event();\n  onConnect = new Event<boolean>();\n\n  constructor(public kid: string) {\n    this.onData.subscribe(raw => {\n      const data = raw.data;\n      if (data.rpc) {\n        this.onRpc.excute(data);\n      }\n    });\n  }\n\n  rpc = (send: { rpc: string }) => {\n    setTimeout(() => {\n      if (this.send) this.send.excute({ data: send, label: send.rpc });\n    }, 0);\n  };\n\n  eventRpc = (rpc: string) => {\n    const observer = new Event<any>();\n    const once = this.onData.subscribe(raw => {\n      if (raw.label === rpc) {\n        const data = raw.data;\n        observer.excute(data);\n        once.unSubscribe();\n      }\n    });\n    return observer;\n  };\n\n  createOffer = async () => {\n    return this.onData;\n  };\n\n  setOffer = async (sdp: Event<any>) => {\n    this.send = sdp;\n    return { send: this.onData, connect: this.onConnect };\n  };\n\n  setAnswer = async (sdp: { send: Event<any>; connect: Event<{}> }) =>\n    new Promise<boolean>(resolve => {\n      this.send = sdp.send;\n      const connect: Event<{}> = sdp.connect;\n\n      setTimeout(() => {\n        connect.excute();\n        this.onConnect.excute(true);\n\n        resolve(true);\n      }, 0);\n    });\n\n  disconnect = () => {};\n}\n"]}