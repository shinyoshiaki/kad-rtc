{"version":3,"file":"webrtc.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/webrtc.ts"],"names":[],"mappings":"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","sourcesContent":["import { ID, Peer, RPC, RPCBase } from \"./base\";\nimport WebRTC, { Signal } from \"webrtc4me\";\nimport { decode, encode } from \"@msgpack/msgpack\";\n\nimport Event from \"rx.mini\";\nimport { timeout } from \"../../const\";\n\nconst wrtc = require(\"wrtc\");\n\nexport const PeerModule = (kid: string) => new PeerWebRTC(kid);\n\nexport default class PeerWebRTC implements Peer {\n  type = \"webrtc\";\n  peer: WebRTC = new WebRTC({ disable_stun: true, wrtc });\n  onRpc = new Event<RPCBase & ID>();\n  onDisconnect = new Event();\n  onConnect = new Event();\n\n  constructor(public kid: string) {\n    this.peer.nodeId = kid;\n    this.peer.onConnect.once(() => this.onConnect.execute(null));\n    this.peer.onDisconnect.once(() => this.onDisconnect.execute(null));\n    const { unSubscribe } = this.peer.onData.subscribe(\n      ({ label, data, dataType }) => {\n        try {\n          if (label == \"datachannel\" && dataType === \"ArrayBuffer\") {\n            const obj = this.parseRPC(data as ArrayBuffer);\n            if (obj) this.onRpc.execute(obj);\n          }\n        } catch (error) {\n          // console.error(error);\n        }\n      }\n    );\n    this.onDisconnect.once(unSubscribe);\n  }\n\n  parseRPC = (data: ArrayBuffer) => {\n    const buffer = Buffer.from(data);\n    try {\n      const data: RPC = decode(buffer) as any;\n      if (data.type) {\n        return data;\n      }\n    } catch (error) {\n      // console.error(error, buffer);\n    }\n    return undefined;\n  };\n\n  rpc = (send: RPCBase & ID & { [key: string]: unknown }) => {\n    const packet = encode(send);\n    this.peer.send(packet);\n  };\n\n  eventRpc = (type: string, transactionId: string) => {\n    const observer = new Event<any>();\n    const { unSubscribe } = this.peer.onData.subscribe(\n      ({ label, data, dataType }) => {\n        if (label == \"datachannel\" && dataType === \"ArrayBuffer\") {\n          const obj = this.parseRPC(data as ArrayBuffer);\n          if (obj && obj.type === type) {\n            if (obj.id === transactionId) {\n              observer.execute(decode(data as ArrayBuffer));\n              unSubscribe();\n            }\n          }\n        }\n      }\n    );\n    return observer;\n  };\n\n  createOffer = async () => {\n    this.peer.makeOffer();\n    const offer = await this.peer.onSignal.asPromise();\n    await new Promise(r => setTimeout(r, 0));\n    return offer;\n  };\n\n  setOffer = async (offer: Signal) => {\n    this.peer.setSdp(offer);\n    const answer = await this.peer.onSignal.asPromise();\n    await new Promise(r => setTimeout(r, 0));\n    return answer;\n  };\n\n  setAnswer = async (answer: Signal) => {\n    this.peer.setSdp(answer);\n    const err = await this.peer.onConnect\n      .asPromise(timeout)\n      .catch(e => new Error(e));\n    if (err) this.onConnect.error(err);\n    return err;\n  };\n\n  disconnect = () => {\n    this.peer.hangUp();\n  };\n}\n"]}