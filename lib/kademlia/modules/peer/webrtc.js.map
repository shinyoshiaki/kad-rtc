{"version":3,"file":"webrtc.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/webrtc.ts"],"names":[],"mappings":"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","sourcesContent":["import Base, { RPC } from \"./base\";\nimport Event from \"rx.mini\";\nimport WebRTC from \"../../../webrtc\";\nimport * as bson from \"bson\";\n\nexport const PeerModule = (kid: string) => new Peer(kid);\n\nexport default class Peer implements Base {\n  private type = \"webrtc\";\n  private peer: WebRTC = new WebRTC({ disable_stun: true });\n  onRpc = new Event<RPC>();\n  onDisconnect = this.peer.onDisconnect as any;\n  onConnect = new Event<boolean>();\n\n  constructor(public kid: string) {\n    this.peer.nodeId = kid;\n    this.peer.onConnect.once(() => {\n      this.onConnect.execute(true);\n    });\n    const onData = this.peer.onData.subscribe(raw => {\n      try {\n        if (raw.label == \"datachannel\") {\n          const data = this.parseRPC(raw.data);\n          if (data) this.onRpc.execute(data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    this.peer.onDisconnect.once(() => {\n      onData.unSubscribe();\n    });\n  }\n\n  parseRPC = (data: ArrayBuffer) => {\n    const buffer = Buffer.from(data);\n    try {\n      const data: RPC = bson.deserialize(buffer);\n      if (data.rpc) {\n        return data;\n      }\n    } catch (error) {\n      console.error(error, buffer);\n    }\n    return undefined;\n  };\n\n  rpc = (send: RPC) => {\n    const packet = bson.serialize(send);\n    this.peer.send(packet);\n  };\n\n  eventRpc = (rpc: string, id: string) => {\n    const observer = new Event<any>();\n    const onData = this.peer.onData.subscribe(raw => {\n      const data = this.parseRPC(raw.data);\n      if (data && data.rpc === rpc) {\n        if (data.id === id) {\n          observer.execute(data);\n          onData.unSubscribe();\n        }\n      }\n    });\n    return observer;\n  };\n\n  createOffer = async () => {\n    this.peer.makeOffer();\n    const offer = await this.peer.onSignal.asPromise();\n    await new Promise(r => setTimeout(r, 0));\n    return offer;\n  };\n\n  setOffer = async (offer: any) => {\n    this.peer.setSdp(offer);\n    const answer = await this.peer.onSignal.asPromise();\n    await new Promise(r => setTimeout(r, 0));\n    return answer;\n  };\n\n  setAnswer = async (answer: any) => {\n    this.peer.setSdp(answer);\n    await this.peer.onConnect.asPromise();\n    return true;\n  };\n\n  disconnect = () => {\n    this.peer.hangUp();\n  };\n}\n"]}