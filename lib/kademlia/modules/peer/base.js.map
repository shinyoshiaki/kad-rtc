{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/base.ts"],"names":[],"mappings":";;;AAAA,8DAA4B;AAe5B,MAAM,SAAS;IACb,YAAmB,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;IAAG,CAAC;CACnC;AAmBD,MAAa,QAAQ;IAMnB,YAAmB,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;QAL9B,SAAI,GAAG,MAAM,CAAC;QACd,UAAK,GAAG,IAAI,iBAAK,EAAO,CAAC;QACzB,iBAAY,GAAG,IAAI,iBAAK,EAAE,CAAC;QAC3B,cAAS,GAAG,IAAI,iBAAK,EAAE,CAAC;QAIxB,QAAG,GAAG,CAAC,IAAkC,EAAE,EAAE,GAAE,CAAC,CAAC;QAEjD,aAAQ,GAAG,CAAC,IAAiB,EAAE,EAAE,CAAC,SAAgB,CAAC;QAEnD,aAAQ,GAAG,CAA6B,GAAc,EAAE,EAAU,EAAE,EAAE,CACpE,IAAI,iBAAK,EAAK,CAAC;QAEjB,gBAAW,GAAG,GAAS,EAAE,wDAAC,OAAA,IAAW,CAAA,GAAA,CAAC;QAEtC,aAAQ,GAAG,CAAO,GAAW,EAAE,EAAE,wDAAC,OAAA,IAAW,CAAA,GAAA,CAAC;QAE9C,cAAS,GAAG,CAAO,GAAW,EAAE,EAAE,wDAAC,OAAA,IAAW,CAAA,GAAA,CAAC;QAE/C,eAAU,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;IAfW,CAAC;CAgBnC;AAtBD,4BAsBC","sourcesContent":["import Event from \"rx.mini\";\nimport { Signal } from \"webrtc4me\";\n\nexport type ID = { id: string };\n\nexport type RPCBase = { type: string };\n\nexport type RPC = {\n  type: string;\n  [key: string]: string | Buffer | ArrayBuffer;\n  id: string;\n};\n\nexport type Peer = PeerClass & PeerProps;\n\nclass PeerClass {\n  constructor(public kid: string) {}\n}\n\ntype PeerProps = {\n  type: string;\n  onRpc: Event<RPCBase & ID>;\n  onDisconnect: Event;\n  onConnect: Event;\n  parseRPC: (data: ArrayBuffer) => RPC | undefined;\n  rpc: (data: RPCBase & ID & { [key: string]: unknown }) => void;\n  eventRpc: <T extends { type: string }>(\n    rpc: T[\"type\"],\n    id: string\n  ) => Event<T>;\n  createOffer: () => Promise<Signal>;\n  setOffer: (sdp: Signal) => Promise<Signal>;\n  setAnswer: (sdp: Signal) => Promise<Error | undefined>;\n  disconnect: () => void;\n};\n\nexport class PeerMock implements Peer {\n  type = \"mock\";\n  onRpc = new Event<any>();\n  onDisconnect = new Event();\n  onConnect = new Event();\n\n  constructor(public kid: string) {}\n\n  rpc = (data: { type: string; id: string }) => {};\n\n  parseRPC = (data: ArrayBuffer) => undefined as any;\n\n  eventRpc = <T extends { type: string }>(rpc: T[\"type\"], id: string) =>\n    new Event<T>();\n\n  createOffer = async () => null as any;\n\n  setOffer = async (sdp: Signal) => null as any;\n\n  setAnswer = async (sdp: Signal) => null as any;\n\n  disconnect = () => {};\n}\n"]}