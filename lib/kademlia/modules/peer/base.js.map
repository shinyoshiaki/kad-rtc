{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/base.ts"],"names":[],"mappings":"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","sourcesContent":["import Event from \"rx.mini\";\nimport { Signal } from \"webrtc4me\";\n\nexport type ID = { id: string };\n\nexport type RPCBase = { type: string };\n\nexport type RPC = {\n  type: string;\n  [key: string]: string | Buffer | ArrayBuffer;\n  id: string;\n};\n\nexport type Peer = PeerClass & PeerProps;\n\nclass PeerClass {\n  constructor(public kid: string) {}\n}\n\ntype PeerProps = {\n  type: string;\n  SdpType: \"offer\" | \"answer\" | undefined;\n  onRpc: Event<RPCBase & ID>;\n  onDisconnect: Event;\n  onConnect: Event;\n  parseRPC: (data: ArrayBuffer) => RPC | undefined;\n  rpc: (data: RPCBase & ID & { [key: string]: unknown }) => void;\n  eventRpc: <T extends { type: string }>(\n    rpc: T[\"type\"],\n    id: string\n  ) => Event<T>;\n  createOffer: () => Promise<Signal>;\n  setOffer: (sdp: Signal) => Promise<Signal>;\n  setAnswer: (sdp: Signal) => Promise<Error | undefined>;\n  disconnect: () => void;\n};\n\nexport class PeerMock implements Peer {\n  type = \"mock\";\n  onData = new Event<RPC>();\n  SdpType: \"offer\" | \"answer\" | undefined = undefined;\n\n  onRpc = new Event<any>();\n  onDisconnect = new Event();\n  onConnect = new Event();\n  targetContext?: PeerMock;\n\n  constructor(public kid: string) {\n    this.onData.subscribe(data => {\n      try {\n        if (data.type) {\n          this.onRpc.execute(data);\n        }\n      } catch (error) {}\n    });\n  }\n\n  rpc = async (data: { type: string; id: string }) => {\n    await new Promise(r => setTimeout(r));\n    this.targetContext!.onData.execute(data);\n  };\n\n  parseRPC = (data: ArrayBuffer) => undefined as any;\n\n  eventRpc = (type: string, id: string) => {\n    const observer = new Event<any>();\n    const { unSubscribe } = this.onData.subscribe(data => {\n      if (data.type === type && data.id === id) {\n        observer.execute(data);\n        unSubscribe();\n      }\n    });\n    return observer;\n  };\n\n  createOffer = async () => {\n    this.SdpType = \"offer\";\n    return this as any;\n  };\n\n  setOffer = async (sdp: any) => {\n    this.SdpType = \"answer\";\n    this.targetContext = sdp as PeerMock;\n    return this as any;\n  };\n\n  setAnswer = async (sdp: any) => {\n    const { onConnect } = sdp as PeerMock;\n    this.targetContext = sdp;\n\n    await new Promise(r => setTimeout(r, 0));\n\n    onConnect.execute(null);\n    this.onConnect.execute(null);\n\n    return undefined;\n  };\n\n  disconnect = () => {\n    const { onDisconnect, onData } = this.targetContext!;\n\n    onDisconnect.execute(null);\n    this.onDisconnect.execute(null);\n\n    onData.allUnsubscribe();\n    this.onData.allUnsubscribe();\n  };\n}\n"]}