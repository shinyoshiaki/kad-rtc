{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/modules/peer/index.ts"],"names":[],"mappings":";;;AAAA,uEAAyC;AAE5B,QAAA,UAAU,GAAG,UAAC,GAAW,IAAK,OAAA,IAAI,IAAI,CAAC,GAAG,CAAC,EAAb,CAAa,CAAC;AAEzD;IAKE,cAAmB,GAAW;QAA9B,iBAAkC;QAAf,QAAG,GAAH,GAAG,CAAQ;QAJ9B,UAAK,GAAG,IAAI,eAAK,EAAO,CAAC;QACzB,iBAAY,GAAG,IAAI,eAAK,EAAE,CAAC;QAC3B,cAAS,GAAG,IAAI,eAAK,EAAE,CAAC;QAIxB,QAAG,GAAG,UAAC,IAAqB,IAAK,OAAA,IAAI,eAAK,EAAO,EAAhB,CAAgB,CAAC;QAElD,gBAAW,GAAG;;iBAA4B,CAAC;QAE3C,aAAQ,GAAG,UAAO,GAAQ;;iBAAqB,CAAC;QAEhD,cAAS,GAAG,UAAO,GAAQ;;iBAAqB,CAAC;QAEjD,eAAU,GAAG,cAAO,CAAC,CAAC;IAVW,CAAC;IAWpC,WAAC;AAAD,CAAC,AAhBD,IAgBC","sourcesContent":["import Event from \"../../../utill/event\";\n\nexport const PeerModule = (kid: string) => new Peer(kid);\n\nexport default class Peer {\n  onRpc = new Event<any>();\n  onDisconnect = new Event();\n  onConnect = new Event();\n\n  constructor(public kid: string) {}\n\n  rpc = (data: { rpc: string }) => new Event<any>();\n\n  createOffer = async (): Promise<any> => {};\n\n  setOffer = async (sdp: any): Promise<any> => {};\n\n  setAnswer = async (sdp: any): Promise<any> => {};\n\n  disconnect = () => {};\n}\n"]}