{"version":3,"file":"kademlia.js","sourceRoot":"","sources":["../../src/kademlia/kademlia.ts"],"names":[],"mappings":";;;AAAA,6BAAgE;AAKhE,0EAA0C;AAC1C,4EAA4C;AAC5C,2CAAwC;AACxC,wDAAwB;AACxB,oEAAoC;AAGpC,MAAM,cAAc,GAAsB,EAAE,OAAO,EAAE,KAAM,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;AAE/E,MAAqB,QAAQ;IAG3B,YACS,GAAW,EAClB,OAAgB,EAChB,MAAe,EAAE,OAAO,EAAE,KAAK,EAAE;QAF1B,QAAG,GAAH,GAAG,CAAQ;QAQpB,aAAQ,GAAG,CAAO,SAAiB,EAAE,EAAE;YACrC,IAAI,MAA0B,CAAC;YAE/B,KACE,IAAI,GAAG,GAAG,EAAE,EACZ,GAAG,KAAK,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EACzC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EACvC;gBACA,MAAM,GAAG,MAAM,kBAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC5C,IAAI,MAAM;oBAAE,MAAM;aACnB;YAED,OAAO,MAAM,CAAC;QAChB,CAAC,CAAA,CAAC;QAEF,UAAK,GAAG,CAAO,KAA2B,EAAE,GAAY,EAAE,EAAE;YAC1D,MAAM,GAAG,GACP,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACrE,MAAM,GAAG,GAAG,MAAM,eAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YAClD,OAAO,GAAG,CAAC;QACb,CAAC,CAAA,CAAC;QAEF,cAAS,GAAG,CAAO,GAAW,EAAE,GAAgC,EAAE,EAAE;YAClE,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC;YAChC,MAAM,GAAG,GAAG,MAAM,mBAAS,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAC/C,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE;gBACnB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;aAClD;YACD,OAAO,GAAG,CAAC;QACb,CAAC,CAAA,CAAC;QAEF,QAAG,GAAG,CAAC,OAAa,EAAE,EAAE;YACtB,qBAAS,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC,CAAC;QArCA,GAAG,mCAAQ,cAAc,GAAK,GAAG,CAAE,CAAC;QACpC,IAAI,CAAC,EAAE,GAAG,wBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC;IAqCD,OAAO;QACL,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACrD,CAAC;CACF;AApDD,2BAoDC","sourcesContent":["import { DependencyInjection, dependencyInjection } from \"./di\";\n\nimport { Modules } from \"./modules\";\nimport { Option as OptTable } from \"./ktable\";\nimport { Peer } from \"./modules/peer/base\";\nimport findNode from \"./actions/findnode\";\nimport findValue from \"./actions/findvalue\";\nimport { listeners } from \"./listeners\";\nimport sha1 from \"sha1\";\nimport store from \"./actions/store\";\n\nexport type Options = Partial<OptTable> & { timeout?: number };\nconst initialOptions: Required<Options> = { timeout: 10_000, kBucketSize: 20 };\n\nexport default class Kademlia {\n  di: DependencyInjection;\n\n  constructor(\n    public kid: string,\n    modules: Modules,\n    opt: Options = { timeout: 10000 }\n  ) {\n    opt = { ...initialOptions, ...opt };\n    this.di = dependencyInjection(kid, modules, opt);\n  }\n\n  findNode = async (searchKid: string) => {\n    let target: Peer[] | undefined;\n\n    for (\n      let pre = \"\";\n      pre !== this.di.kTable.getHash(searchKid);\n      pre = this.di.kTable.getHash(searchKid)\n    ) {\n      target = await findNode(searchKid, this.di);\n      if (target) break;\n    }\n\n    return target;\n  };\n\n  store = async (value: string | ArrayBuffer, msg?: string) => {\n    const key =\n      typeof value === \"string\" ? sha1(value) : sha1(Buffer.from(value));\n    const res = await store(this.di, key, value, msg);\n    return res;\n  };\n\n  findValue = async (key: string, opt?: { preferTimeout?: number }) => {\n    const { kvs } = this.di.modules;\n    const res = await findValue(key, this.di, opt);\n    if (res && res.item) {\n      kvs.set(key, res.item.value, res.item.msg || \"\");\n    }\n    return res;\n  };\n\n  add = (connect: Peer) => {\n    listeners(connect, this.di);\n  };\n\n  dispose() {\n    const { kTable } = this.di;\n\n    kTable.allPeers.forEach(peer => peer.disconnect());\n  }\n}\n"]}