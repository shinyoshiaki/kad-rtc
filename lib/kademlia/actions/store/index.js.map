{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/store/index.ts"],"names":[],"mappings":";;;AAAA,mEAAmC;AAGnC,uCAAsC;AAEtC,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,KAA2B,EAAE,EAAE;IACzD,OAAO,EAAE,GAAG,EAAE,OAAgB,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;AAC/C,CAAC,CAAC;AAIF,SAA8B,KAAK,CACjC,GAAW,EACX,KAA2B,EAC3B,EAAuB;;QAEvB,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;QAC7C,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC;QAE3B,KACE,IAAI,OAAO,GAAG,EAAE,EAChB,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC/B,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC7B;YACA,MAAM,kBAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SACzB;QAED,MAAM,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAG,CAAO,IAAU,EAAE,EAAE;YACnC,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;YACzD,MAAM,IAAI,CAAC,eAAO,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACtC,CAAC,CAAA,CAAC;QAEF,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,GAAG,CAAC,CAAM,IAAI,EAAC,EAAE,wDAAC,OAAA,MAAM,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA,GAAA,CAAC,CAC9D,CAAC;QAEF,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC;IACb,CAAC;CAAA;AA7BD,wBA6BC","sourcesContent":["import findNode from \"../findnode\";\nimport { DependencyInjection } from \"../../di\";\nimport Peer from \"../../modules/peer/base\";\nimport { timeout } from \"../../const\";\n\nconst Store = (key: string, value: string | ArrayBuffer) => {\n  return { rpc: \"store\" as const, key, value };\n};\n\nexport type Store = ReturnType<typeof Store>;\n\nexport default async function store(\n  key: string,\n  value: string | ArrayBuffer,\n  di: DependencyInjection\n) {\n  const { kTable, rpcManager, jobSystem } = di;\n  const { kvs } = di.modules;\n\n  for (\n    let preHash = \"\";\n    preHash !== kTable.getHash(key);\n    preHash = kTable.getHash(key)\n  ) {\n    await findNode(key, di);\n  }\n\n  const peers = di.kTable.findNode(key);\n\n  const onStore = async (peer: Peer) => {\n    const wait = rpcManager.getWait(peer, Store(key, value));\n    await wait(timeout).catch(() => {});\n  };\n\n  await Promise.all(\n    peers.map(async peer => await jobSystem.add(onStore, [peer]))\n  );\n\n  kvs.set(key, value);\n  return key;\n}\n"]}