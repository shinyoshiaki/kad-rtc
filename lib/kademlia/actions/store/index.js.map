{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/store/index.ts"],"names":[],"mappings":";;;AAAA,mEAAmC;AACnC,wDAAwB;AAKxB,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,KAAa,EAAE,EAAE;IAC3C,OAAO,EAAE,GAAG,EAAE,OAAgB,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;AAC/C,CAAC,CAAC;AAIF,SAA8B,KAAK,CAAC,KAAa,EAAE,EAAuB;;QACxE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;QACtB,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC;QAE3B,MAAM,GAAG,GAAG,cAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;QACnC,KACE,IAAI,OAAO,GAAG,EAAE,EAChB,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC/B,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC7B;YACA,MAAM,kBAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SACzB;QAED,MAAM,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAG,CAAO,IAAU,EAAE,EAAE;YACnC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI;iBACP,QAAQ,CAAU,SAAS,CAAC;iBAC5B,SAAS,CAAC,IAAI,CAAC;iBACf,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAA,CAAC;QAEF,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpD,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC;IACb,CAAC;CAAA;AA3BD,wBA2BC","sourcesContent":["import findNode from \"../findnode\";\nimport sha1 from \"sha1\";\nimport { DependencyInjection } from \"../../di\";\nimport { OnStore } from \"./listen\";\nimport Peer from \"../../modules/peer/base\";\n\nconst Store = (key: string, value: string) => {\n  return { rpc: \"store\" as const, key, value };\n};\n\nexport type Store = ReturnType<typeof Store>;\n\nexport default async function store(value: string, di: DependencyInjection) {\n  const { kTable } = di;\n  const { kvs } = di.modules;\n\n  const key = sha1(value).toString();\n  for (\n    let preHash = \"\";\n    preHash !== kTable.getHash(key);\n    preHash = kTable.getHash(key)\n  ) {\n    await findNode(key, di);\n  }\n\n  const peers = di.kTable.findNode(key);\n\n  const onStore = async (peer: Peer) => {\n    peer.rpc(Store(key, value));\n    await peer\n      .eventRpc<OnStore>(\"OnStore\")\n      .asPromise(3333)\n      .catch(console.error);\n  };\n\n  await Promise.all(peers.map(peer => onStore(peer)));\n\n  kvs.set(key, value);\n  return key;\n}\n"]}