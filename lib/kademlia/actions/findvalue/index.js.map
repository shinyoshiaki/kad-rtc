{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findvalue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DependencyInjection } from \"../../di\";\nimport { FindValueResult, Offer } from \"./listen/proxy\";\nimport { listeners } from \"../../listeners\";\nimport Peer from \"../../modules/peer/base\";\n\nconst FindValue = (key: string, except: string[]) => {\n  return { rpc: \"FindValue\" as const, key, except };\n};\n\nexport type FindValue = ReturnType<typeof FindValue>;\n\nconst FindValueAnswer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindValueAnswer\" as const, sdp, peerkid };\n};\n\nexport type FindValueAnswer = ReturnType<typeof FindValueAnswer>;\n\nexport default async function findValue(key: string, di: DependencyInjection) {\n  const { kTable } = di;\n  const { peerCreate } = di.modules;\n\n  let result: string | undefined;\n\n  const findValueAnswer = async (offer: Offer, peer: Peer) => {\n    const { peerkid, sdp } = offer;\n    const connect = peerCreate(peerkid);\n    const answer = await connect.setOffer(sdp);\n\n    peer.rpc(FindValueAnswer(answer, peerkid));\n    const res = await connect.onConnect.asPromise(3333).catch(console.error);\n    if (res) {\n      kTable.add(connect);\n      listeners(connect, di);\n    }\n  };\n\n  const findValueResult = async (peer: Peer) => {\n    const except = kTable.allPeers.map(item => item.kid);\n    peer.rpc(FindValue(key, except));\n\n    const res = await peer\n      .eventRpc<FindValueResult>(\"FindValueResult\")\n      .asPromise(3333)\n      .catch(console.error);\n\n    if (res) {\n      const { value, offers } = res.data;\n      if (value) {\n        result = value;\n      } else if (offers) {\n        if (offers.length > 0) {\n          return { offers, peer };\n        }\n      }\n    }\n    return { offers: [], peer };\n  };\n\n  const job = async () => {\n    const findValueResultResult = await Promise.all(\n      kTable.allPeers.map(peer => findValueResult(peer))\n    );\n    await Promise.all(\n      findValueResultResult\n        .map(item =>\n          item.offers.map(offer => findValueAnswer(offer, item.peer))\n        )\n        .flatMap(v => v)\n    );\n  };\n\n  for (\n    let preHash = \"\";\n    preHash !== kTable.getHash(key);\n    preHash = kTable.getHash(key)\n  ) {\n    await job();\n    if (result) break;\n  }\n\n  return result;\n}\n"]}