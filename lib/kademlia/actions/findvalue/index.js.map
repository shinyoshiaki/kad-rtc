{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findvalue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindValueResult, Offer } from \"./listen/node\";\n\nimport { DependencyInjection } from \"../../di\";\nimport { Item } from \"../../modules/kvs/base\";\nimport { Peer } from \"../../modules/peer/base\";\nimport { listeners } from \"../../listeners\";\nimport { timeout } from \"../../const\";\n\nexport default async function findValue(\n  key: string,\n  di: DependencyInjection\n): Promise<{ item: Item; peer: Peer } | undefined> {\n  const { kTable, rpcManager, signaling } = di;\n\n  let result: { item: Item; peer: Peer } | undefined;\n\n  const job = async () => {\n    const findValueResultResult = await Promise.all(\n      kTable.allPeers.map(async proxy => {\n        const except = kTable.allPeers.map(item => item.kid);\n\n        const wait = rpcManager.getWait<FindValueResult>(\n          proxy,\n          FindValue(key, except)\n        );\n        const res = await wait(timeout).catch(console.warn);\n\n        if (res) {\n          const { item, offers } = res.data;\n\n          if (item && !result) {\n            result = { item, peer: proxy };\n            return { offers: [], proxy };\n          } else if (offers) {\n            if (offers.length > 0) {\n              return { offers, proxy };\n            }\n          }\n        }\n\n        return { offers: [], proxy };\n      })\n    );\n\n    if (!result) {\n      const findValueAnswer = async (offer: Offer, proxy: Peer) => {\n        const { peerkid, sdp } = offer;\n        const { peer, candidate } = signaling.create(peerkid);\n\n        if (peer) {\n          const answer = await peer.setOffer(JSON.parse(sdp));\n\n          rpcManager.run(\n            proxy,\n            FindValueAnswer(JSON.stringify(answer), peerkid)\n          );\n\n          const err = await peer.onConnect\n            .asPromise(timeout)\n            .catch(() => \"err\");\n          if (err) {\n            signaling.delete(peerkid);\n          } else {\n            listeners(peer, di);\n          }\n        } else if (candidate) {\n          const peer = await candidate.asPromise(timeout).catch(() => {});\n          if (peer) listeners(peer, di);\n        }\n      };\n\n      await Promise.all(\n        findValueResultResult\n          .map(v => v.offers.map(offer => findValueAnswer(offer, v.proxy)))\n          .flatMap(v => v)\n      );\n    }\n  };\n\n  for (\n    let preHash = \"\";\n    preHash !== kTable.getHash(key);\n    preHash = kTable.getHash(key)\n  ) {\n    await job();\n    if (result) break;\n  }\n\n  return result;\n}\n\nconst FindValue = (key: string, except: string[]) => ({\n  type: \"FindValue\" as const,\n  key,\n  except\n});\n\nexport type FindValue = ReturnType<typeof FindValue>;\n\nconst FindValueAnswer = (sdp: string, peerkid: string) => ({\n  type: \"FindValueAnswer\" as const,\n  sdp,\n  peerkid\n});\n\nexport type FindValueAnswer = ReturnType<typeof FindValueAnswer>;\n"]}