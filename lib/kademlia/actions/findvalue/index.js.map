{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findvalue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DependencyInjection } from \"../../di\";\nimport { FindValueResult, Offer } from \"./listen/proxy\";\nimport { listeners } from \"../../listeners\";\nimport Peer from \"../../modules/peer/base\";\nimport { timeout } from \"../../const\";\nimport { Item } from \"../../modules/kvs/base\";\n\nconst FindValue = (key: string, except: string[]) => {\n  return { rpc: \"FindValue\" as const, key, except };\n};\n\nexport type FindValue = ReturnType<typeof FindValue>;\n\nconst FindValueAnswer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindValueAnswer\" as const, sdp, peerkid };\n};\n\nexport type FindValueAnswer = ReturnType<typeof FindValueAnswer>;\n\nexport default async function findValue(key: string, di: DependencyInjection) {\n  const { kTable, rpcManager, signaling, modules } = di;\n  const { kvs } = modules;\n\n  let result: Item | undefined;\n\n  const findValueProxy = async (proxy: Peer) => {\n    const except = kTable.allPeers.map(item => item.kid);\n\n    const wait = rpcManager.getWait<FindValueResult>(\n      proxy,\n      FindValue(key, except)\n    );\n    const res = await wait(timeout).catch(e => {\n      console.warn(e);\n    });\n\n    if (res) {\n      const { item, offers } = res.data;\n\n      if (item && !result) {\n        result = item;\n        return { offers: [], proxy };\n      } else if (offers) {\n        if (offers.length > 0) {\n          return { offers, proxy };\n        }\n      }\n    } else {\n      kTable.rmPeer(proxy.kid);\n    }\n\n    return { offers: [], proxy };\n  };\n\n  const findValueAnswer = async (offer: Offer, proxy: Peer) => {\n    const { peerkid, sdp } = offer;\n\n    const { peer, candidate } = signaling.create(peerkid);\n\n    if (peer) {\n      const answer = await peer.setOffer(sdp);\n\n      rpcManager.run(proxy, FindValueAnswer(answer, peerkid));\n\n      const res = await peer.onConnect.asPromise(timeout).catch(() => {\n        signaling.delete(peerkid);\n      });\n      if (res) listeners(peer, di);\n    } else if (candidate) {\n      const peer = await candidate.asPromise(timeout).catch(() => {});\n      if (peer) listeners(peer, di);\n    }\n  };\n\n  const job = async () => {\n    const findValueResultResult = await Promise.all(\n      kTable.allPeers.map(peer => findValueProxy(peer))\n    );\n    if (!result) {\n      await Promise.all(\n        findValueResultResult\n          .map(v => v.offers.map(offer => findValueAnswer(offer, v.proxy)))\n          .flatMap(v => v)\n      );\n    }\n  };\n\n  if (kvs.get(key)) return kvs.get(key);\n\n  for (\n    let preHash = \"\";\n    preHash !== kTable.getHash(key);\n    preHash = kTable.getHash(key)\n  ) {\n    await job();\n    if (result) break;\n  }\n\n  return result;\n}\n"]}