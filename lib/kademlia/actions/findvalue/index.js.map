{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findvalue/index.ts"],"names":[],"mappings":";;;AAEA,+CAA4C;AAE5C,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,MAAgB,EAAE,EAAE;IAClD,OAAO,EAAE,GAAG,EAAE,WAAoB,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;AACpD,CAAC,CAAC;AAIF,MAAM,eAAe,GAAG,CAAC,GAAQ,EAAE,OAAe,EAAE,EAAE;IACpD,OAAO,EAAE,GAAG,EAAE,iBAA0B,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;AAC3D,CAAC,CAAC;AAIF,SAA8B,SAAS,CAAC,GAAW,EAAE,EAAuB;;QAC1E,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;QACtB,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC;QAElC,IAAI,MAA0B,CAAC;QAE/B,GAAG,EAAE,KACH,IAAI,OAAO,GAAG,EAAE,EAChB,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC/B,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC7B;YACA,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAChC,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACrD,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;gBAEjC,MAAM,GAAG,GAAG,MAAM,IAAI;qBACnB,QAAQ,CAAkB,iBAAiB,CAAC;qBAC5C,SAAS,EAAE,CAAC;gBAEf,IAAI,CAAC,GAAG,EAAE;oBACR,SAAS;iBACV;gBAED,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;gBACnC,IAAI,KAAK,EAAE;oBACT,MAAM,GAAG,KAAK,CAAC;oBACf,MAAM,GAAG,CAAC;iBACX;qBAAM,IAAI,MAAM,EAAE;oBACjB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;wBAAE,SAAS;oBAElC,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;wBACxB,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;wBAC/B,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;wBACpC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAE3C,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;wBAC3C,MAAM,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;wBAEpC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBACpB,qBAAS,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;qBACxB;iBACF;aACF;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AA9CD,4BA8CC","sourcesContent":["import { DependencyInjection } from \"../../di\";\nimport { FindValueResult } from \"./listen/proxy\";\nimport { listeners } from \"../../listeners\";\n\nconst FindValue = (key: string, except: string[]) => {\n  return { rpc: \"FindValue\" as const, key, except };\n};\n\nexport type FindValue = ReturnType<typeof FindValue>;\n\nconst FindValueAnswer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindValueAnswer\" as const, sdp, peerkid };\n};\n\nexport type FindValueAnswer = ReturnType<typeof FindValueAnswer>;\n\nexport default async function findValue(key: string, di: DependencyInjection) {\n  const { kTable } = di;\n  const { peerCreate } = di.modules;\n\n  let result: string | undefined;\n\n  job: for (\n    let preHash = \"\";\n    preHash !== kTable.getHash(key);\n    preHash = kTable.getHash(key)\n  ) {\n    for (let peer of kTable.allPeers) {\n      const except = kTable.allPeers.map(item => item.kid);\n      peer.rpc(FindValue(key, except));\n\n      const res = await peer\n        .eventRpc<FindValueResult>(\"FindValueResult\")\n        .asPromise();\n\n      if (!res) {\n        continue;\n      }\n\n      const { value, offers } = res.data;\n      if (value) {\n        result = value;\n        break job;\n      } else if (offers) {\n        if (offers.length === 0) continue;\n\n        for (let offer of offers) {\n          const { peerkid, sdp } = offer;\n          const connect = peerCreate(peerkid);\n          const answer = await connect.setOffer(sdp);\n\n          peer.rpc(FindValueAnswer(answer, peerkid));\n          await connect.onConnect.asPromise();\n\n          kTable.add(connect);\n          listeners(connect, di);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n"]}