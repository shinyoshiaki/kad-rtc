{"version":3,"file":"peer.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findvalue/listen/peer.ts"],"names":[],"mappings":";;;AAEA,kDAA+C;AAI/C,MAAM,kBAAkB,GAAG,CAAC,OAAe,EAAE,GAAY,EAAE,EAAE;IAC3D,OAAO,EAAE,GAAG,EAAE,oBAA6B,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;AAC9D,CAAC,CAAC;AAMF,MAAqB,aAAa;IAGhC,YAAoB,MAAY,EAAU,EAAuB;QAA7C,WAAM,GAAN,MAAM,CAAM;QAAU,OAAE,GAAF,EAAE,CAAqB;QAFjE,eAAU,GAA4B,EAAE,CAAC;QAGvC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAa,EAAE,EAAE;YACrD,QAAQ,IAAI,CAAC,GAAG,EAAE;gBAChB,KAAK,oBAAoB;oBACvB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBAC9B,MAAM;gBACR,KAAK,sBAAsB;oBACzB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oBAChC,MAAM;aACT;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;IACtD,CAAC;IAEK,kBAAkB,CAAC,IAA6B;;YACpD,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACnB,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YAEtC,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAE7C,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBAElC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;gBAEvC,IAAI,CAAC,MAAM,CAAC,GAAG,mBAAM,kBAAkB,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAE,EAAE,IAAG,CAAC;aACnE;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,GAAG,mBAAM,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,IAAE,EAAE,IAAG,CAAC;aAC5D;QACH,CAAC;KAAA;IAEK,oBAAoB,CAAC,IAA0B;;YACnD,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YAEhC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAE1B,qBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC;KAAA;CACF;AA7CD,gCA6CC","sourcesContent":["import Peer from \"../../../modules/peer/base\";\nimport { DependencyInjection } from \"../../../di\";\nimport { listeners } from \"../../../listeners\";\nimport { FindValueProxyOpen, FindValueProxyAnswer } from \"./proxy\";\nimport { ID } from \"../../../services/rpcmanager\";\n\nconst FindValuePeerOffer = (peerkid: string, sdp?: object) => {\n  return { rpc: \"FindValuePeerOffer\" as const, sdp, peerkid };\n};\n\nexport type FindValuePeerOffer = ReturnType<typeof FindValuePeerOffer>;\n\ntype actions = (FindValueProxyOpen | FindValueProxyAnswer) & ID;\n\nexport default class FindValuePeer {\n  candidates: { [key: string]: Peer } = {};\n\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const onRpc = listen.onRpc.subscribe((data: actions) => {\n      switch (data.rpc) {\n        case \"FindValueProxyOpen\":\n          this.findValueProxyOpen(data);\n          break;\n        case \"FindValueProxyAnswer\":\n          this.findValueProxyAnswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => onRpc.unSubscribe());\n  }\n\n  async findValueProxyOpen(data: FindValueProxyOpen & ID) {\n    const { finderkid } = data;\n    const id = data.id;\n    const { kTable, signaling } = this.di;\n\n    const { peer } = signaling.create(finderkid);\n\n    if (peer) {\n      this.candidates[finderkid] = peer;\n\n      const offer = await peer.createOffer();\n\n      this.listen.rpc({ ...FindValuePeerOffer(kTable.kid, offer), id });\n    } else {\n      this.listen.rpc({ ...FindValuePeerOffer(kTable.kid), id });\n    }\n  }\n\n  async findValueProxyAnswer(data: FindValueProxyAnswer) {\n    const { finderkid, sdp } = data;\n\n    const peer = this.candidates[finderkid];\n    if (!peer) return;\n    await peer.setAnswer(sdp);\n\n    listeners(peer, this.di);\n  }\n}\n"]}