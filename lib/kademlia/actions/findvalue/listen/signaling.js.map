{"version":3,"file":"signaling.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findvalue/listen/signaling.ts"],"names":[],"mappings":";;;AAKA,kDAA+C;AAE/C,MAAqB,aAAa;IAGhC,YAAoB,MAAY,EAAU,EAAuB;QAA7C,WAAM,GAAN,MAAM,CAAM;QAAU,OAAE,GAAF,EAAE,CAAqB;QAFjE,eAAU,GAA4B,EAAE,CAAC;QAczC,uBAAkB,GAAG,CAAO,IAA6B,EAAE,EAAE;YAC3D,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACtC,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YAE/B,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAE7C,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBAElC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;gBAEvC,IAAI,CAAC,MAAM,CAAC,GAAG,iCACV,kBAAkB,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,KACxC,EAAE,IACF,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,GAAG,iCAAM,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,KAAE,EAAE,IAAG,CAAC;aAC5D;QACH,CAAC,CAAA,CAAC;QAEF,yBAAoB,GAAG,CAAO,IAA0B,EAAE,EAAE;YAC1D,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YAEhC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG;gBAAE,qBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC,CAAA,CAAC;QAtCA,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;QAE1B,UAAU;aACP,YAAY,CAAqB,oBAAoB,EAAE,MAAM,CAAC;aAC9D,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEtC,UAAU;aACP,YAAY,CAAuB,sBAAsB,EAAE,MAAM,CAAC;aAClE,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC1C,CAAC;CA8BF;AA3CD,gCA2CC;AAED,MAAM,kBAAkB,GAAG,CAAC,OAAe,EAAE,GAAY,EAAE,EAAE,CAAC,CAAC;IAC7D,IAAI,EAAE,oBAA6B;IACnC,GAAG;IACH,OAAO;CACR,CAAC,CAAC","sourcesContent":["import { FindValueProxyAnswer, FindValueProxyOpen } from \"./node\";\nimport { ID, Peer } from \"../../../modules/peer/base\";\n\nimport { DependencyInjection } from \"../../../di\";\nimport { Signal } from \"webrtc4me\";\nimport { listeners } from \"../../../listeners\";\n\nexport default class FindValuePeer {\n  candidates: { [key: string]: Peer } = {};\n\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const { rpcManager } = di;\n\n    rpcManager\n      .asObservable<FindValueProxyOpen>(\"FindValueProxyOpen\", listen)\n      .subscribe(this.findValueProxyOpen);\n\n    rpcManager\n      .asObservable<FindValueProxyAnswer>(\"FindValueProxyAnswer\", listen)\n      .subscribe(this.findValueProxyAnswer);\n  }\n\n  findValueProxyOpen = async (data: FindValueProxyOpen & ID) => {\n    const { kTable, signaling } = this.di;\n    const { finderKid, id } = data;\n\n    const { peer } = signaling.create(finderKid);\n\n    if (peer) {\n      this.candidates[finderKid] = peer;\n\n      const offer = await peer.createOffer();\n\n      this.listen.rpc({\n        ...FindValuePeerOffer(kTable.kid, offer),\n        id\n      });\n    } else {\n      this.listen.rpc({ ...FindValuePeerOffer(kTable.kid), id });\n    }\n  };\n\n  findValueProxyAnswer = async (data: FindValueProxyAnswer) => {\n    const { finderKid, sdp } = data;\n\n    const peer = this.candidates[finderKid];\n    if (!peer) return;\n    const err = await peer.setAnswer(sdp);\n    if (!err) listeners(peer, this.di);\n  };\n}\n\nconst FindValuePeerOffer = (peerKid: string, sdp?: Signal) => ({\n  type: \"FindValuePeerOffer\" as const,\n  sdp,\n  peerKid\n});\n\nexport type FindValuePeerOffer = ReturnType<typeof FindValuePeerOffer>;\n"]}