{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findvalue/listen/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Peer } from \"../../../modules/peer/base\";\nimport { FindValuePeerOffer } from \"./peer\";\nimport { DependencyInjection } from \"../../../di\";\nimport { FindValue, FindValueAnswer } from \"..\";\nimport { timeout } from \"../../../const\";\nimport { Item } from \"../../../modules/kvs/base\";\nimport { ID } from \"../../../services/rpcmanager\";\n\nexport default class FindValueProxy {\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const { rpcManager } = di;\n\n    rpcManager\n      .asObservable<FindValue>(\"FindValue\", listen)\n      .subscribe(this.findvalue);\n\n    rpcManager\n      .asObservable<FindValueAnswer>(\"FindValueAnswer\", listen)\n      .subscribe(this.findValueAnswer);\n  }\n\n  findvalue = async (data: FindValue & ID) => {\n    const { kTable, rpcManager } = this.di;\n    const { key, except, id } = data;\n\n    const { kvs } = this.di.modules;\n\n    const item = kvs.get(key);\n\n    if (item) {\n      this.listen.rpc({ ...FindValueResult({ item }), id });\n    } else {\n      const peers = kTable.findNode(key);\n      const offers: { peerkid: string; sdp: string }[] = [];\n\n      await Promise.all(\n        peers.map(async peer => {\n          if (!(peer.kid === this.listen.kid || except.includes(peer.kid))) {\n            const wait = rpcManager.getWait<FindValuePeerOffer>(\n              peer,\n              FindValueProxyOpen(this.listen.kid)\n            );\n            const res = await wait(timeout).catch(() => {});\n\n            if (res) {\n              const { peerkid, sdp } = res;\n              if (sdp) offers.push({ peerkid, sdp });\n            }\n          }\n        })\n      );\n\n      this.listen.rpc({ ...FindValueResult({ offers }), id });\n    }\n  };\n\n  findValueAnswer = (data: FindValueAnswer & ID) => {\n    const { kTable } = this.di;\n    const { sdp, peerkid, id } = data;\n\n    const peer = kTable.getPeer(peerkid);\n    if (!peer) return;\n    peer.rpc({ ...FindValueProxyAnswer(sdp, this.listen.kid), id });\n  };\n}\n\nconst FindValueResult = (data: Partial<{ item: Item; offers: Offer[] }>) => ({\n  rpc: \"FindValueResult\" as const,\n  data\n});\n\nexport type Offer = { peerkid: string; sdp: string };\n\nexport type FindValueResult = ReturnType<typeof FindValueResult>;\n\nconst FindValueProxyOpen = (finderkid: string) => ({\n  rpc: \"FindValueProxyOpen\" as const,\n  finderkid\n});\n\nexport type FindValueProxyOpen = ReturnType<typeof FindValueProxyOpen>;\n\nconst FindValueProxyAnswer = (sdp: string, finderkid: string) => ({\n  rpc: \"FindValueProxyAnswer\" as const,\n  sdp,\n  finderkid\n});\n\nexport type FindValueProxyAnswer = ReturnType<typeof FindValueProxyAnswer>;\n"]}