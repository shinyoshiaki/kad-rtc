{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findvalue/test.ts"],"names":[],"mappings":";;;AAAA,6DAA6B;AAC7B,wDAAwB;AACxB,iDAA0B;AAC1B,wDAA0D;AAE1D,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,GAAG,GAAG,EAAE,CAAC;AAEf,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,GAAW,EAAE,EAAE,CAChD,IAAI,CAAC,KAAK,CACR,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CACpE,CAAC;AAEJ,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAI,CACF,WAAW,EACX,GAAS,EAAE;QACT,MAAM,KAAK,GAAG,MAAM,0BAAc,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAErD,MAAM,SAAS,GAAG,CAAO,KAAa,EAAE,EAAE;YACxC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,GAAG,GAAG,cAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,eAAK,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAChC,CAAC,CAAA,CAAC;QAEF,MAAM,SAAS,CAAC,MAAM,CAAC,CAAC;QAExB,MAAM,aAAa,GAAG,CAAO,KAAa,EAAE,EAAE;YAC5C,MAAM,GAAG,GAAG,cAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,GAAG,GAAG,MAAM,UAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAA,CAAC;QAEF,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE;YACrC,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;SAC7B;QAED,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEzC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CACxD,CAAC;IACJ,CAAC,CAAA,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import store from \"../store\";\nimport sha1 from \"sha1\";\nimport findValue from \".\";\nimport { testSetupNodes } from \"../../../utill/testtools\";\n\nconst kBucketSize = 8;\nconst num = 10;\n\nconst getRandomInt = (min: number, max: number) =>\n  Math.floor(\n    Math.random() * (Math.floor(max) - Math.ceil(min)) + Math.ceil(min)\n  );\n\ndescribe(\"findvalue\", () => {\n  test(\n    \"findvalue\",\n    async () => {\n      const nodes = await testSetupNodes(kBucketSize, num);\n\n      const testStore = async (value: string) => {\n        const node = nodes[0];\n        const key = sha1(value).toString();\n        await store(key, value, node);\n      };\n\n      await testStore(\"test\");\n\n      const testFindValue = async (value: string) => {\n        const key = sha1(value).toString();\n        const node = nodes[getRandomInt(0, nodes.length - 1)];\n        const res = await findValue(key, node);\n        expect(res).toBe(value);\n      };\n\n      for (let _ in [...Array(kBucketSize)]) {\n        await testFindValue(\"test\");\n      }\n\n      await new Promise(r => setTimeout(r, 0));\n\n      nodes.forEach(node =>\n        node.kTable.allPeers.forEach(peer => peer.disconnect())\n      );\n    },\n    1000 * 6000\n  );\n});\n"]}