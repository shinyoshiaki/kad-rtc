{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/index.ts"],"names":[],"mappings":";;;AAGA,4DAAsC;AAEtC,IAAM,QAAQ,GAAG,UAAC,SAAiB,EAAE,MAAgB;IACnD,OAAO,EAAE,GAAG,EAAE,UAAmB,EAAE,SAAS,WAAA,EAAE,MAAM,QAAA,EAAE,CAAC;AACzD,CAAC,CAAC;AAIF,IAAM,cAAc,GAAG,UAAC,GAAW,EAAE,OAAe;IAClD,OAAO,EAAE,GAAG,EAAE,gBAAyB,EAAE,GAAG,KAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AAC1D,CAAC,CAAC;AAMF,SAA8B,QAAQ,CACpC,MAA6B,EAC7B,SAAiB,EACjB,MAAc;;;;;;0BAE6B,EAA1B,KAAA,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;;;yBAA1B,CAAA,cAA0B,CAAA;oBAAlC,IAAI;oBACL,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,EAAR,CAAQ,CAAC,CAAC;oBAC/C,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;oBAE7B,qBAAM,GAAG,CAAC,SAAS,EAAE,EAAA;;oBAApC,GAAG,GAAY,SAAqB;yBACtC,CAAA,GAAG,CAAC,GAAG,KAAK,oBAAoB,CAAA,EAAhC,wBAAgC;oBAC5B,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;oBACzB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;wBAAE,wBAAS;0BAEV,EAAN,iBAAM;;;yBAAN,CAAA,oBAAM,CAAA;oBAAf,KAAK;oBACJ,OAAO,GAAU,KAAK,QAAf,EAAE,GAAG,GAAK,KAAK,IAAV,CAAW;oBACzB,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;oBACjB,qBAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAA;;oBAApC,MAAM,GAAG,SAA2B;oBAE1C,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC1C,qBAAM,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,EAAA;;oBAAnC,SAAmC,CAAC;oBAEpC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACpB,gBAAc,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;;;oBATxB,IAAM,CAAA;;;oBATX,IAA0B,CAAA;;wBAsB3C,sBAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC;;;;CAClC;AA5BD,2BA4BC","sourcesContent":["import Peer from \"../../modules/peer\";\nimport { FindNodeProxyOffer } from \"./listen/proxy\";\nimport Ktable from \"../../ktable\";\nimport listenFindnode from \"./listen\";\n\nconst FindNode = (searchkid: string, except: string[]) => {\n  return { rpc: \"findnode\" as const, searchkid, except };\n};\n\nexport type FindNode = ReturnType<typeof FindNode>;\n\nconst FindNodeAnswer = (sdp: string, peerkid: string) => {\n  return { rpc: \"findnodeanswer\" as const, sdp, peerkid };\n};\n\nexport type FindNodeAnswer = ReturnType<typeof FindNodeAnswer>;\n\ntype actions = FindNodeProxyOffer;\n\nexport default async function findNode(\n  module: (kid: string) => Peer,\n  searchkid: string,\n  ktable: Ktable\n) {\n  for (let peer of ktable.findNode(searchkid)) {\n    const except = ktable.allPeers.map(item => item.kid);\n    const rpc = peer.rpc(FindNode(searchkid, except));\n\n    const res: actions = await rpc.asPromise();\n    if (res.rpc === \"FindNodeProxyOffer\") {\n      const offers = res.peers;\n      if (offers.length === 0) continue;\n\n      for (let offer of offers) {\n        const { peerkid, sdp } = offer;\n        const connect = module(peerkid);\n        const answer = await connect.setOffer(sdp);\n\n        peer.rpc(FindNodeAnswer(answer, peerkid));\n        await connect.onConnect.asPromise();\n\n        ktable.add(connect);\n        listenFindnode(module, connect, ktable);\n      }\n    }\n  }\n  return ktable.getPeer(searchkid);\n}\n"]}