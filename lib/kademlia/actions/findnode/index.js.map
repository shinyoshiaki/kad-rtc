{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/index.ts"],"names":[],"mappings":";;;AAEA,+CAA4C;AAE5C,MAAM,QAAQ,GAAG,CAAC,SAAiB,EAAE,MAAgB,EAAE,EAAE;IACvD,OAAO,EAAE,GAAG,EAAE,UAAmB,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;AACzD,CAAC,CAAC;AAIF,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAE,OAAe,EAAE,EAAE;IACnD,OAAO,EAAE,GAAG,EAAE,gBAAyB,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;AAC1D,CAAC,CAAC;AAIF,SAA8B,QAAQ,CACpC,SAAiB,EACjB,EAAuB;;QAEvB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;QACtB,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC;QAElC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAAE,OAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAEhE,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,QAAQ,EAAE;YAChC,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;YAEtC,IAAI;gBACF,MAAM,GAAG,GAAG,MAAM,IAAI;qBACnB,QAAQ,CAAqB,oBAAoB,CAAC;qBAClD,SAAS,CAAC,IAAI,CAAC;qBACf,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAEvB,IAAI,CAAC,GAAG,EAAE;oBACR,SAAS;iBACV;gBAED,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;gBACtB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,SAAS;iBACV;gBAED,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE;oBACvB,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;oBAC/B,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;oBACpC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAE3C,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC1C,MAAM,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAE7D,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACpB,qBAAS,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;iBACxB;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACrB;SACF;QACD,OAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;CAAA;AA5CD,2BA4CC","sourcesContent":["import { FindNodeProxyOffer } from \"./listen/proxy\";\nimport { DependencyInjection } from \"../../di\";\nimport { listeners } from \"../../listeners\";\n\nconst FindNode = (searchkid: string, except: string[]) => {\n  return { rpc: \"FindNode\" as const, searchkid, except };\n};\n\nexport type FindNode = ReturnType<typeof FindNode>;\n\nconst FindNodeAnswer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindNodeAnswer\" as const, sdp, peerkid };\n};\n\nexport type FindNodeAnswer = ReturnType<typeof FindNodeAnswer>;\n\nexport default async function findNode(\n  searchkid: string,\n  di: DependencyInjection\n) {\n  const { kTable } = di;\n  const { peerCreate } = di.modules;\n\n  if (kTable.getPeer(searchkid)) return kTable.getPeer(searchkid);\n\n  for (let peer of kTable.allPeers) {\n    const except = kTable.allPeers.map(item => item.kid);\n    peer.rpc(FindNode(searchkid, except));\n\n    try {\n      const res = await peer\n        .eventRpc<FindNodeProxyOffer>(\"FindNodeProxyOffer\")\n        .asPromise(3333)\n        .catch(console.warn);\n\n      if (!res) {\n        continue;\n      }\n\n      const { peers } = res;\n      if (peers.length === 0) {\n        continue;\n      }\n\n      for (let offer of peers) {\n        const { peerkid, sdp } = offer;\n        const connect = peerCreate(peerkid);\n        const answer = await connect.setOffer(sdp);\n\n        peer.rpc(FindNodeAnswer(answer, peerkid));\n        await connect.onConnect.asPromise(3333).catch(console.error);\n\n        kTable.add(connect);\n        listeners(connect, di);\n      }\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n  return kTable.getPeer(searchkid);\n}\n"]}