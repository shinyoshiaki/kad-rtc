{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindNodeProxyOffer, Offer } from \"./listen/proxy\";\nimport { DependencyInjection } from \"../../di\";\nimport { listeners } from \"../../listeners\";\nimport Peer from \"../../modules/peer/base\";\nimport { timeout } from \"../../const\";\n\nconst FindNode = (searchkid: string, except: string[]) => {\n  return { rpc: \"FindNode\" as const, searchkid, except };\n};\n\nexport type FindNode = ReturnType<typeof FindNode>;\n\nconst FindNodeAnswer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindNodeAnswer\" as const, sdp, peerkid };\n};\n\nexport type FindNodeAnswer = ReturnType<typeof FindNodeAnswer>;\n\nexport default async function findNode(\n  searchkid: string,\n  di: DependencyInjection\n) {\n  const { kTable, rpcManager, signaling } = di;\n\n  if (kTable.getPeer(searchkid)) return kTable.getPeer(searchkid);\n\n  const findNodeProxy = async (peer: Peer) => {\n    const except = kTable.allPeers.map(item => item.kid);\n\n    const wait = rpcManager.getWait<FindNodeProxyOffer>(\n      peer,\n      FindNode(searchkid, except)\n    );\n\n    const res = await wait(timeout).catch(() => {});\n\n    if (res) {\n      const { peers } = res;\n      if (peers.length > 0) {\n        return { peers, peer };\n      }\n    }\n    return { peers: [], peer };\n  };\n\n  const findNodeAnswer = async (proxy: Peer, offer: Offer) => {\n    const { peerkid, sdp } = offer;\n    const { peer, candidate } = signaling.create(peerkid);\n    if (peer) {\n      const answer = await peer.setOffer(sdp);\n\n      rpcManager.run(proxy, FindNodeAnswer(answer, peerkid));\n      const res = await peer.onConnect.asPromise(timeout).catch(() => {\n        signaling.delete(peerkid);\n      });\n\n      if (res) {\n        listeners(peer, di);\n      }\n    } else if (candidate) {\n      const peer = await candidate.asPromise(timeout).catch(() => {});\n      if (peer) listeners(peer, di);\n    }\n  };\n\n  const findNodeProxyOfferResult = await Promise.all(\n    kTable.findNode(searchkid).map(peer => findNodeProxy(peer))\n  );\n\n  await Promise.all(\n    findNodeProxyOfferResult\n      .map(item => item.peers.map(offer => findNodeAnswer(item.peer, offer)))\n      .flatMap(v => v)\n  );\n\n  return kTable.getPeer(searchkid);\n}\n"]}