{"version":3,"file":"peer.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/peer.ts"],"names":[],"mappings":";;;AAGA,kDAA+C;AAE/C,MAAM,iBAAiB,GAAG,CAAC,GAAQ,EAAE,OAAe,EAAE,EAAE;IACtD,OAAO,EAAE,GAAG,EAAE,mBAA4B,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;AAC7D,CAAC,CAAC;AAMF,MAAqB,YAAY;IAG/B,YAAoB,MAAY,EAAU,EAAuB;QAA7C,WAAM,GAAN,MAAM,CAAM;QAAU,OAAE,GAAF,EAAE,CAAqB;QAFjE,cAAS,GAA4B,EAAE,CAAC;QAGtC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAa,EAAE,EAAE;YACtD,QAAQ,IAAI,CAAC,GAAG,EAAE;gBAChB,KAAK,mBAAmB;oBACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBAC7B,MAAM;gBACR,KAAK,qBAAqB;oBACxB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;oBAC/B,MAAM;aACT;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IACvD,CAAC;IAEK,iBAAiB,CAAC,IAAuB;;YAC7C,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YAC3B,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YAC3B,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC;YAEvC,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YAEjC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YAEvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACxD,CAAC;KAAA;IAEK,mBAAmB,CAAC,IAAyB;;YACjD,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YAChC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACvC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAE1B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjB,qBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC;KAAA;CACF;AA1CD,+BA0CC","sourcesContent":["import Peer from \"../../../modules/peer/base\";\nimport { FindNodeProxyOpen, FindNodeProxyAnswer } from \"./proxy\";\nimport { DependencyInjection } from \"../../../di\";\nimport { listeners } from \"../../../listeners\";\n\nconst FindNodePeerOffer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindNodePeerOffer\" as const, sdp, peerkid };\n};\n\nexport type FindNodePeerOffer = ReturnType<typeof FindNodePeerOffer>;\n\ntype actions = FindNodeProxyOpen | FindNodeProxyAnswer;\n\nexport default class FindNodePeer {\n  signaling: { [key: string]: Peer } = {};\n\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const discon = listen.onRpc.subscribe((data: actions) => {\n      switch (data.rpc) {\n        case \"FindNodeProxyOpen\":\n          this.findNodeProxyOpen(data);\n          break;\n        case \"FindNodeProxyAnswer\":\n          this.findNodeProxyAnswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => discon.unSubscribe());\n  }\n\n  async findNodeProxyOpen(data: FindNodeProxyOpen) {\n    const { finderkid } = data;\n    const { kTable } = this.di;\n    const { peerCreate } = this.di.modules;\n\n    const peer = peerCreate(finderkid);\n    this.signaling[finderkid] = peer;\n\n    const offer = await peer.createOffer();\n\n    this.listen.rpc(FindNodePeerOffer(offer, kTable.kid));\n  }\n\n  async findNodeProxyAnswer(data: FindNodeProxyAnswer) {\n    const { finderkid, sdp } = data;\n    const { kTable } = this.di;\n\n    const peer = this.signaling[finderkid];\n    if (!peer) return;\n    await peer.setAnswer(sdp);\n\n    kTable.add(peer);\n    listeners(peer, this.di);\n  }\n}\n"]}