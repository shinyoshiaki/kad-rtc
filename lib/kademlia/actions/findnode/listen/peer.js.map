{"version":3,"file":"peer.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/peer.ts"],"names":[],"mappings":";;;AAGA,+CAA+B;AAE/B,IAAM,iBAAiB,GAAG,UAAC,GAAQ,EAAE,OAAe;IAClD,OAAO,EAAE,GAAG,EAAE,mBAA4B,EAAE,GAAG,KAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AAC7D,CAAC,CAAC;AAMF;IAGE,sBACU,MAA6B,EAC7B,MAAY,EACZ,MAAc;QAHxB,iBAiBC;QAhBS,WAAM,GAAN,MAAM,CAAuB;QAC7B,WAAM,GAAN,MAAM,CAAM;QACZ,WAAM,GAAN,MAAM,CAAQ;QALxB,cAAS,GAA4B,EAAE,CAAC;QAOtC,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAO,IAAa;;gBACxD,QAAQ,IAAI,CAAC,GAAG,EAAE;oBAChB,KAAK,mBAAmB;wBACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;wBAC7B,MAAM;oBACR,KAAK,qBAAqB;wBACxB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wBAC/B,MAAM;iBACT;;;aACF,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAM,OAAA,MAAM,CAAC,WAAW,EAAE,EAApB,CAAoB,CAAC,CAAC;IACvD,CAAC;IAEK,wCAAiB,GAAvB,UAAwB,IAAuB;;;;;;wBACrC,SAAS,GAAK,IAAI,UAAT,CAAU;wBACrB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBACpC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;wBAEnB,qBAAM,IAAI,CAAC,WAAW,EAAE,EAAA;;wBAAhC,KAAK,GAAG,SAAwB;wBAEtC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;KAC5D;IAEK,0CAAmB,GAAzB,UAA0B,IAAyB;;;;;;wBACzC,SAAS,GAAU,IAAI,UAAd,EAAE,GAAG,GAAK,IAAI,IAAT,CAAU;wBAC1B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;wBACvC,IAAI,CAAC,IAAI;4BAAE,sBAAO;wBAClB,qBAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAA;;wBAAzB,SAAyB,CAAC;wBAE1B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACtB,UAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;;;;;KAChD;IACH,mBAAC;AAAD,CAAC,AAzCD,IAyCC","sourcesContent":["import Peer from \"../../../modules/peer\";\nimport { FindNodeProxyOpen, FindNodeProxyAnswer } from \"./proxy\";\nimport Ktable from \"../../../ktable\";\nimport listenFindnode from \".\";\n\nconst FindNodePeerOffer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindNodePeerOffer\" as const, sdp, peerkid };\n};\n\nexport type FindNodePeerOffer = ReturnType<typeof FindNodePeerOffer>;\n\ntype actions = FindNodeProxyOpen | FindNodeProxyAnswer;\n\nexport default class FindNodePeer {\n  signaling: { [key: string]: Peer } = {};\n\n  constructor(\n    private module: (kid: string) => Peer,\n    private listen: Peer,\n    private ktable: Ktable\n  ) {\n    const discon = listen.onRpc.subscribe(async (data: actions) => {\n      switch (data.rpc) {\n        case \"FindNodeProxyOpen\":\n          this.findNodeProxyOpen(data);\n          break;\n        case \"FindNodeProxyAnswer\":\n          this.findNodeProxyAnswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => discon.unSubscribe());\n  }\n\n  async findNodeProxyOpen(data: FindNodeProxyOpen) {\n    const { finderkid } = data;\n    const peer = this.module(finderkid);\n    this.signaling[finderkid] = peer;\n\n    const offer = await peer.createOffer();\n\n    this.listen.rpc(FindNodePeerOffer(offer, this.ktable.kid));\n  }\n\n  async findNodeProxyAnswer(data: FindNodeProxyAnswer) {\n    const { finderkid, sdp } = data;\n    const peer = this.signaling[finderkid];\n    if (!peer) return;\n    await peer.setAnswer(sdp);\n\n    this.ktable.add(peer);\n    listenFindnode(this.module, peer, this.ktable);\n  }\n}\n"]}