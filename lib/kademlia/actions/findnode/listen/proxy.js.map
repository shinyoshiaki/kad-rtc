{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import Peer from \"../../../modules/peer/base\";\nimport { FindNode, FindNodeAnswer } from \"..\";\nimport { FindNodePeerOffer } from \"./peer\";\nimport { DependencyInjection } from \"../../../di\";\nimport { timeout } from \"../../../const\";\nimport { ID } from \"../../../services/rpcmanager\";\n\nconst FindNodeProxyOffer = (peers: Offer[]) => {\n  return { rpc: \"FindNodeProxyOffer\" as const, peers };\n};\n\nexport type Offer = { peerkid: string; sdp: object };\n\nexport type FindNodeProxyOffer = ReturnType<typeof FindNodeProxyOffer>;\n\nconst FindNodeProxyOpen = (finderkid: string) => {\n  return { rpc: \"FindNodeProxyOpen\" as const, finderkid };\n};\n\nexport type FindNodeProxyOpen = ReturnType<typeof FindNodeProxyOpen>;\n\nconst FindNodeProxyAnswer = (sdp: any, finderkid: string) => {\n  return { rpc: \"FindNodeProxyAnswer\" as const, sdp, finderkid };\n};\n\nexport type FindNodeProxyAnswer = ReturnType<typeof FindNodeProxyAnswer>;\n\ntype actions = (FindNode | FindNodeAnswer) & ID;\n\nexport default class FindNodeProxy {\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const onRpc = listen.onRpc.subscribe((data: actions) => {\n      switch (data.rpc) {\n        case \"FindNode\":\n          this.findnode(data);\n          break;\n        case \"FindNodeAnswer\":\n          this.findnodeanswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => onRpc.unSubscribe());\n  }\n\n  async findnode(data: FindNode & ID) {\n    const { kTable, rpcManager } = this.di;\n    const { searchkid, except, id } = data;\n\n    const peers = kTable.findNode(searchkid);\n    const offers: { peerkid: string; sdp: object }[] = [];\n\n    const findNodePeerOffer = async (peer: Peer) => {\n      if (!(peer.kid === this.listen.kid || except.includes(peer.kid))) {\n        const wait = rpcManager.getWait<FindNodePeerOffer>(\n          peer,\n          FindNodeProxyOpen(this.listen.kid)\n        );\n        const res = await wait(timeout).catch(() => {});\n\n        if (res) {\n          const { peerkid, sdp } = res;\n          if (sdp) offers.push({ peerkid, sdp });\n        }\n      }\n    };\n\n    await Promise.all(peers.map(peer => findNodePeerOffer(peer)));\n\n    this.listen.rpc({ ...FindNodeProxyOffer(offers), id });\n  }\n\n  async findnodeanswer(data: FindNodeAnswer & ID) {\n    const { kTable } = this.di;\n    const { sdp, peerkid, id } = data;\n\n    const peer = kTable.getPeer(peerkid);\n    if (!peer) return;\n    peer.rpc({ ...FindNodeProxyAnswer(sdp, this.listen.kid), id });\n  }\n}\n"]}