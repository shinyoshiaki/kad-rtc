{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/proxy.ts"],"names":[],"mappings":";;;AAKA,IAAM,kBAAkB,GAAG,UAAC,KAAsC;IAChE,OAAO,EAAE,GAAG,EAAE,oBAA6B,EAAE,KAAK,OAAA,EAAE,CAAC;AACvD,CAAC,CAAC;AAIF,IAAM,iBAAiB,GAAG,UAAC,SAAiB;IAC1C,OAAO,EAAE,GAAG,EAAE,mBAA4B,EAAE,SAAS,WAAA,EAAE,CAAC;AAC1D,CAAC,CAAC;AAIF,IAAM,mBAAmB,GAAG,UAAC,GAAQ,EAAE,SAAiB;IACtD,OAAO,EAAE,GAAG,EAAE,qBAA8B,EAAE,GAAG,KAAA,EAAE,SAAS,WAAA,EAAE,CAAC;AACjE,CAAC,CAAC;AAMF;IACE,uBAAoB,MAAY,EAAU,MAAc;QAAxD,iBAaC;QAbmB,WAAM,GAAN,MAAM,CAAM;QAAU,WAAM,GAAN,MAAM,CAAQ;QACtD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAO,IAAa;;gBACxD,QAAQ,IAAI,CAAC,GAAG,EAAE;oBAChB,KAAK,UAAU;wBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBACpB,MAAM;oBACR,KAAK,gBAAgB;wBACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC1B,MAAM;iBACT;;;aACF,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAM,OAAA,MAAM,CAAC,WAAW,EAAE,EAApB,CAAoB,CAAC,CAAC;IACvD,CAAC;IAEK,gCAAQ,GAAd,UAAe,IAAc;;;;;;wBACnB,SAAS,GAAa,IAAI,UAAjB,EAAE,MAAM,GAAK,IAAI,OAAT,CAAU;wBAC7B,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wBACxC,MAAM,GAAoC,EAAE,CAAC;8BAE7B,EAAL,eAAK;;;6BAAL,CAAA,mBAAK,CAAA;wBAAb,IAAI;wBACX,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,GAAG;4BAAE,wBAAS;wBAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;4BAAE,wBAAS;wBAElC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;wBAEpC,qBAAM,GAAG,CAAC,SAAS,EAAE,EAAA;;wBAApC,GAAG,GAAY,SAAqB;wBAC1C,IAAI,GAAG,CAAC,GAAG,KAAK,mBAAmB,EAAE;4BAC3B,OAAO,GAAU,GAAG,QAAb,EAAE,GAAG,GAAK,GAAG,IAAR,CAAS;4BAC7B,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;yBAC/B;;;wBAVc,IAAK,CAAA;;;wBAYtB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;KAC7C;IAEK,sCAAc,GAApB,UAAqB,IAAoB;;;;gBAC/B,GAAG,GAAc,IAAI,IAAlB,EAAE,OAAO,GAAK,IAAI,QAAT,CAAU;gBACxB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI;oBAAE,sBAAO;gBAClB,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;;;KACrD;IACH,oBAAC;AAAD,CAAC,AA1CD,IA0CC","sourcesContent":["import Peer from \"../../../modules/peer\";\nimport { FindNode, FindNodeAnswer } from \"..\";\nimport Ktable from \"../../../ktable\";\nimport { FindNodePeerOffer } from \"./peer\";\n\nconst FindNodeProxyOffer = (peers: { peerkid: string; sdp: any }[]) => {\n  return { rpc: \"FindNodeProxyOffer\" as const, peers };\n};\n\nexport type FindNodeProxyOffer = ReturnType<typeof FindNodeProxyOffer>;\n\nconst FindNodeProxyOpen = (finderkid: string) => {\n  return { rpc: \"FindNodeProxyOpen\" as const, finderkid };\n};\n\nexport type FindNodeProxyOpen = ReturnType<typeof FindNodeProxyOpen>;\n\nconst FindNodeProxyAnswer = (sdp: any, finderkid: string) => {\n  return { rpc: \"FindNodeProxyAnswer\" as const, sdp, finderkid };\n};\n\nexport type FindNodeProxyAnswer = ReturnType<typeof FindNodeProxyAnswer>;\n\ntype actions = FindNode | FindNodeAnswer | FindNodePeerOffer;\n\nexport default class FindNodeProxy {\n  constructor(private listen: Peer, private ktable: Ktable) {\n    const discon = listen.onRpc.subscribe(async (data: actions) => {\n      switch (data.rpc) {\n        case \"findnode\":\n          this.findnode(data);\n          break;\n        case \"findnodeanswer\":\n          this.findnodeanswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => discon.unSubscribe());\n  }\n\n  async findnode(data: FindNode) {\n    const { searchkid, except } = data;\n    const peers = this.ktable.findNode(searchkid);\n    const offers: { peerkid: string; sdp: any }[] = [];\n\n    for (let peer of peers) {\n      if (peer.kid === this.listen.kid) continue;\n      if (except.includes(peer.kid)) continue;\n\n      const rpc = peer.rpc(FindNodeProxyOpen(this.listen.kid));\n\n      const res: actions = await rpc.asPromise();\n      if (res.rpc === \"FindNodePeerOffer\") {\n        const { peerkid, sdp } = res;\n        offers.push({ peerkid, sdp });\n      }\n    }\n    this.listen.rpc(FindNodeProxyOffer(offers));\n  }\n\n  async findnodeanswer(data: FindNodeAnswer) {\n    const { sdp, peerkid } = data;\n    const peer = this.ktable.getPeer(peerkid);\n    if (!peer) return;\n    peer.rpc(FindNodeProxyAnswer(sdp, this.listen.kid));\n  }\n}\n"]}