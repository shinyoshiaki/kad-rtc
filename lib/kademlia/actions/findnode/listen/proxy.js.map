{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/proxy.ts"],"names":[],"mappings":";;AAKA,MAAM,kBAAkB,GAAG,CAAC,KAAsC,EAAE,EAAE;IACpE,OAAO,EAAE,GAAG,EAAE,oBAA6B,EAAE,KAAK,EAAE,CAAC;AACvD,CAAC,CAAC;AAIF,MAAM,iBAAiB,GAAG,CAAC,SAAiB,EAAE,EAAE;IAC9C,OAAO,EAAE,GAAG,EAAE,mBAA4B,EAAE,SAAS,EAAE,CAAC;AAC1D,CAAC,CAAC;AAIF,MAAM,mBAAmB,GAAG,CAAC,GAAQ,EAAE,SAAiB,EAAE,EAAE;IAC1D,OAAO,EAAE,GAAG,EAAE,qBAA8B,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;AACjE,CAAC,CAAC;AAMF,MAAqB,aAAa;IAChC,YAAoB,MAAY,EAAU,MAAc;QAApC,WAAM,GAAN,MAAM,CAAM;QAAU,WAAM,GAAN,MAAM,CAAQ;QACtD,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,IAAa,EAAE,EAAE;YAC5D,QAAQ,IAAI,CAAC,GAAG,EAAE;gBAChB,KAAK,UAAU;oBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACpB,MAAM;gBACR,KAAK,gBAAgB;oBACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oBAC1B,MAAM;aACT;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,IAAc;QAC3B,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAoC,EAAE,CAAC;QAEnD,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,GAAG;gBAAE,SAAS;YAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;gBAAE,SAAS;YAExC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAEzD,MAAM,GAAG,GAAY,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC;YAC3C,IAAI,GAAG,CAAC,GAAG,KAAK,mBAAmB,EAAE;gBACnC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;gBAC7B,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;aAC/B;SACF;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAoB;QACvC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC;CACF;AA1CD,gCA0CC","sourcesContent":["import Peer from \"../../../modules/peer\";\nimport { FindNode, FindNodeAnswer } from \"..\";\nimport Ktable from \"../../../ktable\";\nimport { FindNodePeerOffer } from \"./peer\";\n\nconst FindNodeProxyOffer = (peers: { peerkid: string; sdp: any }[]) => {\n  return { rpc: \"FindNodeProxyOffer\" as const, peers };\n};\n\nexport type FindNodeProxyOffer = ReturnType<typeof FindNodeProxyOffer>;\n\nconst FindNodeProxyOpen = (finderkid: string) => {\n  return { rpc: \"FindNodeProxyOpen\" as const, finderkid };\n};\n\nexport type FindNodeProxyOpen = ReturnType<typeof FindNodeProxyOpen>;\n\nconst FindNodeProxyAnswer = (sdp: any, finderkid: string) => {\n  return { rpc: \"FindNodeProxyAnswer\" as const, sdp, finderkid };\n};\n\nexport type FindNodeProxyAnswer = ReturnType<typeof FindNodeProxyAnswer>;\n\ntype actions = FindNode | FindNodeAnswer | FindNodePeerOffer;\n\nexport default class FindNodeProxy {\n  constructor(private listen: Peer, private ktable: Ktable) {\n    const discon = listen.onRpc.subscribe(async (data: actions) => {\n      switch (data.rpc) {\n        case \"findnode\":\n          this.findnode(data);\n          break;\n        case \"findnodeanswer\":\n          this.findnodeanswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => discon.unSubscribe());\n  }\n\n  async findnode(data: FindNode) {\n    const { searchkid, except } = data;\n    const peers = this.ktable.findNode(searchkid);\n    const offers: { peerkid: string; sdp: any }[] = [];\n\n    for (let peer of peers) {\n      if (peer.kid === this.listen.kid) continue;\n      if (except.includes(peer.kid)) continue;\n\n      const rpc = peer.rpc(FindNodeProxyOpen(this.listen.kid));\n\n      const res: actions = await rpc.asPromise();\n      if (res.rpc === \"FindNodePeerOffer\") {\n        const { peerkid, sdp } = res;\n        offers.push({ peerkid, sdp });\n      }\n    }\n    this.listen.rpc(FindNodeProxyOffer(offers));\n  }\n\n  async findnodeanswer(data: FindNodeAnswer) {\n    const { sdp, peerkid } = data;\n    const peer = this.ktable.getPeer(peerkid);\n    if (!peer) return;\n    peer.rpc(FindNodeProxyAnswer(sdp, this.listen.kid));\n  }\n}\n"]}