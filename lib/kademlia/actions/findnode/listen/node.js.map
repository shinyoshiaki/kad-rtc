{"version":3,"file":"node.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/node.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindNode, FindNodeAnswer } from \"..\";\nimport { ID, Peer } from \"../../../modules/peer/base\";\n\nimport { DependencyInjection } from \"../../../di\";\nimport { FindNodePeerOffer } from \"./signaling\";\nimport { Signal } from \"webrtc4me\";\n\nexport default class FindNodeProxy {\n  timeout = this.di.opt.timeout! / 2;\n\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const { rpcManager } = di;\n\n    rpcManager\n      .asObservable<FindNode>(\"FindNode\", listen)\n      .subscribe(this.findnode);\n\n    rpcManager\n      .asObservable<FindNodeAnswer>(\"FindNodeAnswer\", listen)\n      .subscribe(this.findNodeAnswer);\n  }\n\n  findnode = async (data: FindNode & ID) => {\n    const { kTable, rpcManager } = this.di;\n    const { searchKid, except, id } = data;\n\n    const offers: { peerKid: string; sdp: Signal }[] = [];\n\n    const peers = kTable\n      .findNode(searchKid)\n      .filter(({ kid }) => kid !== this.listen.kid)\n      .filter(({ kid }) => !except.includes(kid));\n\n    await Promise.all(\n      peers.map(async peer => {\n        const res = await rpcManager\n          .getWait<FindNodePeerOffer>(\n            peer,\n            FindNodeProxyOpen(this.listen.kid)\n          )(this.timeout)\n          .catch(() => {});\n\n        if (res) {\n          const { peerKid, sdp } = res;\n          if (sdp) offers.push({ peerKid, sdp });\n        } else {\n          console.log(\"timeout\");\n        }\n      })\n    );\n\n    this.listen.rpc({ ...FindNodeProxyOffer(offers), id });\n  };\n\n  findNodeAnswer = async (data: FindNodeAnswer & ID) => {\n    const { kTable } = this.di;\n    const { sdp, peerKid, id } = data;\n\n    const peer = kTable.getPeer(peerKid);\n    if (peer) {\n      peer.rpc({ ...FindNodeProxyAnswer(sdp, this.listen.kid), id });\n    } else {\n      this.listen.rpc({ ...FindNodeProxyAnswerError(), id });\n    }\n  };\n}\n\nexport type OfferPayload = { peerKid: string; sdp: Signal };\n\nconst FindNodeProxyOffer = (peers: OfferPayload[]) => ({\n  type: \"FindNodeProxyOffer\" as const,\n  peers\n});\n\nexport type FindNodeProxyOffer = ReturnType<typeof FindNodeProxyOffer>;\n\nconst FindNodeProxyOpen = (finderKid: string) => ({\n  type: \"FindNodeProxyOpen\" as const,\n  finderKid\n});\n\nexport type FindNodeProxyOpen = ReturnType<typeof FindNodeProxyOpen>;\n\nconst FindNodeProxyAnswer = (sdp: Signal, finderKid: string) => ({\n  type: \"FindNodeProxyAnswer\" as const,\n  sdp,\n  finderKid\n});\n\nexport type FindNodeProxyAnswer = ReturnType<typeof FindNodeProxyAnswer>;\n\nconst FindNodeProxyAnswerError = () => ({\n  type: \"FindNodeProxyAnswerError\" as const\n});\n\nexport type FindNodeProxyAnswerError = ReturnType<\n  typeof FindNodeProxyAnswerError\n>;\n"]}