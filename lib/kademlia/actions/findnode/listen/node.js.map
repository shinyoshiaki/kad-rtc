{"version":3,"file":"node.js","sourceRoot":"","sources":["../../../../../src/kademlia/actions/findnode/listen/node.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindNode, FindNodeAnswer } from \"..\";\n\nimport { DependencyInjection } from \"../../../di\";\nimport { FindNodePeerOffer } from \"./signaling\";\nimport { ID } from \"../../../services/rpcmanager\";\nimport { Peer } from \"../../../modules/peer/base\";\nimport { timeout } from \"../../../const\";\n\nexport default class FindNodeProxy {\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const { rpcManager } = di;\n\n    rpcManager\n      .asObservable<FindNode>(\"FindNode\", listen)\n      .subscribe(this.findnode);\n\n    rpcManager\n      .asObservable<FindNodeAnswer>(\"FindNodeAnswer\", listen)\n      .subscribe(this.findnodeanswer);\n  }\n\n  findnode = async (data: FindNode & ID) => {\n    const { kTable, rpcManager } = this.di;\n    const { searchkid, except, id } = data;\n\n    const offers: { peerkid: string; sdp: string }[] = [];\n\n    const peers = kTable.findNode(searchkid);\n\n    await Promise.all(\n      peers.map(async peer => {\n        if (!(peer.kid === this.listen.kid || except.includes(peer.kid))) {\n          const wait = rpcManager.getWait<FindNodePeerOffer>(\n            peer,\n            FindNodeProxyOpen(this.listen.kid)\n          );\n          const res = await wait(timeout).catch(() => {});\n          if (res) {\n            const { peerkid, sdp } = res;\n            if (sdp) offers.push({ peerkid, sdp });\n          }\n        }\n      })\n    );\n\n    this.listen.rpc({ ...FindNodeProxyOffer(offers), id });\n  };\n\n  findnodeanswer = async (data: FindNodeAnswer & ID) => {\n    const { kTable } = this.di;\n    const { sdp, peerkid, id } = data;\n\n    const peer = kTable.getPeer(peerkid);\n    if (peer) peer.rpc({ ...FindNodeProxyAnswer(sdp, this.listen.kid), id });\n    else {\n      this.listen.rpc({ ...FindNodeProxyAnswerError(), id });\n    }\n  };\n}\n\nexport type Offer = { peerkid: string; sdp: string };\n\nconst FindNodeProxyOffer = (peers: Offer[]) => ({\n  rpc: \"FindNodeProxyOffer\" as const,\n  peers\n});\n\nexport type FindNodeProxyOffer = ReturnType<typeof FindNodeProxyOffer>;\n\nconst FindNodeProxyOpen = (finderkid: string) => ({\n  rpc: \"FindNodeProxyOpen\" as const,\n  finderkid\n});\n\nexport type FindNodeProxyOpen = ReturnType<typeof FindNodeProxyOpen>;\n\nconst FindNodeProxyAnswer = (sdp: string, finderkid: string) => ({\n  rpc: \"FindNodeProxyAnswer\" as const,\n  sdp,\n  finderkid\n});\n\nexport type FindNodeProxyAnswer = ReturnType<typeof FindNodeProxyAnswer>;\n\nconst FindNodeProxyAnswerError = () => ({\n  rpc: \"FindNodeProxyAnswerError\" as const\n});\n\nexport type FindNodeProxyAnswerError = ReturnType<\n  typeof FindNodeProxyAnswerError\n>;\n"]}