{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/test.ts"],"names":[],"mappings":"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","sourcesContent":["import { PeerModule } from \"../../modules/peer/mock\";\nimport Peer from \"../../modules/peer\";\nimport sha1 from \"sha1\";\nimport findNode from \".\";\nimport { dependencyInjection, DependencyInjection } from \"../../di\";\nimport { listeners } from \"../../listeners\";\n\nconst kBucketSize = 8;\nconst num = kBucketSize * 2;\n\nexport async function testSetupNodes(kBucketSize: number, num: number) {\n  const nodes: DependencyInjection[] = [];\n\n  const kOffer = dependencyInjection(sha1(\"0\").toString(), PeerModule, {\n    kBucketSize\n  });\n  const kAnswer = dependencyInjection(sha1(\"1\").toString(), PeerModule, {\n    kBucketSize\n  });\n\n  const offer = PeerModule(kAnswer.kTable.kid);\n  const offerSdp = await offer.createOffer();\n  const answer = PeerModule(kOffer.kTable.kid);\n  const answerSdp = await answer.setOffer(offerSdp);\n  await offer.setAnswer(answerSdp);\n\n  kOffer.kTable.add(offer);\n  listeners(offer, kOffer);\n\n  kAnswer.kTable.add(answer);\n  listeners(answer, kAnswer);\n\n  nodes.push(kOffer);\n  nodes.push(kAnswer);\n\n  for (let i = 2; i < 2 + num; i++) {\n    const pop = nodes.slice(-1)[0];\n    const push = dependencyInjection(\n      sha1(i.toString()).toString(),\n      PeerModule,\n      { kBucketSize }\n    );\n\n    const offer = PeerModule(push.kTable.kid);\n    const offerSdp = await offer.createOffer();\n    const answer = PeerModule(pop.kTable.kid);\n    const answerSdp = await answer.setOffer(offerSdp);\n    await offer.setAnswer(answerSdp);\n\n    pop.kTable.add(offer);\n    listeners(offer, pop);\n    push.kTable.add(answer);\n    listeners(answer, push);\n\n    nodes.push(push);\n  }\n  for (let node of nodes) {\n    await findNode(node.kTable.kid, node);\n  }\n  return nodes;\n}\n\ndescribe(\"findnode\", () => {\n  test(\n    \"findnode\",\n    async () => {\n      const nodes = await testSetupNodes(kBucketSize, num);\n\n      const search = async (word: string) => {\n        const node = nodes[0];\n\n        let target: undefined | Peer;\n\n        for (\n          let pre = \"\";\n          pre !== node.kTable.getHash(word);\n          pre = node.kTable.getHash(word)\n        ) {\n          target = await findNode(word, node);\n\n          if (target) {\n            break;\n          }\n        }\n\n        if (!target) {\n          expect(true).toBe(true);\n        }\n        expect(target).not.toBe(undefined);\n      };\n\n      for (let word of nodes.slice(1)) {\n        await search(word.kTable.kid);\n      }\n\n      await new Promise(r => setTimeout(r, 0));\n    },\n    1000 * 6000\n  );\n});\n"]}