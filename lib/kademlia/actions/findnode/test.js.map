{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/test.ts"],"names":[],"mappings":";AAAA,iBAyEA;;;AAzEA,gEAAkC;AAClC,0EAA6D;AAC7D,sDAAwB;AACxB,4DAAsC;AACtC,+CAAyB;AAEzB,IAAM,WAAW,GAAG,CAAC,CAAC;AACtB,IAAM,GAAG,GAAG,EAAE,CAAC;AAEf,QAAQ,CAAC,UAAU,EAAE;IACnB,IAAI,CACF,UAAU,EACV;;;;;;oBACQ,KAAK,GAAa,EAAE,CAAC;oBAErB,MAAM,GAAG,IAAI,gBAAM,CAAC,cAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;oBAC3D,OAAO,GAAG,IAAI,gBAAM,CAAC,cAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;oBAE5D,KAAK,GAAG,IAAI,gBAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACnB,qBAAM,KAAK,CAAC,WAAW,EAAE,EAAA;;oBAApC,QAAQ,GAAG,SAAyB;oBACpC,MAAM,GAAG,IAAI,gBAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAClB,qBAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAA;;oBAA3C,SAAS,GAAG,SAA+B;oBACjD,qBAAM,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,EAAA;;oBAAhC,SAAgC,CAAC;oBAEjC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBAClB,gBAAc,CAAC,mBAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBAC1C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACpB,gBAAc,CAAC,mBAAU,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;oBAE5C,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACnB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAEX,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;oBACnB,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,GAAG,IAAI,gBAAM,CAAC,cAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;oBAElE,UAAQ,IAAI,gBAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAChB,qBAAM,OAAK,CAAC,WAAW,EAAE,EAAA;;oBAApC,aAAW,SAAyB;oBACpC,WAAS,IAAI,gBAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACf,qBAAM,QAAM,CAAC,QAAQ,CAAC,UAAQ,CAAC,EAAA;;oBAA3C,cAAY,SAA+B;oBACjD,qBAAM,OAAK,CAAC,SAAS,CAAC,WAAS,CAAC,EAAA;;oBAAhC,SAAgC,CAAC;oBAEjC,GAAG,CAAC,GAAG,CAAC,OAAK,CAAC,CAAC;oBACf,gBAAc,CAAC,mBAAU,EAAE,OAAK,EAAE,GAAG,CAAC,CAAC;oBACvC,IAAI,CAAC,GAAG,CAAC,QAAM,CAAC,CAAC;oBACjB,gBAAc,CAAC,mBAAU,EAAE,QAAM,EAAE,IAAI,CAAC,CAAC;oBAEzC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;oBAfU,CAAC,EAAE,CAAA;;;0BAiBV,EAAL,eAAK;;;yBAAL,CAAA,mBAAK,CAAA;oBAAb,IAAI;oBACX,qBAAM,UAAQ,CAAC,mBAAU,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAA;;oBAA1C,SAA0C,CAAC;;;oBAD5B,IAAK,CAAA;;;oBAGhB,MAAM,GAAG,UAAO,IAAY;;;;;oCAC1B,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;+CAIJ,KAAK,CAAC,CAAC,CAAC;;;;;;;oCACf,qBAAM,UAAQ,CAAC,mBAAU,EAAE,IAAI,EAAE,IAAI,CAAC,EAAA;;oCAA/C,MAAM,GAAG,SAAsC,CAAC;oCAChD,IAAI,MAAM;wCAAE,wBAAM;;;;;;oCAGpB,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;;;yBACpC,CAAC;0BAEoB,EAAL,eAAK;;;yBAAL,CAAA,mBAAK,CAAA;oBAAb,IAAI;oBACX,IAAI,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG;wBAAE,yBAAS;oBACxC,qBAAM,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAA;;oBAAtB,SAAsB,CAAC;;;oBAFR,IAAK,CAAA;;;;;SAIvB,EACD,IAAI,GAAG,IAAI,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import Ktable from \"../../ktable\";\nimport Peer, { PeerModule } from \"../../modules/peer/webrtc\";\nimport sha1 from \"sha1\";\nimport listenFindnode from \"./listen\";\nimport findNode from \".\";\n\nconst kBucketSize = 8;\nconst num = 24;\n\ndescribe(\"findnode\", () => {\n  test(\n    \"findnode\",\n    async () => {\n      const nodes: Ktable[] = [];\n\n      const kOffer = new Ktable(sha1(\"0\").toString(), { kBucketSize });\n      const kAnswer = new Ktable(sha1(\"1\").toString(), { kBucketSize });\n\n      const offer = new Peer(kAnswer.kid);\n      const offerSdp = await offer.createOffer();\n      const answer = new Peer(kOffer.kid);\n      const answerSdp = await answer.setOffer(offerSdp);\n      await offer.setAnswer(answerSdp);\n\n      kOffer.add(offer);\n      listenFindnode(PeerModule, offer, kOffer);\n      kAnswer.add(answer);\n      listenFindnode(PeerModule, answer, kAnswer);\n\n      nodes.push(kOffer);\n      nodes.push(kAnswer);\n\n      for (let i = 2; i < 2 + num; i++) {\n        const pop = nodes.slice(-1)[0];\n        const push = new Ktable(sha1(i.toString()).toString(), { kBucketSize });\n\n        const offer = new Peer(push.kid);\n        const offerSdp = await offer.createOffer();\n        const answer = new Peer(pop.kid);\n        const answerSdp = await answer.setOffer(offerSdp);\n        await offer.setAnswer(answerSdp);\n\n        pop.add(offer);\n        listenFindnode(PeerModule, offer, pop);\n        push.add(answer);\n        listenFindnode(PeerModule, answer, push);\n\n        nodes.push(push);\n      }\n      for (let node of nodes) {\n        await findNode(PeerModule, node.kid, node);\n      }\n      const search = async (word: string) => {\n        const node = nodes[0];\n\n        let target: any;\n\n        for (let _ in [...Array(5)]) {\n          target = await findNode(PeerModule, word, node);\n          if (target) break;\n        }\n\n        expect(target).not.toBe(undefined);\n      };\n\n      for (let word of nodes) {\n        if (word.kid === nodes[0].kid) continue;\n        await search(word.kid);\n      }\n    },\n    1000 * 6000\n  );\n});\n"]}