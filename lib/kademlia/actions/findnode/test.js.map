{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/test.ts"],"names":[],"mappings":"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","sourcesContent":["import Ktable from \"../../ktable\";\nimport Peer, { PeerModule } from \"../../modules/peer/webrtc\";\nimport sha1 from \"sha1\";\nimport listenFindnode from \"./listen\";\nimport findNode from \".\";\n\nconst kBucketSize = 8;\nconst num = 4;\n\ndescribe(\"findnode\", () => {\n  test(\n    \"findnode\",\n    async () => {\n      const nodes: Ktable[] = [];\n\n      const kOffer = new Ktable(sha1(\"0\").toString(), { kBucketSize });\n      const kAnswer = new Ktable(sha1(\"1\").toString(), { kBucketSize });\n\n      const offer = new Peer(kAnswer.kid);\n      const offerSdp = await offer.createOffer();\n      const answer = new Peer(kOffer.kid);\n      const answerSdp = await answer.setOffer(offerSdp);\n      await offer.setAnswer(answerSdp);\n\n      kOffer.add(offer);\n      listenFindnode(PeerModule, offer, kOffer);\n      kAnswer.add(answer);\n      listenFindnode(PeerModule, answer, kAnswer);\n\n      nodes.push(kOffer);\n      nodes.push(kAnswer);\n\n      for (let i = 2; i < 2 + num; i++) {\n        const pop = nodes.slice(-1)[0];\n        const push = new Ktable(sha1(i.toString()).toString(), { kBucketSize });\n\n        const offer = new Peer(push.kid);\n        const offerSdp = await offer.createOffer();\n        const answer = new Peer(pop.kid);\n        const answerSdp = await answer.setOffer(offerSdp);\n        await offer.setAnswer(answerSdp);\n\n        pop.add(offer);\n        listenFindnode(PeerModule, offer, pop);\n        push.add(answer);\n        listenFindnode(PeerModule, answer, push);\n\n        nodes.push(push);\n      }\n      for (let node of nodes) {\n        await findNode(PeerModule, node.kid, node);\n      }\n      const search = async (word: string) => {\n        const node = nodes[0];\n\n        let target: any;\n\n        for (let _ in [...Array(5)]) {\n          target = await findNode(PeerModule, word, node);\n          if (target) break;\n        }\n\n        expect(target).not.toBe(undefined);\n      };\n\n      for (let word of nodes) {\n        if (word.kid === nodes[0].kid) continue;\n        await search(word.kid);\n      }\n    },\n    1000 * 6000\n  );\n});\n"]}