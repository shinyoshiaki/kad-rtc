{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../../src/kademlia/actions/findnode/test.ts"],"names":[],"mappings":"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","sourcesContent":["import { PeerModule } from \"../../modules/peer/webrtc\";\nimport Peer from \"../../modules/peer/base\";\nimport sha1 from \"sha1\";\nimport findNode from \".\";\nimport { dependencyInjection, DependencyInjection } from \"../../di\";\nimport { listeners } from \"../../listeners\";\nimport { KvsModule } from \"../../modules/kvs/base\";\n\nconst kBucketSize = 8;\nconst num = 10;\n\nexport async function testSetupNodes(kBucketSize: number, num: number) {\n  const nodes: DependencyInjection[] = [];\n\n  for (let i = 0; i < num; i++) {\n    if (nodes.length === 0) {\n      const node = dependencyInjection(\n        sha1(i.toString()).toString(),\n        { peerCreate: PeerModule, kvs: KvsModule },\n        {\n          kBucketSize\n        }\n      );\n      nodes.push(node);\n    } else {\n      const pre = nodes.slice(-1)[0];\n      const push = dependencyInjection(\n        sha1(i.toString()).toString(),\n        { peerCreate: PeerModule, kvs: KvsModule },\n        {\n          kBucketSize\n        }\n      );\n      const offer = PeerModule(push.kTable.kid);\n      const offerSdp = await offer.createOffer();\n      const answer = PeerModule(pre.kTable.kid);\n      const answerSdp = await answer.setOffer(offerSdp);\n      await offer.setAnswer(answerSdp);\n\n      pre.kTable.add(offer);\n      listeners(offer, pre);\n      push.kTable.add(answer);\n      listeners(answer, push);\n\n      nodes.push(push);\n    }\n  }\n\n  for (let node of nodes) {\n    await findNode(node.kTable.kid, node);\n  }\n  return nodes;\n}\n\ndescribe(\"findnode\", () => {\n  test(\n    \"findnode\",\n    async () => {\n      const nodes = await testSetupNodes(kBucketSize, num);\n\n      const search = async (word: string) => {\n        const node = nodes[0];\n\n        let target: undefined | Peer;\n\n        let pre = \"\",\n          trytime = 0;\n        for (\n          ;\n          pre !== node.kTable.getHash(word);\n          pre = node.kTable.getHash(word), trytime++\n        ) {\n          target = await findNode(word, node);\n\n          if (target) {\n            break;\n          }\n        }\n\n        if (!target) {\n          const now = node.kTable.getHash(word);\n          expect(pre).toBe(now);\n        } else {\n          expect(target).not.toBe(undefined);\n        }\n      };\n\n      for (let word of nodes.slice(1)) {\n        await search(word.kTable.kid);\n      }\n\n      await new Promise(r => setTimeout(r, 0));\n\n      nodes.forEach(node =>\n        node.kTable.allPeers.forEach(peer => peer.disconnect())\n      );\n    },\n    1000 * 6000\n  );\n});\n"]}