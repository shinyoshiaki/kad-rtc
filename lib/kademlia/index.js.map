{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/kademlia/index.ts"],"names":[],"mappings":";;;AACA,0EAA0C;AAE1C,6BAAgE;AAChE,oEAAoC;AACpC,4EAA4C;AAC5C,2CAAwC;AAKxC,MAAqB,QAAQ;IAG3B,YACS,GAAW,EAClB,OAAgB,EACR,MAAwB,EAAE;QAF3B,QAAG,GAAH,GAAG,CAAQ;QAEV,QAAG,GAAH,GAAG,CAAuB;QAElC,IAAI,CAAC,EAAE,GAAG,wBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC;IAEK,QAAQ,CAAC,SAAiB;;YAC9B,IAAI,MAAwB,CAAC;YAE7B,KACE,IAAI,GAAG,GAAG,EAAE,EACZ,GAAG,KAAK,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EACzC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EACvC;gBACA,MAAM,GAAG,MAAM,kBAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC5C,IAAI,MAAM;oBAAE,MAAM;aACnB;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAEK,KAAK,CAAC,GAAW,EAAE,KAA2B,EAAE,GAAY;;YAChE,OAAO,MAAM,eAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/C,CAAC;KAAA;IAEK,SAAS,CAAC,GAAW;;YACzB,MAAM,GAAG,GAAG,MAAM,mBAAS,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAC1C,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAEK,GAAG,CAAC,OAAa,EAAE,MAAqC,EAAE;;YAC9D,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YAC3B,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC;YAExB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACpB,qBAAS,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC5C,MAAM,kBAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;aACnC;QACH,CAAC;KAAA;CACF;AA9CD,2BA8CC","sourcesContent":["import { Option as OptTable } from \"./ktable\";\nimport findNode from \"./actions/findnode\";\nimport { Peer } from \"./modules/peer/base\";\nimport { DependencyInjection, dependencyInjection } from \"./di\";\nimport store from \"./actions/store\";\nimport findValue from \"./actions/findvalue\";\nimport { listeners } from \"./listeners\";\nimport Modules from \"./modules\";\n\ntype Options = OptTable;\n\nexport default class Kademlia {\n  di: DependencyInjection;\n\n  constructor(\n    public kid: string,\n    modules: Modules,\n    private opt: Partial<Options> = {}\n  ) {\n    this.di = dependencyInjection(kid, modules, opt);\n  }\n\n  async findNode(searchkid: string) {\n    let target: undefined | Peer;\n\n    for (\n      let pre = \"\";\n      pre !== this.di.kTable.getHash(searchkid);\n      pre = this.di.kTable.getHash(searchkid)\n    ) {\n      target = await findNode(searchkid, this.di);\n      if (target) break;\n    }\n\n    return target;\n  }\n\n  async store(key: string, value: string | ArrayBuffer, msg?: string) {\n    return await store(this.di, key, value, msg);\n  }\n\n  async findValue(key: string) {\n    const res = await findValue(key, this.di);\n    return res;\n  }\n\n  async add(connect: Peer, opt: Partial<{ notfind: boolean }> = {}) {\n    const { kTable } = this.di;\n    const { notfind } = opt;\n\n    kTable.add(connect);\n    listeners(connect, this.di);\n    if (!notfind) {\n      await new Promise(r => setTimeout(r, 1000));\n      await findNode(this.kid, this.di);\n    }\n  }\n}\n"]}