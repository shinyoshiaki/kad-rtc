{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/kademlia/index.ts"],"names":[],"mappings":";;;AACA,0EAA0C;AAE1C,6BAAgE;AAChE,oEAAoC;AACpC,4EAA4C;AAI5C,MAAqB,QAAQ;IAG3B,YACS,GAAW,EAClB,MAA6B,EAC7B,MAAwB,EAAE;QAFnB,QAAG,GAAH,GAAG,CAAQ;QAIlB,IAAI,CAAC,EAAE,GAAG,wBAAmB,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IAClD,CAAC;IAEK,QAAQ,CAAC,SAAiB,EAAE,KAAK,GAAG,CAAC;;YACzC,IAAI,MAAM,CAAC;YACX,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC/B,MAAM,GAAG,MAAM,kBAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC5C,IAAI,MAAM;oBAAE,MAAM;aACnB;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAEK,KAAK,CAAC,KAAa;;YACvB,MAAM,eAAK,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC;KAAA;IAEK,SAAS,CAAC,GAAW;;YACzB,MAAM,GAAG,GAAG,MAAM,mBAAS,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAC1C,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAEK,GAAG,CAAC,IAAU;;YAClB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YAC3B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,kBAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;KAAA;CACF;AAlCD,2BAkCC","sourcesContent":["import { Option as OptTable } from \"./ktable\";\nimport findNode from \"./actions/findnode\";\nimport Peer from \"./modules/peer\";\nimport { DependencyInjection, dependencyInjection } from \"./di\";\nimport store from \"./actions/store\";\nimport findValue from \"./actions/findvalue\";\n\ntype Options = OptTable;\n\nexport default class Kademlia {\n  di: DependencyInjection;\n\n  constructor(\n    public kid: string,\n    module: (kid: string) => Peer,\n    opt: Partial<Options> = {}\n  ) {\n    this.di = dependencyInjection(kid, module, opt);\n  }\n\n  async findNode(searchkid: string, retry = 5) {\n    let target;\n    for (let _ in [...Array(retry)]) {\n      target = await findNode(searchkid, this.di);\n      if (target) break;\n    }\n    return target;\n  }\n\n  async store(value: string) {\n    await store(value, this.di);\n  }\n\n  async findValue(key: string) {\n    const res = await findValue(key, this.di);\n    return res;\n  }\n\n  async add(peer: Peer) {\n    const { kTable } = this.di;\n    kTable.add(peer);\n    await findNode(this.kid, this.di);\n  }\n}\n"]}