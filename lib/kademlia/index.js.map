{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/kademlia/index.ts"],"names":[],"mappings":";;;AAAA,4DAAsD;AACtD,sDAAwB;AACxB,wEAA0C;AAK1C;IAIE,kBACU,MAA6B,EACrC,GAAyB;QAAzB,oBAAA,EAAA,QAAyB;QADjB,WAAM,GAAN,MAAM,CAAuB;QAJvC,QAAG,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;QAOtC,IAAA,cAAG,CAAU;QAErB,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACrC,CAAC;IAEK,2BAAQ,GAAd,UAAe,SAAiB;;;;4BAC9B,qBAAM,kBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAnD,SAAmD,CAAC;;;;;KACrD;IACH,eAAC;AAAD,CAAC,AAhBD,IAgBC","sourcesContent":["import Ktable, { Option as OptTable } from \"./ktable\";\nimport sha1 from \"sha1\";\nimport findNode from \"./actions/findnode\";\nimport Peer from \"./modules/peer\";\n\ntype Option = OptTable;\n\nexport default class Kademlia {\n  kid = sha1(Math.random().toString()).toString();\n  kTable: Ktable;\n\n  constructor(\n    private module: (kid: string) => Peer,\n    opt: Partial<Option> = {}\n  ) {\n    const { kid } = this;\n\n    this.kTable = new Ktable(kid, opt);\n  }\n\n  async findNode(searchkid: string) {\n    await findNode(this.module, searchkid, this.kTable);\n  }\n}\n"]}