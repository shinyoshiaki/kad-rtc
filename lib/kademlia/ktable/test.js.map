{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../src/kademlia/ktable/test.ts"],"names":[],"mappings":";;;AAAA,+CAAuB;AACvB,sDAAwB;AAGxB,6CAAwC;AACxC,iEAAmC;AAEnC;IAAuB,oCAAI;IAA3B;;IAA6B,CAAC;IAAD,eAAC;AAAD,CAAC,AAA9B,CAAuB,cAAI,GAAG;AAE9B,QAAQ,CAAC,QAAQ,EAAE;IACjB,IAAM,WAAW,GAAG,CAAC,CAAC;IAEtB,IAAI,CAAC,aAAa,EAAE;QAClB,IAAM,MAAM,GAAG,IAAI,UAAM,CAAC,cAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;QACjE,IAAM,QAAQ,GAAe,MAAc,CAAC,QAAQ,CAAC;QACrD,IAAM,CAAC,GAAY,MAAc,CAAC,CAAC,CAAC;QAEpC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,UAAU,EAAE;QACf,IAAM,MAAM,GAAG,IAAI,UAAM,CAAC,cAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;QACzD,IAAA,gBAAG,CAAY;QAEnB,KAAK,CAAC,EAAE,CAAC,SAAE,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;YAC1B,MAAM,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,cAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEnC,MAAM,CACJ,uBAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACzB,uBAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CACvD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import Ktable from \".\";\nimport sha1 from \"sha1\";\nimport Kbucket from \"./kbucket\";\n\nimport { distance } from \"kad-distance\";\nimport Peer from \"../modules/peer\";\n\nclass PeerTest extends Peer {}\n\ndescribe(\"ktable\", () => {\n  const kBucketSize = 4;\n\n  test(\"constructor\", () => {\n    const ktable = new Ktable(sha1(\"a\").toString(), { kBucketSize });\n    const kbuckets: Kbucket[] = (ktable as any).kbuckets;\n    const k: number = (ktable as any).k;\n\n    expect(kbuckets.length).toBe(160);\n    expect(k).toBe(kBucketSize);\n  });\n\n  test(\"findnode\", () => {\n    const ktable = new Ktable(sha1(\"a\").toString(), { kBucketSize });\n    const { kid } = ktable;\n\n    [...Array(10)].forEach((_, i) => {\n      ktable.add(new PeerTest(sha1(i.toString()).toString()));\n    });\n\n    const peers = ktable.findNode(kid);\n\n    expect(\n      distance(kid, peers[0].kid) <\n        distance(ktable.getAllPeers()[kBucketSize].kid, kid)\n    ).toBe(true);\n  });\n});\n"]}