{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/kademlia/ktable/index.ts"],"names":[],"mappings":";;;AAAA,8DAAyD;AACzD,6CAAwC;AAKxC;IAIE,gBAAmB,GAAW,EAAE,GAAyB;QAAzD,iBAOC;QAP+B,oBAAA,EAAA,QAAyB;QAAtC,QAAG,GAAH,GAAG,CAAQ;QAHtB,aAAQ,GAAc,EAAE,CAAC;QACzB,MAAC,GAAG,EAAE,CAAC;QAuBf,gBAAW,GAAG;YACZ,OAAA,KAAI,CAAC,QAAQ;iBACV,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,EAAxC,CAAwC,CAAC;iBACxD,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC;QAFxB,CAEwB,CAAC;QAE3B,YAAO,GAAG,UAAC,GAAW;YACpB,OAAA,KAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,KAAK,GAAG,EAAhB,CAAgB,CAAC;QAAjD,CAAiD,CAAC;QAEpD,aAAQ,GAAG,UAAC,GAAW;YACrB,OAAA,KAAI,CAAC,WAAW,EAAE;iBACf,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,uBAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,uBAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAA3C,CAA2C,CAAC;iBAC3D,KAAK,CAAC,CAAC,EAAE,KAAI,CAAC,CAAC,CAAC;QAFnB,CAEmB,CAAC;QA/BZ,IAAA,UAAC,CAAU;QACX,IAAA,6BAAW,CAAS;QAE5B,IAAI,CAAC,CAAC,GAAG,WAAW,IAAI,CAAC,CAAC;QAE1B,IAAI,CAAC,QAAQ,GAAO,KAAK,CAAC,GAAG,CAAC,SAAE,GAAG,CAAC,cAAM,OAAA,IAAI,iBAAO,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAC9D,CAAC;IAED,oBAAG,GAAH,UAAI,IAAU;QACZ,IAAM,MAAM,GAAG,uBAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,sBAAI,4BAAQ;aAAZ;YACE,OAAO,IAAI,CAAC,QAAQ;iBACjB,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,EAAxC,CAAwC,CAAC;iBACxD,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;QAC3B,CAAC;;;OAAA;IAcH,aAAC;AAAD,CAAC,AArCD,IAqCC","sourcesContent":["import Kbucket, { Option as OptBucket } from \"./kbucket\";\nimport { distance } from \"kad-distance\";\nimport Peer from \"../modules/peer\";\n\nexport type Option = OptBucket;\n\nexport default class Ktable {\n  private kbuckets: Kbucket[] = [];\n  private k = 20;\n\n  constructor(public kid: string, opt: Partial<Option> = {}) {\n    const { k } = this;\n    const { kBucketSize } = opt;\n\n    this.k = kBucketSize || k;\n\n    this.kbuckets = [...Array(160)].map(() => new Kbucket(opt));\n  }\n\n  add(peer: Peer) {\n    const length = distance(this.kid, peer.kid);\n    const kbucket = this.kbuckets[length];\n    kbucket.add(peer);\n  }\n\n  get allPeers() {\n    return this.kbuckets\n      .map(kbucket => kbucket.peers.map(bucket => bucket.peer))\n      .flatMap(item => item);\n  }\n\n  getAllPeers = (): Peer[] =>\n    this.kbuckets\n      .map(kbucket => kbucket.peers.map(bucket => bucket.peer))\n      .flatMap(item => item);\n\n  getPeer = (kid: string): Peer | undefined =>\n    this.getAllPeers().find(peer => peer.kid === kid);\n\n  findNode = (kid: string): Peer[] =>\n    this.getAllPeers()\n      .sort((a, b) => distance(a.kid, kid) - distance(b.kid, kid))\n      .slice(0, this.k);\n}\n"]}