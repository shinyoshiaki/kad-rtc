{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/services/eventmanager/index.ts"],"names":[],"mappings":";;;AAGA,8DAA4B;AAO5B,MAAqB,YAAY;IAM/B,YAAmB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QALzC,UAAK,GAAG,IAAI,iBAAK,EAAO,CAAC;QACzB,UAAK,GAAG,IAAI,iBAAK,EAAuB,CAAC;QACzC,aAAQ,GAAG,IAAI,iBAAK,EAA0B,CAAC;QAC/C,cAAS,GAAG,IAAI,iBAAK,EAA2B,CAAC;IAEL,CAAC;IAE7C,MAAM,CAAC,IAAU;QACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE3B;YACE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACjE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACrC;IACH,CAAC;IAEO,WAAW,CAAC,IAAU;QAC5B,IAAI,CAAC,UAAU;aACZ,YAAY,CAAQ,OAAO,EAAE,IAAI,CAAC;aAClC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAEO,cAAc,CAAC,IAAU;QAC/B,IAAI,CAAC,UAAU;aACZ,YAAY,CAAW,UAAU,EAAE,IAAI,CAAC;aACxC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEO,eAAe,CAAC,IAAU;QAChC,IAAI,CAAC,UAAU;aACZ,YAAY,CAAY,WAAW,EAAE,IAAI,CAAC;aAC1C,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,YAAY,CAAgB,OAAiB;QAC3C,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAK,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YACrB,IAAI,OAAO,KAAK,GAAG,EAAE;gBACnB,KAAK,CAAC,OAAO,CAAC,IAAS,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA/CD,+BA+CC","sourcesContent":["import { Peer, RPC } from \"../../modules/peer/base\";\nimport RpcManager, { ID } from \"../rpcmanager\";\n\nimport Event from \"rx.mini\";\nimport { FindNode } from \"../../actions/findnode\";\nimport { FindValue } from \"../../actions/findvalue\";\nimport { Store } from \"../../actions/store\";\n\ntype Execute<T> = { res: T; peer: Peer };\n\nexport default class EventManager {\n  event = new Event<RPC>();\n  store = new Event<Execute<Store & ID>>();\n  findnode = new Event<Execute<FindNode & ID>>();\n  findvalue = new Event<Execute<FindValue & ID>>();\n\n  constructor(public rpcManager: RpcManager) {}\n\n  listen(peer: Peer) {\n    this.listenStore(peer);\n    this.listenFindnode(peer);\n    this.listenFindvalue(peer);\n\n    {\n      const { unSubscribe } = peer.onRpc.subscribe(this.event.execute);\n      peer.onDisconnect.once(unSubscribe);\n    }\n  }\n\n  private listenStore(peer: Peer) {\n    this.rpcManager\n      .asObservable<Store>(\"Store\", peer)\n      .subscribe(res => this.store.execute({ res, peer }));\n  }\n\n  private listenFindnode(peer: Peer) {\n    this.rpcManager\n      .asObservable<FindNode>(\"FindNode\", peer)\n      .subscribe(res => this.findnode.execute({ res, peer }));\n  }\n\n  private listenFindvalue(peer: Peer) {\n    this.rpcManager\n      .asObservable<FindValue>(\"FindValue\", peer)\n      .subscribe(res => this.findvalue.execute({ res, peer }));\n  }\n\n  selectListen<T extends RPC>(rpcCode: T[\"rpc\"]) {\n    const event = new Event<T>();\n    this.event.subscribe(data => {\n      const { rpc } = data;\n      if (rpcCode === rpc) {\n        event.execute(data as T);\n      }\n    });\n    return event;\n  }\n}\n"]}