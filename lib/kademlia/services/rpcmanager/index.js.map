{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/services/rpcmanager/index.ts"],"names":[],"mappings":";;;AACA,uEAAuC;AACvC,8DAA4B;AAI5B,MAAqB,UAAU;IAA/B;QACU,SAAI,GAAG,IAAI,cAAI,EAAE,CAAC;IAuC5B,CAAC;IArCC,OAAO,CACL,IAAU,EACV,GAAwC;QAExC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;QAErC,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAK,CAAC;QAE7B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAI,EAAE,EAAE;YAC1C,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gBACf,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACjB,KAAK,CAAC,WAAW,EAAE,CAAC;aACrB;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,mBAAM,GAAG,IAAE,EAAE,IAAG,CAAC;QAEzB,OAAO,KAAK,CAAC,SAAS,CAAC;IACzB,CAAC;IAED,GAAG,CAAC,IAAU,EAAE,GAAwC;QACtD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,GAAG,mBAAM,GAAG,IAAE,EAAE,IAAG,CAAC;IAC3B,CAAC;IAED,YAAY,CAA4B,GAAa,EAAE,MAAY;QACjE,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAU,CAAC;QAClC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAI,IAAI,CAAC,GAAG,KAAK,GAAG,EAAE;gBACpB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACrB;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC5C,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAxCD,6BAwCC","sourcesContent":["import { Peer } from \"../../modules/peer/base\";\nimport Uuid from \"../../../utill/uuid\";\nimport Event from \"rx.mini\";\n\nexport type ID = { id: string };\n\nexport default class RpcManager {\n  private uuid = new Uuid();\n\n  getWait<T extends { rpc: string; [key: string]: unknown }>(\n    peer: Peer,\n    rpc: { rpc: string; [key: string]: any }\n  ) {\n    this.uuid.setPrefix(peer.kid);\n    const id = this.uuid.get() + rpc.rpc;\n\n    const event = new Event<T>();\n\n    const onRpc = peer.onRpc.subscribe((v: T) => {\n      if (v.id === id) {\n        event.execute(v);\n        onRpc.unSubscribe();\n      }\n    });\n\n    peer.rpc({ ...rpc, id });\n\n    return event.asPromise;\n  }\n\n  run(peer: Peer, rpc: { rpc: string; [key: string]: any }) {\n    this.uuid.setPrefix(peer.kid);\n    const id = this.uuid.get();\n    peer.rpc({ ...rpc, id });\n  }\n\n  asObservable<T extends { rpc: string }>(rpc: T[\"rpc\"], listen: Peer) {\n    const event = new Event<T & ID>();\n    const onRpc = listen.onRpc.subscribe(data => {\n      if (data.rpc === rpc) {\n        event.execute(data);\n      }\n    });\n    listen.onDisconnect.once(onRpc.unSubscribe);\n    return event;\n  }\n}\n"]}