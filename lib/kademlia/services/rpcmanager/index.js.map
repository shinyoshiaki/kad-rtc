{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/services/rpcmanager/index.ts"],"names":[],"mappings":";;;AAEA,8DAA4B;AAC5B,uEAAuC;AAEvC,MAAqB,UAAU;IAA/B;QACU,SAAI,GAAG,IAAI,cAAI,EAAE,CAAC;IAoC5B,CAAC;IAlCC,OAAO,CAAoB,IAAU,EAAE,GAAY;QACjD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEtC,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAK,CAAC;QAE7B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YAC/C,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gBACf,KAAK,CAAC,OAAO,CAAC,CAAW,CAAC,CAAC;gBAC3B,WAAW,EAAE,CAAC;aACf;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,iCAAM,GAAG,KAAE,EAAE,IAAG,CAAC;QAEzB,OAAO,KAAK,CAAC,SAAS,CAAC;IACzB,CAAC;IAED,GAAG,CAAC,IAAU,EAAE,GAAyC;QACvD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,GAAG,iCAAM,GAAG,KAAE,EAAE,IAAG,CAAC;IAC3B,CAAC;IAED,YAAY,CAAoB,IAAe,EAAE,MAAY;QAC3D,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAU,CAAC;QAClC,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACpD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;gBACtB,KAAK,CAAC,OAAO,CAAC,IAAc,CAAC,CAAC;aAC/B;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AArCD,6BAqCC","sourcesContent":["import { ID, Peer, RPCBase } from \"../../modules/peer/base\";\n\nimport Event from \"rx.mini\";\nimport Uuid from \"../../../utill/uuid\";\n\nexport default class RpcManager {\n  private uuid = new Uuid();\n\n  getWait<T extends RPCBase>(peer: Peer, rpc: RPCBase) {\n    this.uuid.setPrefix(peer.kid);\n    const id = this.uuid.get() + rpc.type;\n\n    const event = new Event<T>();\n\n    const { unSubscribe } = peer.onRpc.subscribe(v => {\n      if (v.id === id) {\n        event.execute(v as T & ID);\n        unSubscribe();\n      }\n    });\n\n    peer.rpc({ ...rpc, id });\n\n    return event.asPromise;\n  }\n\n  run(peer: Peer, rpc: { type: string; [key: string]: any }) {\n    this.uuid.setPrefix(peer.kid);\n    const id = this.uuid.get();\n    peer.rpc({ ...rpc, id });\n  }\n\n  asObservable<T extends RPCBase>(type: T[\"type\"], listen: Peer) {\n    const event = new Event<T & ID>();\n    const { unSubscribe } = listen.onRpc.subscribe(data => {\n      if (data.type === type) {\n        event.execute(data as T & ID);\n      }\n    });\n    listen.onDisconnect.once(unSubscribe);\n    return event;\n  }\n}\n"]}