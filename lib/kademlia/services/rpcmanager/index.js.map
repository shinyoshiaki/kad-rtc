{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/kademlia/services/rpcmanager/index.ts"],"names":[],"mappings":";;;AAEA,8DAA4B;AAC5B,mEAAmC;AAEnC,MAAqB,UAAU;IAA/B;QACU,SAAI,GAAG,IAAI,cAAI,EAAE,CAAC;QAE1B,YAAO,GAAG,CAAoB,IAAU,EAAE,GAAY,EAAE,EAAE;YACxD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAEtC,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAK,CAAC;YAE7B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;gBAC/C,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;oBACf,KAAK,CAAC,OAAO,CAAC,CAAW,CAAC,CAAC;oBAC3B,WAAW,EAAE,CAAC;iBACf;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,GAAG,iCAAM,GAAG,KAAE,EAAE,IAAG,CAAC;YAEzB,OAAO,KAAK,CAAC,SAAS,CAAC;QACzB,CAAC,CAAC;QAEF,QAAG,GAAG,CAAC,IAAU,EAAE,GAAyC,EAAE,EAAE;YAC9D,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,GAAG,iCAAM,GAAG,KAAE,EAAE,IAAG,CAAC;QAC3B,CAAC,CAAC;QAEF,iBAAY,GAAG,CAAoB,IAAe,EAAE,MAAY,EAAE,EAAE;YAClE,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAU,CAAC;YAClC,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACpD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;oBACtB,KAAK,CAAC,OAAO,CAAC,IAAc,CAAC,CAAC;iBAC/B;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACtC,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;CAAA;AArCD,6BAqCC","sourcesContent":["import { ID, Peer, RPCBase } from \"../../modules/peer/base\";\n\nimport Event from \"rx.mini\";\nimport Uuid from \"../../util/uuid\";\n\nexport default class RpcManager {\n  private uuid = new Uuid();\n\n  getWait = <T extends RPCBase>(peer: Peer, rpc: RPCBase) => {\n    this.uuid.setPrefix(peer.kid);\n    const id = this.uuid.get() + rpc.type;\n\n    const event = new Event<T>();\n\n    const { unSubscribe } = peer.onRpc.subscribe(v => {\n      if (v.id === id) {\n        event.execute(v as T & ID);\n        unSubscribe();\n      }\n    });\n\n    peer.rpc({ ...rpc, id });\n\n    return event.asPromise;\n  };\n\n  run = (peer: Peer, rpc: { type: string; [key: string]: any }) => {\n    this.uuid.setPrefix(peer.kid);\n    const id = this.uuid.get();\n    peer.rpc({ ...rpc, id });\n  };\n\n  asObservable = <T extends RPCBase>(type: T[\"type\"], listen: Peer) => {\n    const event = new Event<T & ID>();\n    const { unSubscribe } = listen.onRpc.subscribe(data => {\n      if (data.type === type) {\n        event.execute(data as T & ID);\n      }\n    });\n    listen.onDisconnect.once(unSubscribe);\n    return event;\n  };\n}\n"]}