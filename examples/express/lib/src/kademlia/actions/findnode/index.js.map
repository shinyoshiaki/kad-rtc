{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../src/kademlia/actions/findnode/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindNodeProxyOffer, Offer } from \"./listen/proxy\";\nimport { DependencyInjection } from \"../../di\";\nimport { listeners } from \"../../listeners\";\nimport Peer from \"../../modules/peer/base\";\n\nconst FindNode = (searchkid: string, except: string[]) => {\n  return { rpc: \"FindNode\" as const, searchkid, except };\n};\n\nexport type FindNode = ReturnType<typeof FindNode>;\n\nconst FindNodeAnswer = (sdp: any, peerkid: string) => {\n  return { rpc: \"FindNodeAnswer\" as const, sdp, peerkid };\n};\n\nexport type FindNodeAnswer = ReturnType<typeof FindNodeAnswer>;\n\nexport default async function findNode(\n  searchkid: string,\n  di: DependencyInjection\n) {\n  const { kTable } = di;\n  const { peerCreate } = di.modules;\n\n  if (kTable.getPeer(searchkid)) return kTable.getPeer(searchkid);\n\n  const findNodeProxyOffer = async (peer: Peer) => {\n    const except = kTable.allPeers.map(item => item.kid);\n    peer.rpc(FindNode(searchkid, except));\n\n    const res = await peer\n      .eventRpc<FindNodeProxyOffer>(\"FindNodeProxyOffer\")\n      .asPromise(3333)\n      .catch(console.warn);\n\n    if (res) {\n      const { peers } = res;\n      if (peers.length > 0) {\n        return { peers, peer };\n      }\n    }\n    return { peers: [], peer };\n  };\n\n  const findNodeAnswer = async (peer: Peer, offer: Offer) => {\n    const { peerkid, sdp } = offer;\n    const connect = peerCreate(peerkid);\n    const answer = await connect.setOffer(sdp);\n\n    peer.rpc(FindNodeAnswer(answer, peerkid));\n    const res = await connect.onConnect.asPromise(3333).catch(console.error);\n\n    if (res) {\n      kTable.add(connect);\n      listeners(connect, di);\n    }\n  };\n\n  const findNodeProxyOfferResult = await Promise.all(\n    kTable.findNode(searchkid).map(peer => findNodeProxyOffer(peer))\n  );\n\n  await Promise.all(\n    findNodeProxyOfferResult\n      .map(item => item.peers.map(offer => findNodeAnswer(item.peer, offer)))\n      .flatMap(v => v)\n  );\n\n  return kTable.getPeer(searchkid);\n}\n"]}