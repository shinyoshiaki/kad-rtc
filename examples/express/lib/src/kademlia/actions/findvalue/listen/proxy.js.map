{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../../../../../../../../src/kademlia/actions/findvalue/listen/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import Peer from \"../../../modules/peer/base\";\nimport { FindValuePeerOffer } from \"./peer\";\nimport { DependencyInjection } from \"../../../di\";\nimport { FindValue, FindValueAnswer } from \"..\";\n\nconst FindValueResult = (data: Partial<{ value: string; offers: Offer[] }>) => {\n  return { rpc: \"FindValueResult\" as const, data };\n};\n\nexport type Offer = { peerkid: string; sdp: any };\n\nexport type FindValueResult = ReturnType<typeof FindValueResult>;\n\nconst FindValueProxyOpen = (finderkid: string) => {\n  return { rpc: \"FindValueProxyOpen\" as const, finderkid };\n};\n\nexport type FindValueProxyOpen = ReturnType<typeof FindValueProxyOpen>;\n\nconst FindValueProxyAnswer = (sdp: any, finderkid: string) => {\n  return { rpc: \"FindValueProxyAnswer\" as const, sdp, finderkid };\n};\n\nexport type FindValueProxyAnswer = ReturnType<typeof FindValueProxyAnswer>;\n\ntype actions = FindValue | FindValueAnswer;\n\nexport default class FindValueProxy {\n  constructor(private listen: Peer, private di: DependencyInjection) {\n    const discon = listen.onRpc.subscribe((data: actions) => {\n      switch (data.rpc) {\n        case \"FindValue\":\n          this.findvalue(data);\n          break;\n        case \"FindValueAnswer\":\n          this.findValueAnswer(data);\n          break;\n      }\n    });\n\n    listen.onDisconnect.once(() => discon.unSubscribe());\n  }\n\n  async findvalue(data: FindValue) {\n    const { key, except } = data;\n    const { kTable } = this.di;\n    const { kvs } = this.di.modules;\n\n    const value = kvs.get(key);\n\n    if (value) {\n      this.listen.rpc(FindValueResult({ value }));\n    } else {\n      const peers = kTable.findNode(key);\n      const offers: { peerkid: string; sdp: any }[] = [];\n\n      const findValuePeerOffer = async (peer: Peer) => {\n        if (!(peer.kid === this.listen.kid || except.includes(peer.kid))) {\n          peer.rpc(FindValueProxyOpen(this.listen.kid));\n\n          const res = await peer\n            .eventRpc<FindValuePeerOffer>(\"FindValuePeerOffer\")\n            .asPromise(3333)\n            .catch(console.error);\n\n          if (res) {\n            const { peerkid, sdp } = res;\n            offers.push({ peerkid, sdp });\n          }\n        }\n      };\n\n      await Promise.all(peers.map(peer => findValuePeerOffer(peer)));\n\n      this.listen.rpc(FindValueResult({ offers }));\n    }\n  }\n\n  async findValueAnswer(data: FindValueAnswer) {\n    const { sdp, peerkid } = data;\n    const { kTable } = this.di;\n    const peer = kTable.getPeer(peerkid);\n    if (!peer) return;\n    peer.rpc(FindValueProxyAnswer(sdp, this.listen.kid));\n  }\n}\n"]}