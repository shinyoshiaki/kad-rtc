{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/portal/index.ts"],"names":[],"mappings":";;;AAAA,8DAA8B;AAC9B,yCAA6D;AAC7D,sEAAqC;AAErC,MAAM,KAAK,GAA4B,EAAE,CAAC;AAE1C,SAA8B,SAAS,CAAC,GAAa,EAAE,IAAY;;QACjE,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;QAEtB,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACnD,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3B,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAO,GAAoB,EAAE,GAAqB,EAAE,EAAE;YACtE,IAAI;gBACF,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC9B,MAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;gBACzB,IAAI,GAAG,EAAE;oBACP,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;oBACrB,MAAM,IAAI,GAAG,gBAAU,CAAC,GAAG,CAAC,CAAC;oBAC7B,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;oBAClB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;oBACvC,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;iBAC1C;aACF;YAAC,OAAO,KAAK,EAAE,GAAE;QACpB,CAAC,CAAA,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAO,GAAoB,EAAE,GAAqB,EAAE,EAAE;YACxE,IAAI;gBACF,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;gBACjC,IAAI,MAAM,IAAI,GAAG,EAAE;oBACjB,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;oBACxB,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC7B,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACd,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;oBAClB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;oBACzB,OAAO,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC9B;aACF;YAAC,OAAO,KAAK,EAAE,GAAE;QACpB,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;CAAA;AArCD,4BAqCC","sourcesContent":["import Express from \"express\";\nimport { Kademlia, PeerModule, Peer } from \"../../../../src\";\nimport bodyParser from \"body-parser\";\n\nconst peers: { [key: string]: Peer } = {};\n\nexport default async function potalnode(kad: Kademlia, port: number) {\n  const app = Express();\n\n  app.use(bodyParser.urlencoded({ extended: true }));\n  app.use(bodyParser.json());\n\n  app.listen(port, () => {\n    console.log(\"Example app listening on port \" + port);\n  });\n\n  app.post(\"/join\", async (req: Express.Request, res: Express.Response) => {\n    try {\n      console.log(\"join\", req.body);\n      const kid = req.body.kid;\n      if (kid) {\n        console.log({ kid });\n        const peer = PeerModule(kid);\n        peers[kid] = peer;\n        const offer = await peer.createOffer();\n        return res.send({ offer, kid: kad.kid });\n      }\n    } catch (error) {}\n  });\n\n  app.post(\"/answer\", async (req: Express.Request, res: Express.Response) => {\n    try {\n      const { answer, kid } = req.body;\n      if (answer && kid) {\n        const peer = peers[kid];\n        await peer.setAnswer(answer);\n        kad.add(peer);\n        delete peers[kid];\n        console.log(\"connected\");\n        return res.send(\"connected\");\n      }\n    } catch (error) {}\n  });\n}\n"]}